precompile(Tuple{Lava.var"##GlobalDescriptorsConfig#123", Int64, Int64, Int64, Int64, Type{Lava.GlobalDescriptorsConfig}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:with_validation, :instance_extensions), Tuple{Bool, Array{String, 1}}}, typeof(Lava.init)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:application_info, :next), Tuple{Vulkan.ApplicationInfo, Vulkan.ValidationFeaturesEXT}}, Type{Lava.Instance}, Array{String, 1}, Array{String, 1}, Vulkan.DebugUtilsMessengerCreateInfoEXT})
precompile(Tuple{Lava.var"#95#101", Vulkan.PhysicalDeviceFeatures2})
precompile(Tuple{typeof(Dictionaries.__dictionary), typeof(Base.first), typeof(Base.last), Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceFeatures2}, Base.Generator{Array{Any, 1}, Lava.var"#95#101"}, Int64})
precompile(Tuple{Lava.var"#95#101", Vulkan.PhysicalDeviceVulkan13Features})
precompile(Tuple{typeof(Dictionaries.__dictionary), typeof(Base.first), typeof(Base.last), Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}, Base.Generator{Array{Any, 1}, Lava.var"#95#101"}, Int64})
precompile(Tuple{Lava.var"#95#101", Vulkan.PhysicalDeviceVulkan12Features})
precompile(Tuple{Lava.var"#95#101", Vulkan.PhysicalDeviceVulkan11Features})
precompile(Tuple{Lava.var"#96#102", Vulkan.PhysicalDeviceProperties2})
precompile(Tuple{typeof(Dictionaries.__dictionary), typeof(Base.first), typeof(Base.last), Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceProperties2}, Base.Generator{Array{Any, 1}, Lava.var"#96#102"}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Lava.var"#98#104"{Base.VersionNumber, Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}}, Array{Vulkan.FeatureCondition, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Vulkan.FeatureCondition, 1}, Lava.var"#98#104"{Base.VersionNumber, Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Lava.var"#99#105"{Base.VersionNumber, Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceProperties2}}, Array{Vulkan.PropertyCondition, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Vulkan.PropertyCondition, 1}, Lava.var"#99#105"{Base.VersionNumber, Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceProperties2}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Lava.Instance, Lava.Device}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Lava.Instance, Lava.Device}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Lava.Device, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Lava.var"#98#104"{Base.VersionNumber, Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceFeatures2}}, Array{Vulkan.FeatureCondition, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Vulkan.FeatureCondition, 1}, Lava.var"#98#104"{Base.VersionNumber, Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceFeatures2}}}})
precompile(Tuple{Type{Lava.Buffer}, Lava.Device, Int64})
precompile(Tuple{typeof(Base.getproperty), Lava.Buffer, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Lava.Memory}})
precompile(Tuple{typeof(Lava.isallocated), Lava.Buffer})
precompile(Tuple{typeof(Base.similar), Lava.Buffer})
precompile(Tuple{Lava.var"##similar#72", Nothing, Vulkan.BufferUsageFlag, SPIRV.NativeLayout, typeof(Base.similar), Lava.Buffer})
precompile(Tuple{typeof(Base.:(!=)), Base.RefValue{Lava.Memory}, Base.RefValue{Lava.Memory}})
precompile(Tuple{typeof(Base.lastindex), Lava.Buffer})
precompile(Tuple{typeof(Base.view), Lava.Buffer, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:handle, :size, :offset, :stride, :usage_flags, :queue_family_indices, :sharing_mode, :memory, :layout), Tuple{Vulkan.Buffer, Int64, Int64, Int64, Vulkan.BufferUsageFlag, Array{Int8, 1}, Vulkan.SharingMode, Base.RefValue{Lava.Memory}, SPIRV.NativeLayout}}, NamedTuple{(:handle, :size, :offset, :stride, :usage_flags, :queue_family_indices, :sharing_mode, :memory, :layout), Tuple{Vulkan.Buffer, Int64, Int64, Int64, Vulkan.BufferUsageFlag, Array{Int8, 1}, Vulkan.SharingMode, Base.RefValue{Lava.Memory}, SPIRV.NativeLayout}}, Lava.Buffer, NamedTuple{(:offset, :stride, :size), Tuple{Int64, Int64, Int64}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:handle, :size, :offset, :stride, :usage_flags, :queue_family_indices, :sharing_mode, :memory, :layout), Tuple{Vulkan.Buffer, Int64, Int64, Int64, Vulkan.BufferUsageFlag, Array{Int8, 1}, Vulkan.SharingMode, Base.RefValue{Lava.Memory}, SPIRV.NativeLayout}}})
precompile(Tuple{Type{Lava.Buffer}, Vulkan.Buffer, Int64, Int64, Int64, Vulkan.BufferUsageFlag, Array{Int8, 1}, Vulkan.SharingMode, Base.RefValue{Lava.Memory}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Base.view), Lava.Buffer, Base.UnitRange{Int64}})
precompile(Tuple{Type{Lava.Memory}, Lava.Device, Int64, Int64, Lava.MemoryDomain})
precompile(Tuple{typeof(Base.argmax), Lava.var"#68#70"{Base.Fix1{typeof(Lava.score), Lava.MemoryDomain}, NTuple{5, Vulkan.MemoryType}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), Lava.Memory, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Lava.Memory, Symbol})
precompile(Tuple{Lava.var"#225#226"{Vulkan.DebugUtilsMessageSeverityFlagEXT, String}})
precompile(Tuple{Type{Lava.OutOfDeviceMemoryError}, Int64})
precompile(Tuple{typeof(Lava.allocate_memory), Lava.Device, Int64, Int64, Lava.MemoryDomain})
precompile(Tuple{Type{Lava.Memory}, Vulkan.DeviceMemory, Int64, UInt64, Vulkan.MemoryPropertyFlag, Lava.MemoryDomain, Base.RefValue{Bool}, Base.RefValue{Ptr{Nothing}}})
precompile(Tuple{Type{Lava.DeviceAddress}, Lava.Buffer})
precompile(Tuple{Type{Lava.DeviceAddress}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.:(!=)), Lava.DeviceAddress, Lava.DeviceAddress})
precompile(Tuple{typeof(Base.:(+)), Lava.DeviceAddress, Int64})
precompile(Tuple{Type{Lava.DeviceAddress}, UInt64})
precompile(Tuple{typeof(Base.:(==)), Lava.DeviceAddress, Lava.DeviceAddress})
precompile(Tuple{typeof(Lava.bind!), Lava.Buffer, Lava.Memory})
precompile(Tuple{Type{NamedTuple{(:memory_domain,), T} where T<:Tuple}, Tuple{Lava.MemoryDomain}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:memory_domain,), Tuple{Lava.MemoryDomain}}, typeof(Base.similar), Lava.Buffer})
precompile(Tuple{Lava.var"##similar#72", Lava.MemoryDomain, Vulkan.BufferUsageFlag, SPIRV.NativeLayout, typeof(Base.similar), Lava.Buffer})
precompile(Tuple{typeof(Base.:(!=)), Lava.Memory, Lava.Memory})
precompile(Tuple{Type{NamedTuple{(:data, :memory_domain), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Lava.MemoryDomain}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:data, :memory_domain), Tuple{Array{Int64, 1}, Lava.MemoryDomain}}, Type{Lava.Buffer}, Lava.Device})
precompile(Tuple{typeof(Base.copyto!), Lava.Memory, Array{Int64, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:data,), Tuple{Array{Int64, 1}}}, Type{Lava.Buffer}, Lava.Device})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:memory_domain, :usage_flags, :layout), Tuple{Lava.MemoryDomain, Vulkan.BufferUsageFlag, SPIRV.NativeLayout}}, typeof(Base.similar), Lava.Buffer})
precompile(Tuple{typeof(Base.finalize), Lava.SimpleCommandBuffer})
precompile(Tuple{typeof(Base.:(==)), Lava.MemoryDomain, Lava.MemoryDomain})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:size,), Tuple{Int64}}, Type{Lava.Buffer}, Lava.Device})
precompile(Tuple{Type{Lava.Buffer}, Lava.Device})
precompile(Tuple{Type{Lava.LinearAllocator}, Lava.Device, Int64})
precompile(Tuple{typeof(Base.getproperty), Lava.LinearAllocator, Symbol})
precompile(Tuple{typeof(Lava.available_size), Lava.LinearAllocator})
precompile(Tuple{Type{Lava.DeviceAddress}, Lava.LinearAllocator})
precompile(Tuple{typeof(Base.copyto!), Lava.LinearAllocator, Array{Int64, 1}})
precompile(Tuple{typeof(Lava.available_size), Lava.LinearAllocator, Int64})
precompile(Tuple{typeof(Base.copyto!), Lava.LinearAllocator, Tuple{Float32, Float32, Float32}})
precompile(Tuple{typeof(Lava.reset!), Lava.LinearAllocator})
precompile(Tuple{Type{Lava.Image}, Lava.Device, Array{Int64, 1}, Vulkan.Format, Vulkan.ImageUsageFlag})
precompile(Tuple{typeof(Lava.isallocated), Lava.Image})
precompile(Tuple{typeof(Base.similar), Lava.Image})
precompile(Tuple{Type{Lava.ImageView}, Lava.Image})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:format, :dims), Tuple{Vulkan.Format, Array{Int64, 1}}}, Type{Lava.Image}, Lava.Device})
precompile(Tuple{typeof(Base.eltype), Lava.Image})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:data,), Tuple{Array{ColorTypes.RGBA{Float32}, 2}}}, Type{Lava.Image}, Lava.Device})
precompile(Tuple{typeof(Base.copyto!), Lava.Memory, Array{ColorTypes.RGBA{Float32}, 2}, SPIRV.NativeLayout})
precompile(Tuple{Type{NamedTuple{(:data, :usage_flags, :memory_domain), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Vulkan.BufferUsageFlag, Lava.MemoryDomain}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:data, :usage_flags, :memory_domain), Tuple{Array{Int64, 1}, Vulkan.BufferUsageFlag, Lava.MemoryDomain}}, Type{Lava.Buffer}, Lava.Device})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:size, :usage_flags), Tuple{Int64, Vulkan.BufferUsageFlag}}, Type{Lava.Buffer}, Lava.Device})
precompile(Tuple{typeof(Base.collect), Lava.Buffer})
precompile(Tuple{typeof(Base.collect), Type{Int64}, Lava.Buffer})
precompile(Tuple{typeof(Lava.sync_submission), Lava.Device})
precompile(Tuple{Type{NamedTuple{(:submission,), T} where T<:Tuple}, Tuple{Lava.SubmissionInfo}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:submission,), Tuple{Lava.SubmissionInfo}}, typeof(Lava.transfer), Lava.Device, Lava.Buffer, Lava.Buffer})
precompile(Tuple{typeof(Base.collect), Lava.Buffer, Lava.Device})
precompile(Tuple{typeof(Base.finalize), Lava.Buffer})
precompile(Tuple{Vulkan.var"#2#4"{Vulkan.Buffer, Vulkan.var"#1135#1136"{Ptr{Nothing}, Lava.Device}, Vulkan.Device}})
precompile(Tuple{typeof(Base.collect), Type{Int64}, Lava.Buffer, Lava.Device})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:data, :usage_flags), Tuple{Array{Int64, 1}, Vulkan.BufferUsageFlag}}, Type{Lava.Buffer}, Lava.Device})
precompile(Tuple{Type{NamedTuple{(:data, :memory_domain, :optimal_tiling, :usage_flags), T} where T<:Tuple}, Tuple{Array{ColorTypes.RGBA{Float16}, 2}, Lava.MemoryDomain, Bool, Vulkan.ImageUsageFlag}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:data, :memory_domain, :optimal_tiling, :usage_flags), Tuple{Array{ColorTypes.RGBA{Float16}, 2}, Lava.MemoryDomain, Bool, Vulkan.ImageUsageFlag}}, Type{Lava.Image}, Lava.Device})
precompile(Tuple{typeof(Base.copyto!), Lava.Memory, Array{ColorTypes.RGBA{Float16}, 2}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Base.collect), Lava.Image, Lava.Device})
precompile(Tuple{typeof(Base.collect), Any, Lava.Image, Lava.Device})
precompile(Tuple{Type{NamedTuple{(:data, :memory_domain, :usage_flags), T} where T<:Tuple}, Tuple{Array{ColorTypes.RGBA{Float16}, 2}, Lava.MemoryDomain, Vulkan.ImageUsageFlag}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:data, :memory_domain, :usage_flags), Tuple{Array{ColorTypes.RGBA{Float16}, 2}, Lava.MemoryDomain, Vulkan.ImageUsageFlag}}, Type{Lava.Image}, Lava.Device})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:data, :optimal_tiling, :usage_flags), Tuple{Array{ColorTypes.RGBA{Float16}, 2}, Bool, Vulkan.ImageUsageFlag}}, Type{Lava.Image}, Lava.Device})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:data, :usage_flags), Tuple{Array{ColorTypes.RGBA{Float16}, 2}, Vulkan.ImageUsageFlag}}, Type{Lava.Image}, Lava.Device})
precompile(Tuple{Type{Lava.Resource}, Lava.ResourceType, Nothing})
precompile(Tuple{typeof(Lava.assert_type), Lava.Resource, Lava.ResourceType})
precompile(Tuple{typeof(Lava.resource_type), Lava.Resource})
precompile(Tuple{typeof(Base.string), String, Lava.ResourceType, Vararg{Any}})
precompile(Tuple{typeof(Base._str_sizehint), Lava.ResourceType})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Lava.ResourceType})
precompile(Tuple{Type{Lava.ResourceFlags}, UInt32})
precompile(Tuple{Type{UInt128}, Lava.ResourceType})
precompile(Tuple{typeof(Base.:(|)), Lava.ResourceFlags, Lava.ResourceFlags})
precompile(Tuple{typeof(Lava.buffer_resource), Int64})
precompile(Tuple{typeof(Lava.islogical), Lava.Resource})
precompile(Tuple{typeof(Base.:(==)), Lava.ResourceType, Lava.ResourceType})
precompile(Tuple{typeof(Base.getproperty), Lava.Resource, Symbol})
precompile(Tuple{typeof(Lava.image_resource), Vulkan.Format, Array{Int64, 1}})
precompile(Tuple{typeof(Lava.attachment_resource), Vulkan.Format, Array{Int64, 1}})
precompile(Tuple{typeof(Lava.buffer_resource), Lava.Device, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.copyto!), Lava.Memory, Array{UInt8, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Lava.isphysical), Lava.Resource})
precompile(Tuple{typeof(Lava.image_resource), Lava.Device, Array{ColorTypes.RGBA{Float32}, 2}})
precompile(Tuple{typeof(Base.:(|)), Lava.MemoryAccess, Lava.MemoryAccess})
precompile(Tuple{Type{NamedTuple{(:access, :aspect), T} where T<:Tuple}, Tuple{Lava.MemoryAccess, Vulkan.ImageAspectFlag}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:access, :aspect), Tuple{Lava.MemoryAccess, Vulkan.ImageAspectFlag}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Lava.attachment_resource), Lava.Device, Array{ColorTypes.RGBA{Float32}, 2}})
precompile(Tuple{typeof(Lava.subresource_range), Vulkan.ImageAspectFlag, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Lava.subresource_layers), Vulkan.ImageAspectFlag, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Lava.Attachment, Symbol})
precompile(Tuple{typeof(Base.getproperty), Lava.ImageView, Symbol})
precompile(Tuple{Type{Lava.FencePool}, Lava.Device})
precompile(Tuple{typeof(Base.getproperty), Lava.FencePool, Symbol})
precompile(Tuple{typeof(Lava.compact!), Lava.FencePool})
precompile(Tuple{typeof(Lava.fence_status), Vulkan.Fence})
precompile(Tuple{Type{Lava.Texture}, Lava.Resource, Lava.Sampling})
precompile(Tuple{Type{UInt128}, Lava.DescriptorType})
precompile(Tuple{typeof(Lava.storage_image_descriptor), Lava.Resource})
precompile(Tuple{typeof(Lava.sampler_descriptor), Lava.Sampling})
precompile(Tuple{typeof(Lava.sampled_image_descriptor), Lava.Resource})
precompile(Tuple{typeof(Lava.texture_descriptor), Lava.Texture})
precompile(Tuple{typeof(Base.vect), Lava.Descriptor, Vararg{Lava.Descriptor}})
precompile(Tuple{Type{Lava.DescriptorArray}})
precompile(Tuple{Type{Lava.DescriptorID}, Lava.DescriptorType})
precompile(Tuple{typeof(Lava.new_descriptor!), Lava.DescriptorArray, Lava.DescriptorID})
precompile(Tuple{typeof(Lava.delete_descriptor!), Lava.DescriptorArray, Lava.DescriptorID})
precompile(Tuple{typeof(Base.getproperty), Lava.DescriptorArray, Symbol})
precompile(Tuple{typeof(Base.string), String, Lava.DescriptorID})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Lava.DescriptorID})
precompile(Tuple{typeof(Base.sizeof), Lava.DescriptorID})
precompile(Tuple{typeof(Base.isempty), Dictionaries.Dictionary{UInt32, Lava.DescriptorID}})
precompile(Tuple{Type{Lava.GlobalDescriptors}, Lava.Device})
precompile(Tuple{typeof(Lava.request_index!), Lava.GlobalDescriptors, Lava.Descriptor})
precompile(Tuple{typeof(Base.getproperty), Lava.GlobalDescriptors, Symbol})
precompile(Tuple{typeof(Base.length), Dictionaries.Dictionary{Lava.DescriptorID, Lava.Descriptor}})
precompile(Tuple{typeof(Base.getproperty), Lava.Descriptor, Symbol})
precompile(Tuple{typeof(Base.vect), Lava.DescriptorID})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Int64, Array{Lava.DescriptorID, 1}}, Int64, Array{Lava.DescriptorID, 1}})
precompile(Tuple{typeof(Lava.free_descriptor_batch!), Lava.GlobalDescriptors, Int64})
precompile(Tuple{typeof(Base.haskey), Dictionaries.Dictionary{Lava.DescriptorID, Lava.Descriptor}, Lava.DescriptorID})
precompile(Tuple{typeof(Base.empty!), Lava.GlobalDescriptors})
precompile(Tuple{typeof(Base.isempty), Dictionaries.Dictionary{Lava.DescriptorID, Lava.Descriptor}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Lava.DescriptorIndex}, SPIRV.IntegerType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{UInt32, UInt8, Lava.DescriptorIndex}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.convert), Type{Type{Lava.DeviceAddress}}, Type{Lava.DeviceAddress}})
precompile(Tuple{typeof(Base._all), Base.Fix2{typeof(Base.isequal), Type{Lava.DeviceAddress}}, Tuple{DataType, DataType, DataType}, Base.Colon})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Lava.DeviceAddress}, SPIRV.IntegerType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{Lava.DeviceAddress, Lava.DeviceAddress, Int64}}, SPIRV.StructType})
precompile(Tuple{typeof(Base._all), Base.Fix2{typeof(Base.isequal), Type{Lava.DeviceAddress}}, Tuple{DataType, DataType}, Base.Colon})
precompile(Tuple{typeof(Base.eltype), Type{Tuple{Lava.DeviceAddress, Lava.DeviceAddress}}})
precompile(Tuple{Vulkan.var"#2#4"{Vulkan.DescriptorPool, Vulkan.var"#1178#1179"{Ptr{Nothing}, Lava.Device}, Vulkan.Device}})
precompile(Tuple{Vulkan.var"#2#4"{Vulkan.DescriptorSetLayout, Vulkan.var"#1174#1175"{Ptr{Nothing}, Lava.Device}, Vulkan.Device}})
precompile(Tuple{Vulkan.var"#2#4"{Vulkan.Fence, Vulkan.var"#1118#1119"{Ptr{Nothing}, Lava.Device}, Vulkan.Device}})
precompile(Tuple{Vulkan.var"#2#4"{Vulkan.Image, Vulkan.var"#1143#1144"{Ptr{Nothing}, Lava.Device}, Vulkan.Device}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{Lava.DeviceAddress, Lava.DeviceAddress}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Array{Lava.DeviceAddress, 1}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{SPIRV.Vec{2, Float32}, Lava.DescriptorIndex}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{SPIRV.Vec{2, Float32}, Lava.DeviceAddress, Lava.DescriptorIndex}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{Lava.DeviceAddress, Lava.DescriptorIndex}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.convert), Type{Type{Tuple{Lava.DeviceAddress, Lava.DeviceAddress}}}, Type{Tuple{Lava.DeviceAddress, Lava.DeviceAddress}}})
precompile(Tuple{typeof(Base._all), Base.Fix2{typeof(Base.isequal), Type{Tuple{Lava.DeviceAddress, Lava.DeviceAddress}}}, Tuple{DataType, DataType}, Base.Colon})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{Tuple{Lava.DeviceAddress, Lava.DeviceAddress}, Int64}}, SPIRV.StructType})
precompile(Tuple{Type{Lava.DescriptorIndex}, Int64})
precompile(Tuple{typeof(Lava.generated_block_address), Int64})
precompile(Tuple{Type{Lava.DataBlock}, Tuple{Int64, UInt8, Int64}, SPIRV.VulkanLayout})
precompile(Tuple{Type{Lava.DataBlock}, Tuple{UInt32, UInt8, Lava.DescriptorIndex}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, UInt32, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, UInt8, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, Lava.DescriptorIndex, Int64})
precompile(Tuple{Type{Lava.DataBlock}, Tuple{Lava.DeviceAddress, Lava.DeviceAddress, Int64}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, Lava.DeviceAddress, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Lava.DataBlock, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Lava.DataBlock, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Lava.DataBlock, Symbol})
precompile(Tuple{Type{Lava.Texture}, Lava.Resource})
precompile(Tuple{typeof(Lava.buffer_resource), Lava.Device, Int64})
precompile(Tuple{typeof(Base.copyto!), Lava.Memory, Int64, SPIRV.NativeLayout})
precompile(Tuple{typeof(Accessors.set), Lava.Resource, Accessors.PropertyLens{:id}, Lava.ResourceID})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:id, :data, :flags), Tuple{Lava.ResourceID, Lava.Buffer, Lava.ResourceFlags}}, NamedTuple{(:id, :data, :flags), Tuple{Lava.ResourceID, Lava.Buffer, Lava.ResourceFlags}}, Lava.Resource, NamedTuple{(:id,), Tuple{Lava.ResourceID}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:id, :data, :flags), Tuple{Lava.ResourceID, Lava.Buffer, Lava.ResourceFlags}}})
precompile(Tuple{Type{Lava.Resource}, Lava.ResourceID, Lava.Buffer, Lava.ResourceFlags})
precompile(Tuple{Type{Pair{A, B} where B where A}, Lava.ResourceID, Lava.Resource})
precompile(Tuple{typeof(Base.vect), Pair{Lava.ResourceID, Lava.Resource}})
precompile(Tuple{typeof(Dictionaries.dictionary), Array{Pair{Lava.ResourceID, Lava.Resource}, 1}})
precompile(Tuple{typeof(Lava.generate_invocation_data), Expr, Expr})
precompile(Tuple{typeof(Lava.postwalk), Function, Expr})
precompile(Tuple{typeof(Lava.walk), Expr, Function, Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}}})
precompile(Tuple{Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, LineNumberNode})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{LineNumberNode, 1}, LineNumberNode, Base.Generator{Array{Any, 1}, Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}}, Int64})
precompile(Tuple{Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Expr})
precompile(Tuple{Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}}, Int64, Int64})
precompile(Tuple{Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Any, 1}, Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}}, Int64})
precompile(Tuple{Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, UInt8})
precompile(Tuple{typeof(Base.collect_to!), Array{Integer, 1}, Base.Generator{Array{Any, 1}, Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Array{Any, 1}, Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}}, Int64})
precompile(Tuple{Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Float64})
precompile(Tuple{Type{Lava.NodeID}})
precompile(Tuple{typeof(Lava.patch_descriptors!), Lava.DataBlock, Lava.GlobalDescriptors, Array{Lava.Descriptor, 1}, Lava.NodeID})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:id, :data, :flags, :node_id, :written_state), Tuple{Lava.DescriptorID, Lava.Texture, Lava.DescriptorFlags, Lava.NodeID, Nothing}}, NamedTuple{(:id, :data, :flags, :node_id, :written_state), Tuple{Lava.DescriptorID, Lava.Texture, Lava.DescriptorFlags, Nothing, Nothing}}, Lava.Descriptor, NamedTuple{(:node_id,), Tuple{Lava.NodeID}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:id, :data, :flags, :node_id, :written_state), Tuple{Lava.DescriptorID, Lava.Texture, Lava.DescriptorFlags, Lava.NodeID, Nothing}}})
precompile(Tuple{Type{Lava.Descriptor}, Lava.DescriptorID, Lava.Texture, Lava.DescriptorFlags, Lava.NodeID, Nothing})
precompile(Tuple{typeof(Base.vect), Lava.DataBlock, Vararg{Lava.DataBlock}})
precompile(Tuple{Type{Lava.ProgramInvocationData}, Array{Lava.DataBlock, 1}, Array{Lava.Descriptor, 1}, Array{Any, 1}, Int64, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Base.getindex), Type{Lava.DeviceAddress}, Int64, Int64})
precompile(Tuple{Type{Dictionaries.Dictionary{I, T} where T where I}, Array{Lava.DataBlock, 1}, Array{Lava.DeviceAddress, 1}})
precompile(Tuple{typeof(Lava.patch_pointers!), Lava.DataBlock, Lava.ProgramInvocationData, Dictionaries.Dictionary{Lava.DataBlock, Lava.DeviceAddress}, Nothing})
precompile(Tuple{typeof(Base.last), Array{Lava.DataBlock, 1}})
precompile(Tuple{typeof(Base.empty!), Dictionaries.Dictionary{Lava.DataBlock, Lava.DeviceAddress}})
precompile(Tuple{Type{Lava.DataBlock}, Array{Tuple{SPIRV.Vec{2, Float32}, SPIRV.Arr{3, Float32}}, 1}, SPIRV.VulkanLayout})
precompile(Tuple{Type{Lava.DataBlock}, Tuple{SPIRV.Vec{2, Float32}, Lava.DescriptorIndex}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, SPIRV.Vec{2, Float32}, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, Tuple{Float32, Float32}, Int64})
precompile(Tuple{Type{Lava.DataBlock}, Tuple{Lava.DeviceAddress, Lava.DeviceAddress}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Lava.generated_logical_buffer_address), Int64})
precompile(Tuple{Type{Lava.DataBlock}, Tuple{SPIRV.Vec{2, Float32}, Lava.DeviceAddress, Lava.DescriptorIndex}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Base.vect), Lava.ResourceID})
precompile(Tuple{Type{Lava.ProgramInvocationData}, Array{Lava.DataBlock, 1}, Array{Lava.Descriptor, 1}, Array{Lava.ResourceID, 1}, Int64, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Lava.patch_pointers!), Lava.DataBlock, Lava.ProgramInvocationData, Dictionaries.Dictionary{Lava.DataBlock, Lava.DeviceAddress}, Dictionaries.Dictionary{Lava.ResourceID, Lava.Resource}})
precompile(Tuple{Type{Lava.DeviceAddress}, Lava.Resource})
precompile(Tuple{typeof(Base.getindex), Type{UInt64}, Lava.DeviceAddress})
precompile(Tuple{typeof(Base.getproperty), Lava.ProgramInvocationData, Symbol})
precompile(Tuple{typeof(Lava.device_address_block!), Lava.LinearAllocator, Lava.GlobalDescriptors, Nothing, Lava.NodeID, Lava.ProgramInvocationData})
precompile(Tuple{Type{Lava.Program}, Lava.ProgramType, Nothing, SPIRV.VulkanLayout})
precompile(Tuple{Type{Lava.InvocationDataContext}})
precompile(Tuple{typeof(Base.getproperty), Lava.Program, Symbol})
precompile(Tuple{typeof(Base.getproperty), Lava.InvocationDataContext, Symbol})
precompile(Tuple{typeof(Lava.reserve!), Lava.CounterDict{Lava.DataBlock}, Lava.DataBlock})
precompile(Tuple{typeof(Lava.reserve!), Lava.CounterDict{Lava.Descriptor}, Lava.Descriptor})
precompile(Tuple{typeof(Base.getproperty), Lava.CounterDict{Lava.DataBlock}, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Lava.DataBlock, Int64}, Lava.DataBlock})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{Pair{Lava.DataBlock, Int64}, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{Pair{Lava.Descriptor, Int64}, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{Pair{Lava.ResourceID, Int64}, 1}}}}})
precompile(Tuple{Type{Lava.ProgramInvocationData}, Lava.DataBlock, Lava.InvocationDataContext, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Base.getindex), Array{Lava.DataBlock, 1}, Int64})
precompile(Tuple{Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Module})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Module, 1}, Module, Base.Generator{Array{Any, 1}, Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}}, Int64})
precompile(Tuple{Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, QuoteNode})
precompile(Tuple{Type{Lava.DataBlock}, Array{Tuple{Int64, Int64}, 1}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Base.vect), Tuple{Lava.DeviceAddress, Lava.DescriptorIndex}})
precompile(Tuple{Type{Lava.DataBlock}, Array{Tuple{Lava.DeviceAddress, Lava.DescriptorIndex}, 1}, SPIRV.VulkanLayout})
precompile(Tuple{Type{Lava.DataBlock}, SPIRV.Vec{2, Float32}, SPIRV.VulkanLayout})
precompile(Tuple{Type{Lava.DataBlock}, Tuple{Tuple{Lava.DeviceAddress, Lava.DeviceAddress}, Int64}, SPIRV.VulkanLayout})
precompile(Tuple{Type{Lava.DataBlock}, Tuple{Int64, UInt32}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Lava.isbuffer), Lava.Resource})
precompile(Tuple{typeof(Lava.reserve!), Lava.CounterDict{Lava.ResourceID}, Lava.ResourceID})
precompile(Tuple{typeof(Lava.device_address_block!), Lava.LinearAllocator, Lava.GlobalDescriptors, Dictionaries.Dictionary{Lava.ResourceID, Lava.Resource}, Lava.NodeID, Lava.ProgramInvocationData})
precompile(Tuple{typeof(Lava.shader), Symbol, Expr, SPIRV.ExecutionModel, Nothing})
precompile(Tuple{typeof(Base.mapfoldl_impl), Base.var"#315#316"{Lava.var"#110#111"}, typeof(Base.add_sum), Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Lava.propagate_source), LineNumberNode, Expr})
precompile(Tuple{typeof(Lava.shader), String, Expr, SPIRV.ExecutionModel, Nothing})
precompile(Tuple{Type{Lava.ShaderSpec}, Function, Type, SPIRV.ShaderInterface})
precompile(Tuple{Type{Lava.ShaderSource}, Lava.Device, Lava.ShaderSpec})
precompile(Tuple{typeof(Base.get!), Lava.var"#106#107"{Lava.ShaderCache, Lava.ShaderSpec}, Base.Dict{Lava.ShaderSpec, Lava.ShaderSource}, Lava.ShaderSpec})
precompile(Tuple{Type{Lava.Shader}, Lava.Device, Lava.ShaderSource})
precompile(Tuple{typeof(Base.get!), Lava.var"#108#109"{Lava.ShaderCache, Lava.ShaderSource}, Base.IdDict{Lava.ShaderSource, Lava.Shader}, Any})
precompile(Tuple{typeof(Base.empty!), Lava.ShaderCache})
precompile(Tuple{typeof(Base.getproperty), Lava.ShaderCache, Symbol})
precompile(Tuple{typeof(Base.getproperty), Lava.Cache{Base.Dict{Lava.ShaderSpec, Lava.ShaderSource}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Lava.CacheDiagnostics, Symbol})
precompile(Tuple{typeof(Base.getproperty), Lava.Cache{Base.IdDict{Lava.ShaderSource, Lava.Shader}}, Symbol})
precompile(Tuple{typeof(Base.length), Lava.Cache{Base.Dict{Lava.ShaderSpec, Lava.ShaderSource}}})
precompile(Tuple{typeof(Base.length), Lava.Cache{Base.IdDict{Lava.ShaderSource, Lava.Shader}}})
precompile(Tuple{typeof(Lava.pipeline_layout), Lava.Device})
precompile(Tuple{typeof(LRUCache._constone), Lava.PipelineLayout})
precompile(Tuple{typeof(LRUCache._finalize_evictions!), Nothing, Array{Tuple{UInt64, Lava.PipelineLayout}, 1}})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{Lava.var"#112#113"}, Symbol})
precompile(Tuple{Type{Lava.Program}, Lava.Shader, Lava.Shader})
precompile(Tuple{typeof(Lava.format), DataType})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:format, :dims), Tuple{Vulkan.Format, Array{Int64, 1}}}, typeof(Lava.attachment_resource), Lava.Device, Nothing})
precompile(Tuple{typeof(Base.empty!), Lava.HashTable{Lava.Pipeline}})
precompile(Tuple{typeof(LRUCache._finalize_evictions!), Nothing, Array{Tuple{UInt64, Lava.Pipeline}, 1}})
precompile(Tuple{Type{Lava.RenderArea}, Int64, Int64})
precompile(Tuple{Lava.var"##RenderState#124", Nothing, Bool, Bool, Bool, Tuple{Float32, Float32}, Bool, Nothing, Vulkan.CompareOp, Bool, Vulkan.ColorComponentFlag, Bool, Vulkan.StencilOpState, Vulkan.StencilOpState, Float32, Type{Lava.RenderState}})
precompile(Tuple{Type{Lava.RenderState}})
precompile(Tuple{Lava.var"##ProgramInvocationState#125", Vulkan.CullModeFlag, Vulkan.FrontFace, Bool, Vulkan.PrimitiveTopology, Vulkan.VertexInputRate, Vulkan.PolygonMode, Type{Lava.ProgramInvocationState}})
precompile(Tuple{Type{Lava.ProgramInvocationState}})
precompile(Tuple{typeof(Base.vect), Lava.Resource})
precompile(Tuple{Type{Lava.RenderTargets}, Array{Lava.Resource, 1}})
precompile(Tuple{typeof(Lava.pipeline_info_graphics), Lava.RenderArea, Lava.Program, Lava.RenderState, Lava.ProgramInvocationState, Lava.RenderTargets, Lava.PipelineLayout, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Lava.samples), Lava.Resource})
precompile(Tuple{typeof(Lava.request_pipeline), Lava.Device, Vulkan.GraphicsPipelineCreateInfo})
precompile(Tuple{Type{Lava.PipelineType}, Vulkan.PipelineBindPoint})
precompile(Tuple{typeof(Lava.create_pipelines!), Lava.Device})
precompile(Tuple{typeof(LRUCache._constone), Lava.Pipeline})
precompile(Tuple{typeof(Base.getindex), Lava.HashTable{Lava.Pipeline}, UInt64})
precompile(Tuple{typeof(Base.length), Lava.HashTable{Lava.Pipeline}})
precompile(Tuple{Type{Lava.Program}, Lava.Shader})
precompile(Tuple{typeof(Lava.pipeline_info_compute), Lava.Program, Lava.PipelineLayout})
precompile(Tuple{typeof(Lava.request_pipeline), Lava.Device, Vulkan.ComputePipelineCreateInfo})
precompile(Tuple{typeof(Base.:(|)), Lava.ResourceUsageType, Lava.ResourceUsageType})
precompile(Tuple{typeof(Lava.add_resource_dependencies!), Symbol, Expr})
precompile(Tuple{typeof(Lava.normalize), Expr})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Lava.var"#5#6"{typeof(Lava.rmlines)}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{typeof(Lava.rmlines)}}})
precompile(Tuple{Lava.var"#5#6"{typeof(Lava.rmlines)}, Expr})
precompile(Tuple{Lava.var"#5#6"{typeof(Lava.rmlines)}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{typeof(Lava.rmlines)}}, Int64})
precompile(Tuple{Lava.var"#5#6"{typeof(Lava.rmlines)}, Float64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{typeof(Lava.rmlines)}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{typeof(Lava.rmlines)}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{typeof(Lava.rmlines)}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Lava.var"#5#6"{Lava.var"#7#8"}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{Lava.var"#7#8"}}})
precompile(Tuple{Lava.var"#5#6"{Lava.var"#7#8"}, Expr})
precompile(Tuple{Lava.var"#5#6"{Lava.var"#7#8"}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{Lava.var"#7#8"}}, Int64})
precompile(Tuple{Lava.var"#5#6"{Lava.var"#7#8"}, Float64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{Lava.var"#7#8"}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{Lava.var"#7#8"}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{Lava.var"#7#8"}}, Int64})
precompile(Tuple{typeof(Lava.resource_dependencies), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Any, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Lava.ResourceUsageType})
precompile(Tuple{typeof(Lava.extract_special_usage), Symbol})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, Any}, Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Nothing, Nothing}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Expr, Lava.ResourceUsageType})
precompile(Tuple{typeof(Lava.extract_special_usage), Expr})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{Any, Any}, Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Nothing}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{Any, Any}, Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Nothing, Nothing}})
precompile(Tuple{typeof(Lava.resource_dependencies), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Expr, 1}})
precompile(Tuple{Lava.var"#5#6"{typeof(Lava.rmlines)}, Int64})
precompile(Tuple{Lava.var"#5#6"{Lava.var"#7#8"}, Int64})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, Any}, Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Nothing, Int64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Nothing, Nothing}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Nothing, Nothing}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Nothing, Nothing}}, Int64, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Nothing}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Nothing}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Nothing}}, Int64, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Nothing, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Nothing, Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Nothing, Int64}}, Int64, Int64})
precompile(Tuple{Lava.var"#3#4"{Lava.var"#130#131"{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Float32})
precompile(Tuple{typeof(Lava.resource_dependencies), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Nothing, Nothing}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.esc), Tuple{Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Nothing, Nothing}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.esc), Tuple{Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Nothing}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.esc), Tuple{Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Nothing}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.esc), Tuple{Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Nothing}}}})
precompile(Tuple{Type{Lava.RenderGraph}, Lava.Device})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:usage_flags,), Tuple{Vulkan.BufferUsageFlag}}, typeof(Lava.buffer_resource), Lava.Device, Array{Float64, 1}})
precompile(Tuple{typeof(Base.copyto!), Lava.Memory, Array{Float64, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Lava.attachment_resource), Vulkan.Format})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stages,), Tuple{Vulkan.PipelineStageFlag2}}, Type{Lava.RenderNode}})
precompile(Tuple{Type{NamedTuple{(:render_area, :stages), T} where T<:Tuple}, Tuple{Lava.RenderArea, Vulkan.PipelineStageFlag2}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:render_area, :stages), Tuple{Lava.RenderArea, Vulkan.PipelineStageFlag2}}, Type{Lava.RenderNode}})
precompile(Tuple{typeof(Base.getproperty), Lava.RenderNode, Symbol})
precompile(Tuple{Type{NamedTuple{(:depth,), T} where T<:Tuple}, Tuple{Lava.Resource}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:depth,), Tuple{Lava.Resource}}, Type{Lava.RenderTargets}, Lava.Resource, Vararg{Lava.Resource}})
precompile(Tuple{Lava.var"##RenderTargets#134", Lava.Resource, Nothing, Type{Lava.RenderTargets}, Lava.Resource, Vararg{Lava.Resource}})
precompile(Tuple{Type{Lava.DrawIndexedIndirect}, Lava.Resource, Int64})
precompile(Tuple{Type{NamedTuple{(:targets, :draw), T} where T<:Tuple}, Tuple{Lava.RenderTargets, Lava.DrawIndexedIndirect}})
precompile(Tuple{Type{Lava.DrawState}, Lava.RenderState, Lava.ProgramInvocationState})
precompile(Tuple{Type{Lava.DeviceAddressBlock}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Lava.Command, 1}, Lava.Command})
precompile(Tuple{Type{Lava.Dispatch}, Int64, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:targets,), T} where T<:Tuple}, Tuple{Lava.RenderTargets}})
precompile(Tuple{Type{Lava.RenderTargets}, Lava.Resource, Vararg{Lava.Resource}})
precompile(Tuple{Lava.var"##RenderTargets#134", Nothing, Nothing, Type{Lava.RenderTargets}, Lava.Resource, Vararg{Lava.Resource}})
precompile(Tuple{Type{Lava.ResourceDependency}, Lava.ResourceUsageType, Lava.MemoryAccess, Nothing, Nothing})
precompile(Tuple{typeof(Lava.add_resource_dependency!), Lava.RenderGraph, Lava.RenderNode, Lava.Resource, Lava.ResourceDependency})
precompile(Tuple{Type{Lava.ResourceDependency}, Lava.ResourceUsageType, Lava.MemoryAccess, NTuple{4, Float64}, Nothing})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:type, :access, :clear_value, :samples, :stages, :usage_flags, :aspect), Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, NTuple{4, Float32}, Int64, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag}}, Type{Lava.AttachmentUsage}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:type, :access, :clear_value, :samples, :stages, :usage_flags, :aspect), Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Nothing, Int64, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag}}, Type{Lava.AttachmentUsage}})
precompile(Tuple{Type{Lava.ResourceDependency}, Lava.ResourceUsageType, Lava.MemoryAccess, Nothing, Int64})
precompile(Tuple{typeof(Base.getproperty), Lava.RenderGraph, Symbol})
precompile(Tuple{typeof(Base.getindex), Dictionaries.Dictionary{Lava.NodeID, Dictionaries.Dictionary{Lava.ResourceID, Array{Lava.ResourceUsage, 1}}}, Lava.NodeID})
precompile(Tuple{typeof(Base.getindex), Dictionaries.Dictionary{Lava.ResourceID, Array{Lava.ResourceUsage, 1}}, Lava.ResourceID})
precompile(Tuple{typeof(Base.Iterators.only), Array{Lava.ResourceUsage, 1}})
precompile(Tuple{typeof(Base.getproperty), Lava.ResourceUsage, Symbol})
precompile(Tuple{typeof(Base.getproperty), Lava.ImageUsage, Symbol})
precompile(Tuple{typeof(Base.:(==)), Lava.ResourceUsageType, Lava.ResourceUsageType})
precompile(Tuple{typeof(Base.getproperty), Lava.AttachmentUsage, Symbol})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.identity), typeof(Base.merge)}, Type{Lava.ResourceUsage}})
precompile(Tuple{typeof(Lava.combine_resource_uses_per_node), Dictionaries.Dictionary{Lava.NodeID, Dictionaries.Dictionary{Lava.ResourceID, Array{Lava.ResourceUsage, 1}}}})
precompile(Tuple{typeof(Lava.combine_resource_uses), Dictionaries.Dictionary{Lava.NodeID, Dictionaries.Dictionary{Lava.ResourceID, Lava.ResourceUsage}}})
precompile(Tuple{typeof(Base.getindex), Dictionaries.Dictionary{Lava.ResourceID, Lava.ResourceUsage}, Lava.ResourceID})
precompile(Tuple{typeof(Base.:(==)), Lava.MemoryAccess, Lava.MemoryAccess})
precompile(Tuple{typeof(Lava.check_physical_resources), Lava.RenderGraph, Dictionaries.Dictionary{Lava.ResourceID, Lava.ResourceUsage}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{Lava.ResourceID, Lava.ResourceUsage}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Lava.ResourceUsage, 1}})
precompile(Tuple{Type{Lava.ResourceUsageType}, UInt32})
precompile(Tuple{Lava.var"##AttachmentUsage#120", Lava.ResourceUsageType, Lava.MemoryAccess, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag, Int64, Nothing, Vulkan.ResolveModeFlag, Type{Lava.AttachmentUsage}})
precompile(Tuple{typeof(Accessors.set), Lava.ResourceUsage, Base.ComposedFunction{Accessors.PropertyLens{:usage_flags}, Accessors.PropertyLens{:usage}}, Vulkan.BufferUsageFlag})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:id, :type, :usage), Tuple{Lava.ResourceID, Lava.ResourceUsageType, Lava.BufferUsage}}, NamedTuple{(:id, :type, :usage), Tuple{Lava.ResourceID, Lava.ResourceUsageType, Lava.BufferUsage}}, Lava.ResourceUsage, NamedTuple{(:usage,), Tuple{Lava.BufferUsage}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:id, :type, :usage), Tuple{Lava.ResourceID, Lava.ResourceUsageType, Lava.BufferUsage}}})
precompile(Tuple{Type{Lava.ResourceUsage}, Lava.ResourceID, Lava.ResourceUsageType, Lava.BufferUsage})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{Lava.ResourceID, Lava.ResourceUsage}, Lava.ResourceID, Lava.ResourceUsage})
precompile(Tuple{typeof(Base.:(~)), Lava.ResourceFlags})
precompile(Tuple{typeof(Lava.materialize_logical_resources), Lava.RenderGraph, Dictionaries.Dictionary{Lava.ResourceID, Lava.ResourceUsage}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:format, :dims, :samples, :aspect, :access, :usage_flags, :mip_range, :layer_range), Tuple{Vulkan.Format, Array{UInt32, 1}, Int64, Vulkan.ImageAspectFlag, Lava.MemoryAccess, Vulkan.ImageUsageFlag, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{Lava.Attachment}, Lava.Device})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:id, :data, :flags), Tuple{Lava.ResourceID, Lava.Attachment, Lava.ResourceFlags}}, NamedTuple{(:id, :data, :flags), Tuple{Lava.ResourceID, Lava.LogicalAttachment, Lava.ResourceFlags}}, Lava.Resource, NamedTuple{(:data, :flags), Tuple{Lava.Attachment, Lava.ResourceFlags}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:id, :data, :flags), Tuple{Lava.ResourceID, Lava.Attachment, Lava.ResourceFlags}}})
precompile(Tuple{Type{Lava.Resource}, Lava.ResourceID, Lava.Attachment, Lava.ResourceFlags})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:id, :data, :flags), Tuple{Lava.ResourceID, Lava.Buffer, Lava.ResourceFlags}}, NamedTuple{(:id, :data, :flags), Tuple{Lava.ResourceID, Lava.LogicalBuffer, Lava.ResourceFlags}}, Lava.Resource, NamedTuple{(:data, :flags), Tuple{Lava.Buffer, Lava.ResourceFlags}}})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:id, :data, :flags), Tuple{Lava.ResourceID, Lava.Image, Lava.ResourceFlags}}, NamedTuple{(:id, :data, :flags), Tuple{Lava.ResourceID, Lava.LogicalImage, Lava.ResourceFlags}}, Lava.Resource, NamedTuple{(:data, :flags), Tuple{Lava.Image, Lava.ResourceFlags}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:id, :data, :flags), Tuple{Lava.ResourceID, Lava.Image, Lava.ResourceFlags}}})
precompile(Tuple{Type{Lava.Resource}, Lava.ResourceID, Lava.Image, Lava.ResourceFlags})
precompile(Tuple{typeof(Base.length), Dictionaries.Dictionary{Lava.ResourceID, Lava.Resource}})
precompile(Tuple{typeof(Base.getindex), Dictionaries.Dictionary{Lava.ResourceID, Lava.Resource}, Lava.ResourceID})
precompile(Tuple{typeof(Base.getproperty), Lava.Image, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Lava.ResourceDependency}, Lava.ResourceDependency})
precompile(Tuple{typeof(Base.convert), Type{Pair{Symbol, Lava.ResourceUsageType}}, Pair{Symbol, Lava.ResourceUsageType}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Lava.MemoryAccess})
precompile(Tuple{typeof(Base.convert), Type{Pair{Symbol, Lava.MemoryAccess}}, Pair{Symbol, Lava.MemoryAccess}})
precompile(Tuple{Lava.var"##s13#22", Any, Any, Any})
precompile(Tuple{typeof(Lava.has_parent), Type{Vulkan.Sampler}})
precompile(Tuple{typeof(Lava.parent_handle_type), Type{Vulkan.Sampler}})
precompile(Tuple{typeof(Lava.has_parent), Type{Vulkan.Device}})
precompile(Tuple{typeof(Lava.parent_handle_type), Type{Vulkan.Device}})
precompile(Tuple{typeof(Lava.empty_handle), Type{Vulkan.PhysicalDevice}})
precompile(Tuple{typeof(Lava.empty_handle), Type{Vulkan.Device}})
precompile(Tuple{typeof(Lava.has_parent), Type{Vulkan.ImageView}})
precompile(Tuple{typeof(Lava.parent_handle_type), Type{Vulkan.ImageView}})
precompile(Tuple{typeof(Lava.bake!), Lava.RenderGraph})
precompile(Tuple{Type{Lava.SynchronizationState}})
precompile(Tuple{Type{Lava.SyncRequirements}, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Lava.SyncRequirements}, Lava.SyncRequirements})
precompile(Tuple{typeof(Lava.dependency_info!), Lava.SynchronizationState, Dictionaries.Dictionary{Lava.NodeID, Dictionaries.Dictionary{Lava.ResourceID, Lava.ResourceUsage}}, Dictionaries.Dictionary{Lava.ResourceID, Lava.Resource}, Lava.RenderNode})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:usage_flags,), Tuple{Vulkan.ImageUsageFlag}}, typeof(Lava.attachment_resource), Lava.Device, Array{ColorTypes.RGBA{Float32}, 2}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:format, :usage_flags, :aspect), Tuple{Vulkan.Format, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag}}, typeof(Lava.attachment_resource), Lava.Device, Array{Float32, 2}})
precompile(Tuple{typeof(Base.copyto!), Lava.Memory, Array{Float32, 2}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Base.vect), Lava.RenderNode, Vararg{Lava.RenderNode}})
precompile(Tuple{typeof(Base.getindex), Array{Lava.RenderNode, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Vulkan.DependencyInfo, 1}, Lava.SynchronizationState}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Vulkan.DependencyInfo, 1}, Lava.SynchronizationState}, Int64, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Lava.DeviceAddressBlock}, SPIRV.StructType})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Lava.DeviceAddressBlock}})
precompile(Tuple{Type{Lava.DataBlock}, Array{SPIRV.Vec{2, Float32}, 1}, SPIRV.VulkanLayout})
precompile(Tuple{Type{Lava.DrawIndexed}, Array{Int64, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:depth,), Tuple{Lava.Resource}}, typeof(Lava.graphics_command), Lava.DrawIndexed, Vararg{Any}})
precompile(Tuple{Lava.var"##graphics_command#140", Base.Pairs{Symbol, Lava.Resource, Tuple{Symbol}, NamedTuple{(:depth,), Tuple{Lava.Resource}}}, typeof(Lava.graphics_command), Lava.DrawIndexed, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:depth,), Tuple{Lava.Resource}}, Type{Lava.GraphicsCommand}, Lava.DrawIndexed, Lava.Program, Lava.ProgramInvocationData, Lava.Resource})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{Lava.NodeID, Dictionaries.Dictionary{Lava.ResourceID, Lava.ResourceUsage}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Dictionaries.Dictionary{Lava.ResourceID, Lava.ResourceUsage}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{Lava.ResourceID, Lava.Resource}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Lava.Resource, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{Int64, Array{Lava.Queue, 1}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Array{Lava.Queue, 1}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Lava.Queue, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Lava.Queue, 1}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, LRUCache.LRU{UInt64, Lava.Pipeline}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{UInt64, Tuple{Lava.Pipeline, LRUCache.LinkedNode{UInt64}, Int64}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, LRUCache.LRU{UInt64, Lava.PipelineLayout}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{UInt64, Tuple{Lava.PipelineLayout, LRUCache.LinkedNode{UInt64}, Int64}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{Vulkan.PipelineLayout, Lava.PipelineLayout}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Lava.PipelineLayout, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Lava.Cache{Base.Dict{Lava.ShaderSpec, Lava.ShaderSource}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Lava.CacheDiagnostics})
precompile(Tuple{typeof(Base.deepcopy_internal), Lava.Cache{Base.IdDict{Lava.ShaderSource, Lava.Shader}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Lava.Shader})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Lava.GlobalDescriptors})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{Vulkan.DescriptorType, Lava.DescriptorArray}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Lava.DescriptorArray, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{Lava.DescriptorID, Lava.Descriptor}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Lava.Descriptor, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{Int64, Array{Lava.DescriptorID, 1}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Array{Lava.DescriptorID, 1}, 1}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Base.RefValue{Lava.Memory}})
precompile(Tuple{Type{Vulkan.RenderingAttachmentInfo}, Ptr{Nothing}, Lava.ImageView, Vulkan.ImageLayout, Vulkan.ResolveModeFlag, Ptr{Nothing}, Vulkan.ImageLayout, Vulkan.AttachmentLoadOp, Vulkan.AttachmentStoreOp, Vulkan.ClearValue})
precompile(Tuple{typeof(Base.getproperty), Lava.RenderArea, Symbol})
precompile(Tuple{Type{Vulkan.ImageMemoryBarrier2}, Ptr{Nothing}, Int64, Int64, Vulkan.PipelineStageFlag2, Vulkan.AccessFlag2, Vulkan.ImageLayout, Vulkan.ImageLayout, Int64, Int64, Lava.Image, Vulkan.ImageSubresourceRange})
precompile(Tuple{typeof(Base.isempty), Lava.HashTable{Lava.Pipeline}})
precompile(Tuple{typeof(Lava.record_commands!), Lava.RenderGraph})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Lava.CompactRecord, 1}, Dictionaries.Dictionary{Lava.ProgramInstance, UInt64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Lava.CompactRecord, 1}, Dictionaries.Dictionary{Lava.ProgramInstance, UInt64}}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.only), Dictionaries.Dictionary{Lava.ProgramInstance, UInt64}})
precompile(Tuple{Type{Lava.SnoopCommandBuffer}})
precompile(Tuple{typeof(Lava.fill_indices!), Lava.IndexData, Array{Lava.CompactRecord, 1}})
precompile(Tuple{typeof(Lava.initialize_index_buffer), Lava.SnoopCommandBuffer, Lava.Device, Lava.IndexData})
precompile(Tuple{typeof(Base.copyto!), Lava.Memory, Array{UInt32, 1}, SPIRV.NativeLayout})
precompile(Tuple{Vulkan.var"#2#4"{Vulkan.Pipeline, Vulkan.var"#1159#1160"{Ptr{Nothing}, Lava.Device}, Vulkan.Device}})
precompile(Tuple{typeof(Base.flush), Lava.SnoopCommandBuffer, Lava.RenderGraph, Array{Lava.CompactRecord, 1}, Dictionaries.Dictionary{Lava.ProgramInstance, UInt64}})
precompile(Tuple{typeof(Base.:(!=)), Lava.DeviceAddressBlock, Nothing})
precompile(Tuple{Type{Ref{T} where T}, Lava.DeviceAddressBlock})
precompile(Tuple{typeof(Base.sizeof), Lava.DeviceAddressBlock})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Base.RefValue{Lava.DeviceAddressBlock}})
precompile(Tuple{typeof(Vulkan.cmd_push_constants), Lava.SnoopCommandBuffer, Lava.PipelineLayout, Vulkan.ShaderStageFlag, Int64, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.isempty), Lava.SnoopCommandBuffer})
precompile(Tuple{typeof(Base.getproperty), Lava.SnoopCommandBuffer, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Lava.Instruction, 1}, Symbol})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getproperty), Tuple{Array{Lava.Instruction, 1}, Base.RefValue{Symbol}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.getproperty), Tuple{Array{Lava.Instruction, 1}, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{Lava.Instruction, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Lava.SnoopCommandBuffer, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Lava.SnoopCommandBuffer, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Lava.Instruction, Symbol})
precompile(Tuple{typeof(Base.getproperty), Lava.IndexData, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Lava.Buffer}})
precompile(Tuple{typeof(Base.vect), Lava.Buffer, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), Lava.Buffer, Int64, Vararg{Any}})
precompile(Tuple{typeof(Base.:(==)), Lava.Buffer, Lava.Buffer})
precompile(Tuple{typeof(Base.:(==)), Lava.Pipeline, Lava.Pipeline})
precompile(Tuple{typeof(Base.getproperty), Lava.Pipeline, Symbol})
precompile(Tuple{typeof(Base.vect), Lava.DescriptorSet})
precompile(Tuple{typeof(Base.promote_typeof), Vulkan.PipelineBindPoint, Lava.PipelineLayout, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), Lava.PipelineLayout, Int64, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Array{Lava.DescriptorSet, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.:(==)), Lava.PipelineLayout, Lava.PipelineLayout})
precompile(Tuple{typeof(Base.:(==)), Array{Lava.DescriptorSet, 1}, Array{Lava.DescriptorSet, 1}})
precompile(Tuple{typeof(Base.vect), Lava.PipelineLayout, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), Lava.PipelineLayout, Vulkan.ShaderStageFlag, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_type), Type{Lava.PipelineLayout}, Type{Vulkan.ShaderStageFlag}})
precompile(Tuple{typeof(Lava.initialize_index_buffer), Lava.SimpleCommandBuffer, Lava.Device, Lava.IndexData})
precompile(Tuple{typeof(Base.flush), Lava.SimpleCommandBuffer, Lava.RenderGraph, Array{Lava.CompactRecord, 1}, Dictionaries.Dictionary{Lava.ProgramInstance, UInt64}})
precompile(Tuple{typeof(Vulkan.cmd_push_constants), Lava.SimpleCommandBuffer, Lava.PipelineLayout, Vulkan.ShaderStageFlag, Int64, Int64, Ptr{Nothing}})
precompile(Tuple{Type{Lava.DrawIndexed}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Lava.Resource, Lava.ResourceDependency})
precompile(Tuple{typeof(Base.vect), Pair{Lava.Resource, Lava.ResourceDependency}, Vararg{Pair{Lava.Resource, Lava.ResourceDependency}}})
precompile(Tuple{typeof(Dictionaries.dictionary), Array{Pair{Lava.Resource, Lava.ResourceDependency}, 1}})
precompile(Tuple{typeof(Lava.graphics_command), Lava.DrawIndexed, Vararg{Any}})
precompile(Tuple{Lava.var"##graphics_command#140", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Lava.graphics_command), Lava.DrawIndexed, Vararg{Any}})
precompile(Tuple{Type{Lava.GraphicsCommand}, Lava.DrawIndexed, Lava.Program, Lava.ProgramInvocationData, Lava.RenderTargets, Lava.RenderState, Lava.ProgramInvocationState, Dictionaries.Dictionary{Lava.Resource, Lava.ResourceDependency}})
precompile(Tuple{Type{Lava.Command}, Lava.CommandType, Lava.GraphicsCommand})
precompile(Tuple{typeof(Base.collect), Dictionaries.Dictionary{Lava.NodeID, Lava.RenderNode}})
precompile(Tuple{typeof(Base.:(==)), Array{Lava.RenderNode, 1}, Array{Lava.RenderNode, 1}})
precompile(Tuple{typeof(Base.length), Array{Lava.RenderNode, 1}})
precompile(Tuple{typeof(Base.getproperty), Lava.Command, Symbol})
precompile(Tuple{typeof(Base.getproperty), Lava.GraphicsCommand, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Lava.DeviceAddressBlock, Lava.DeviceAddressBlock})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:format, :usage_flags, :dims), Tuple{Vulkan.Format, Vulkan.ImageUsageFlag, Array{Int64, 1}}}, typeof(Lava.attachment_resource), Lava.Device, Nothing})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:format, :samples, :usage_flags, :dims), Tuple{Vulkan.Format, Int64, Vulkan.ImageUsageFlag, Array{Int64, 1}}}, typeof(Lava.attachment_resource), Lava.Device, Nothing})
precompile(Tuple{typeof(Base.convert), Type{Lava.ProgramInvocationState}, Lava.ProgramInvocationState})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stages, :render_area, :commands), Tuple{Vulkan.PipelineStageFlag2, Lava.RenderArea, Array{Lava.Command, 1}}}, Type{Lava.RenderNode}})
precompile(Tuple{typeof(Base.convert), Type{Lava.Sampling}, Lava.Sampling})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Lava.DeviceAddress}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Lava.DescriptorIndex}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:usage_flags,), Tuple{Vulkan.ImageUsageFlag}}, typeof(Lava.image_resource), Lava.Device, Array{ColorTypes.RGBA{Float16}, 2}})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:id, :data, :flags, :node_id, :written_state), Tuple{Lava.DescriptorID, Lava.Texture, Lava.DescriptorFlags, Lava.NodeID, Vulkan.DescriptorImageInfo}}, NamedTuple{(:id, :data, :flags, :node_id, :written_state), Tuple{Lava.DescriptorID, Lava.Texture, Lava.DescriptorFlags, Lava.NodeID, Nothing}}, Lava.Descriptor, NamedTuple{(:written_state,), Tuple{Vulkan.DescriptorImageInfo}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:id, :data, :flags, :node_id, :written_state), Tuple{Lava.DescriptorID, Lava.Texture, Lava.DescriptorFlags, Lava.NodeID, Vulkan.DescriptorImageInfo}}})
precompile(Tuple{Type{Lava.Descriptor}, Lava.DescriptorID, Lava.Texture, Lava.DescriptorFlags, Lava.NodeID, Vulkan.DescriptorImageInfo})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{Any, Any}, Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Int64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.esc), Tuple{Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.esc), Tuple{Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Int64}}}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{Any, Any}, Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Symbol}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Symbol}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Symbol}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Symbol}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.esc), Tuple{Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Symbol}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.esc), Tuple{Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Expr, Symbol}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:mip_range, :layer_range), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{Lava.LogicalAttachment}, Vulkan.Format, Array{Int64, 1}})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:id, :type, :usage), Tuple{Lava.ResourceID, Lava.ResourceUsageType, Lava.AttachmentUsage}}, NamedTuple{(:id, :type, :usage), Tuple{Lava.ResourceID, Lava.ResourceUsageType, Lava.AttachmentUsage}}, Lava.ResourceUsage, NamedTuple{(:id,), Tuple{Lava.ResourceID}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:id, :type, :usage), Tuple{Lava.ResourceID, Lava.ResourceUsageType, Lava.AttachmentUsage}}})
precompile(Tuple{Type{Lava.ResourceUsage}, Lava.ResourceID, Lava.ResourceUsageType, Lava.AttachmentUsage})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:type, :access, :stages, :usage_flags, :aspect, :samples, :clear_value, :resolve_mode), Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag, Int64, NTuple{4, Float32}, Vulkan.ResolveModeFlag}}, NamedTuple{(:type, :access, :stages, :usage_flags, :aspect, :samples, :clear_value, :resolve_mode), Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag, Int64, NTuple{4, Float32}, Vulkan.ResolveModeFlag}}, Lava.AttachmentUsage, NamedTuple{(:samples,), Tuple{Int64}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:type, :access, :stages, :usage_flags, :aspect, :samples, :clear_value, :resolve_mode), Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag, Int64, NTuple{4, Float32}, Vulkan.ResolveModeFlag}}})
precompile(Tuple{Type{Lava.AttachmentUsage}, Lava.ResourceUsageType, Lava.MemoryAccess, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag, Int64, NTuple{4, Float32}, Vulkan.ResolveModeFlag})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:id, :type, :usage), Tuple{Lava.ResourceID, Lava.ResourceUsageType, Lava.AttachmentUsage}}, NamedTuple{(:id, :type, :usage), Tuple{Lava.ResourceID, Lava.ResourceUsageType, Lava.AttachmentUsage}}, Lava.ResourceUsage, NamedTuple{(:usage,), Tuple{Lava.AttachmentUsage}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:format, :dims, :samples, :aspect, :access, :usage_flags, :mip_range, :layer_range), Tuple{Vulkan.Format, Array{Int64, 1}, Int64, Vulkan.ImageAspectFlag, Lava.MemoryAccess, Vulkan.ImageUsageFlag, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{Lava.Attachment}, Lava.Device})
precompile(Tuple{typeof(Base.finalize), Lava.Image})
precompile(Tuple{Type{Lava.ResourceDependency}, Lava.ResourceUsageType, Lava.MemoryAccess, NTuple{4, Float64}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:usage_flags, :format), Tuple{Vulkan.ImageUsageFlag, Vulkan.Format}}, typeof(Lava.image_resource), Lava.Device, Array{Float32, 2}})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, SPIRV.Mat{4, 4, Float32}, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, NTuple{4, NTuple{4, Float32}}, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, NTuple{4, Float32}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:vertex_offset,), Tuple{Int64}}, Type{Lava.DrawIndexed}, StaticArraysCore.SArray{Tuple{96}, Int64, 1, 96}})
precompile(Tuple{typeof(Lava.shader), Symbol, Expr, SPIRV.ExecutionModel, Symbol})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:memory_domain,), Tuple{Lava.MemoryDomain}}, typeof(Lava.buffer_resource), Lava.Device, Array{SPIRV.Vec{2, Float32}, 1}})
precompile(Tuple{typeof(Base.copyto!), Lava.Memory, Array{SPIRV.Vec{2, Float32}, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Lava.Program, 1}}})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{Lava.var"#114#115"}, Symbol})
precompile(Tuple{Type{Lava.Dispatch}, Tuple{UInt32, UInt32, UInt32}})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, Float32, Int64})
precompile(Tuple{typeof(Lava.render), Lava.Device, Array{Lava.Command, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stages, :render_area, :commands), Tuple{Vulkan.PipelineStageFlag2, Nothing, Array{Lava.Command, 1}}}, Type{Lava.RenderNode}})
precompile(Tuple{typeof(Base.collect), Type{SPIRV.Vec{2, Float32}}, Lava.Buffer})
precompile(Tuple{Type{NamedTuple{(:memory_domain, :usage_flags), T} where T<:Tuple}, Tuple{Lava.MemoryDomain, Vulkan.BufferUsageFlag}})
precompile(Tuple{typeof(Base.vcat), Array{Lava.Command, 1}, Lava.Command})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{typeof(Base.values), Lava.var"#190#192"}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Generator{typeof(Base.values), Lava.var"#190#192"}})
precompile(Tuple{typeof(Base._iterator_upper_bound), Base.Generator{typeof(Base.values), Lava.var"#190#192"}})
precompile(Tuple{typeof(Base.length), Base.Generator{typeof(Base.values), Lava.var"#190#192"}})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{typeof(Base.values), Lava.var"#190#192"}, Base.HasLength})
precompile(Tuple{typeof(Base.collect), Base.Generator{typeof(Base.values), Lava.var"#190#192"}})
precompile(Tuple{typeof(Lava.list_print), Function, Function})
precompile(Tuple{typeof(Base.collect), Type{ColorTypes.BGRA{FixedPointNumbers.Normed{UInt8, 8}}}, Lava.FrameCycle{XCB.XCBWindow}})
precompile(Tuple{typeof(ConstructionBase.setproperties), Lava.Swapchain{XCB.XCBWindow}, NamedTuple{(:info, :handle), Tuple{Vulkan.SwapchainCreateInfoKHR, Vulkan.SwapchainKHR}}})
precompile(Tuple{typeof(Base.setproperty!), Lava.FrameCycle{XCB.XCBWindow}, Symbol, Lava.Swapchain{XCB.XCBWindow}})
precompile(Tuple{typeof(Base.convert), Type{Lava.Swapchain{XCB.XCBWindow}}, Lava.Swapchain{XCB.XCBWindow}})
precompile(Tuple{Vulkan.var"#2#4"{Vulkan.SwapchainKHR, Vulkan.var"#1214#1215"{Ptr{Nothing}, Lava.Device}, Vulkan.SurfaceKHR}})
precompile(Tuple{Vulkan.var"#2#4"{Vulkan.SurfaceKHR, Vulkan.var"#1225#1226"{Ptr{Nothing}, Lava.Instance}, Vulkan.Instance}})
precompile(Tuple{Vulkan.var"#2#4"{Vulkan.Pipeline, Vulkan.var"#1162#1163"{Ptr{Nothing}, Lava.Device}, Vulkan.Device}})
precompile(Tuple{Vulkan.var"#2#4"{Vulkan.PipelineLayout, Vulkan.var"#1166#1167"{Ptr{Nothing}, Lava.Device}, Vulkan.Device}})
precompile(Tuple{Vulkan.var"#2#4"{Vulkan.DeviceMemory, Vulkan.var"#1112#1113"{Ptr{Nothing}, Lava.Device}, Vulkan.Device}})
