precompile(Tuple{typeof(Base.MainInclude.include), String})
precompile(Tuple{typeof(Base.atreplinit), Function})
precompile(Tuple{typeof(JuliaInterpreter.__init__)})
precompile(Tuple{typeof(Revise.__init__)})
precompile(Tuple{Revise.TaskThunk})
precompile(Tuple{typeof(Revise.watch_manifest), String})
precompile(Tuple{typeof(Revise.watch_package_callback), Base.PkgId})
precompile(Tuple{typeof(Base.setindex!), Base.EnvDict, Bool, String})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{typeof(Infiltrator.__init__)})
precompile(Tuple{typeof(Base.ident_cmp), Tuple{String, UInt64}, Tuple{String}})
precompile(Tuple{typeof(fzf_jll.__init__)})
precompile(Tuple{typeof(fzf_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(OhMyREPL.__init__)})
precompile(Tuple{typeof(Revise.watch_includes), Module, String})
precompile(Tuple{typeof(OhMyREPL.BracketInserter.enable_autocomplete_brackets), Bool})
precompile(Tuple{typeof(VSCodeServer.JuliaInterpreter.__init__)})
precompile(Tuple{typeof(VSCodeServer.__init__)})
precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#7#9", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, Main.var"#7#9"}})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{String, 1}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:is_dev, :crashreporting_pipename), T} where T<:Tuple}, Tuple{Bool, String}})
precompile(Tuple{typeof(Base.:(<)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(>)), UInt32, UInt32})
precompile(Tuple{Type{NamedTuple{(:pass_empty,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Sockets.uv_connectcb), Ptr{Nothing}, Int32})
precompile(Tuple{VSCodeServer.var"#serve##kw", NamedTuple{(:is_dev, :crashreporting_pipename), Tuple{Bool, String}}, typeof(VSCodeServer.serve), String})
precompile(Tuple{typeof(Revise.revise_dir_queued), String})
precompile(Tuple{typeof(Base.notify), Base.GenericCondition{Base.Threads.SpinLock}})
precompile(Tuple{typeof(Base.run), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{Main.var"#8#10"{Array{String, 1}}, REPL.LineEditREPL})
precompile(Tuple{VSCodeServer.var"#1#4", REPL.LineEditREPL})
precompile(Tuple{OhMyREPL.var"#1#4", REPL.LineEditREPL})
precompile(Tuple{typeof(OhMyREPL.Prompt.insert_keybindings), Any})
precompile(Tuple{typeof(Base.getindex), Array{REPL.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Base.Dict{Any, Any}}, Base.Dict{Any, Any}, Base.Dict{Char, Any}})
precompile(Tuple{typeof(Base.convert), Type{Union{Function, String}}, String})
precompile(Tuple{typeof(Core.convert), Type{OhMyREPL.var"#2#5"{REPL.LineEdit.PrefixHistoryPrompt}}, OhMyREPL.var"#2#5"{REPL.LineEdit.PrefixHistoryPrompt}})
precompile(Tuple{typeof(Core.convert), Type{OhMyREPL.var"#3#6"{REPL.LineEdit.PrefixHistoryPrompt}}, OhMyREPL.var"#3#6"{REPL.LineEdit.PrefixHistoryPrompt}})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Pair{String, OhMyREPL.var"#2#5"{REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Pair{A, B} where B where A}})
precompile(Tuple{Infiltrator.var"#1#3", REPL.LineEditREPL})
precompile(Tuple{Main.var"#3#4", REPL.LineEditREPL})
precompile(Tuple{Pkg.var"#4#5", REPL.LineEditREPL})
precompile(Tuple{typeof(REPL.run_repl), REPL.AbstractREPL, Any})
precompile(Tuple{VSCodeServer.var"#60#61"})
precompile(Tuple{VSCodeServer.JSONRPC.var"#1#3"{VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}}})
precompile(Tuple{typeof(Base.rem), UInt16, Type{UInt16}})
precompile(Tuple{typeof(VSCodeServer.JSON.Parser._get_parsercontext), Type, Type})
precompile(Tuple{VSCodeServer.JSONRPC.var"#2#4"{VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}}})
precompile(Tuple{Type{VSCodeServer.JSONRPC.Handler}, VSCodeServer.JSONRPC.RequestType{VSCodeServer.ReplRunCodeRequestParams, VSCodeServer.ReplRunCodeRequestReturn}, Function})
precompile(Tuple{Type{VSCodeServer.JSONRPC.Handler}, VSCodeServer.JSONRPC.NotificationType{Nothing}, Function})
precompile(Tuple{Type{VSCodeServer.JSONRPC.Handler}, VSCodeServer.JSONRPC.RequestType{Nothing, Array{VSCodeServer.ReplWorkspaceItem, 1}}, Function})
precompile(Tuple{Type{VSCodeServer.JSONRPC.Handler}, VSCodeServer.JSONRPC.RequestType{NamedTuple{(:id,), Tuple{Int64}}, Array{VSCodeServer.ReplWorkspaceItem, 1}}, Function})
precompile(Tuple{Type{VSCodeServer.JSONRPC.Handler}, VSCodeServer.JSONRPC.NotificationType{NamedTuple{(:code,), Tuple{String}}}, Function})
precompile(Tuple{Type{VSCodeServer.JSONRPC.Handler}, VSCodeServer.JSONRPC.RequestType{Nothing, Array{String, 1}}, Function})
precompile(Tuple{Type{VSCodeServer.JSONRPC.Handler}, VSCodeServer.JSONRPC.RequestType{NamedTuple{(:mod,), Tuple{String}}, Bool}, Function})
precompile(Tuple{Type{VSCodeServer.JSONRPC.Handler}, VSCodeServer.JSONRPC.RequestType{VSCodeServer.GetCompletionsRequestParams, Array{T, 1} where T}, Function})
precompile(Tuple{Type{VSCodeServer.JSONRPC.Handler}, VSCodeServer.JSONRPC.RequestType{Base.Dict{K, V} where V where K, Base.Dict{K, V} where V where K}, Function})
precompile(Tuple{Type{VSCodeServer.JSONRPC.Handler}, VSCodeServer.JSONRPC.NotificationType{NamedTuple{(:enable,), Tuple{Bool}}}, Function})
precompile(Tuple{Type{VSCodeServer.JSONRPC.Handler}, VSCodeServer.JSONRPC.NotificationType{Bool}, Function})
precompile(Tuple{Type{VSCodeServer.JSONRPC.Handler}, VSCodeServer.JSONRPC.NotificationType{NamedTuple{(:uri,), Tuple{String}}}, Function})
precompile(Tuple{Type{VSCodeServer.JSONRPC.Handler}, VSCodeServer.JSONRPC.RequestType{NamedTuple{(:juliaAccessor,), Tuple{String}}, Array{VSCodeServer.DebugConfigTreeItem, 1}}, Function})
precompile(Tuple{Type{VSCodeServer.JSONRPC.Handler}, VSCodeServer.JSONRPC.RequestType{VSCodeServer.GetTableDataRequest, Any}, Function})
precompile(Tuple{Type{VSCodeServer.JSONRPC.Handler}, VSCodeServer.JSONRPC.NotificationType{NamedTuple{(:id,), Tuple{String}}}, Function})
precompile(Tuple{typeof(Base.signed), Int64})
precompile(Tuple{typeof(Base.convert), Type{UInt32}, Char})
precompile(Tuple{typeof(Base.iterate), Char})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(+)), Base.UnitRange{Int64}, Int64})
precompile(Tuple{Type{Base.Iterators.Filter{InteractiveUtils.var"#64#70"{InteractiveUtils.var"#is_nonverbose_env#67"}, Base.EnvDict}}, Function, Base.EnvDict})
precompile(Tuple{Type{Base.Generator{Base.Iterators.Filter{InteractiveUtils.var"#64#70"{InteractiveUtils.var"#is_nonverbose_env#67"}, Base.EnvDict}, InteractiveUtils.var"#63#69"}}, Function, Base.Iterators.Filter{InteractiveUtils.var"#64#70"{InteractiveUtils.var"#is_nonverbose_env#67"}, Base.EnvDict}})
precompile(Tuple{Type{Base.Iterators.Filter{InteractiveUtils.var"#66#72"{InteractiveUtils.var"#is_verbose_env#68"{InteractiveUtils.var"#is_nonverbose_env#67"}}, Base.EnvDict}}, Function, Base.EnvDict})
precompile(Tuple{Type{Base.Generator{Base.Iterators.Filter{InteractiveUtils.var"#66#72"{InteractiveUtils.var"#is_verbose_env#68"{InteractiveUtils.var"#is_nonverbose_env#67"}}, Base.EnvDict}, InteractiveUtils.var"#65#71"}}, Function, Base.Iterators.Filter{InteractiveUtils.var"#66#72"{InteractiveUtils.var"#is_verbose_env#68"{InteractiveUtils.var"#is_nonverbose_env#67"}}, Base.EnvDict}})
precompile(Tuple{VSCodeServer.var"#180#184"{Bool, String, Base.PipeEndpoint}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.get_next_message), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{VSCodeServer.var"#2#5"{REPL.LineEditREPL}})
precompile(Tuple{Infiltrator.var"#2#4"})
precompile(Tuple{REPL.var"#49#54"{REPL.LineEditREPL, REPL.REPLBackendRef}})
precompile(Tuple{typeof(VSCodeServer.JSON.Parser.parse_value), VSCodeServer.JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64}, VSCodeServer.JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(VSCodeServer.dispatch_msg), Base.RefValue{Union{Nothing, VSCodeServer.JSONRPC.JSONRPCEndpoint{IOIn, IOOut} where IOOut<:IO where IOIn<:IO}}, VSCodeServer.JSONRPC.MsgDispatcher, Base.Dict{String, Any}, Bool})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.dispatch_msg), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, VSCodeServer.JSONRPC.MsgDispatcher, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.get), Base.Dict{String, VSCodeServer.JSONRPC.Handler}, String, Nothing})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.get_param_type), VSCodeServer.JSONRPC.RequestType{Nothing, Array{VSCodeServer.ReplWorkspaceItem, 1}}})
precompile(Tuple{typeof(VSCodeServer.repl_getvariables_request), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Nothing})
precompile(Tuple{typeof(VSCodeServer.getvariables)})
precompile(Tuple{typeof(Base.isequal), Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Base.IdDict{Any, Any}}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Base.IdDict{Any, Any}}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Base.IdDict{Any, Any}}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Base.IdDict{Any, Any}}, Bool, Function, Function})
precompile(Tuple{typeof(Base.isequal), Type})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.var"#1#2"{pre_output_time} where pre_output_time}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), UnionAll}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), UnionAll}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), UnionAll}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), UnionAll}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.var"#3#4"}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), DataType}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), DataType}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), DataType}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), DataType}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.var"#7#9"}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.var"#8#10"{args} where args}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.template)}})
precompile(Tuple{typeof(Base.isequal), Module})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Module}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Module}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Module}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Module}, Bool, Function, Function})
precompile(Tuple{typeof(VSCodeServer.wsicon), Module})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Module})
precompile(Tuple{typeof(VSCodeServer.treerender), Module})
precompile(Tuple{typeof(Base.getproperty), VSCodeServer.ReplWorkspaceItem, Symbol})
precompile(Tuple{typeof(VSCodeServer.can_display), Module})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("juliavscode/html")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/png")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/gif")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Any})
precompile(Tuple{VSCodeServer.var"#117#118", Module})
precompile(Tuple{typeof(Base.isequal), Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Base.MainInclude.eval)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Base.MainInclude.eval)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Base.MainInclude.eval)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Base.MainInclude.eval)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Base.MainInclude.eval)}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Base.MainInclude.include)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Base.MainInclude.include)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Base.MainInclude.include)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Base.MainInclude.include)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Base.MainInclude.include)}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.template)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.template)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.template)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.template)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.template)}, Bool, Function, Function})
precompile(Tuple{typeof(VSCodeServer.wsicon), Function})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Function})
precompile(Tuple{typeof(VSCodeServer.treerender), Function})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Function})
precompile(Tuple{typeof(VSCodeServer.can_display), Function})
precompile(Tuple{VSCodeServer.var"#117#118", Function})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.get_return_type), VSCodeServer.JSONRPC.RequestType{Nothing, Array{VSCodeServer.ReplWorkspaceItem, 1}}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_success_response), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Array{VSCodeServer.ReplWorkspaceItem, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Array{VSCodeServer.ReplWorkspaceItem, 1}}}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.json), Base.Dict{String, Any}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, Int64})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, String})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, Array{VSCodeServer.ReplWorkspaceItem, 1}})
precompile(Tuple{Type{VSCodeServer.JSON.Writer.CompositeTypeWrapper{T} where T}, VSCodeServer.ReplWorkspaceItem, NTuple{9, Symbol}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, Symbol, String})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, Symbol, Int64})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, Symbol, Bool})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, Symbol, VSCodeServer.Location})
precompile(Tuple{Type{VSCodeServer.JSON.Writer.CompositeTypeWrapper{T} where T}, VSCodeServer.Location, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, Symbol, Nothing})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.write_transport_layer), Base.PipeEndpoint, String})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.get_param_type), VSCodeServer.JSONRPC.RequestType{NamedTuple{(:mod,), Tuple{String}}, Bool}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, VSCodeServer.JSONRPC.var"#5#6", Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Generator{Base.Dict{String, Any}, VSCodeServer.JSONRPC.var"#5#6"}})
precompile(Tuple{Type{NamedTuple{(:mod,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.convert), Type{NamedTuple{(:mod,), Tuple{String}}}, NamedTuple{(:mod,), Tuple{String}}})
precompile(Tuple{typeof(VSCodeServer.repl_isModuleLoaded_request), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, NamedTuple{(:mod,), Tuple{String}}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.get_return_type), VSCodeServer.JSONRPC.RequestType{NamedTuple{(:mod,), Tuple{String}}, Bool}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_success_response), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Bool})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Bool}}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, Bool})
precompile(Tuple{VSCodeServer.var"#183#187"{VSCodeServer.JSONRPC.MsgDispatcher, Base.Dict{String, Any}, Bool}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.get_param_type), VSCodeServer.JSONRPC.RequestType{VSCodeServer.ReplRunCodeRequestParams, VSCodeServer.ReplRunCodeRequestReturn}})
precompile(Tuple{Type{VSCodeServer.ReplRunCodeRequestParams}, Base.Dict{String, Any}})
precompile(Tuple{typeof(VSCodeServer.repl_runcode_request), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, VSCodeServer.ReplRunCodeRequestParams})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{VSCodeServer.var"#62#66"{VSCodeServer.ReplRunCodeRequestParams}, Tuple{}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{VSCodeServer.var"#62#66"{VSCodeServer.ReplRunCodeRequestParams}, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{VSCodeServer.var"#62#66"{VSCodeServer.ReplRunCodeRequestParams}, Tuple{}}, Int64, Int64})
precompile(Tuple{Type{VSCodeServer.InlineDisplay}, Bool})
precompile(Tuple{typeof(Base.convert), Type{Base.Multimedia.AbstractDisplay}, VSCodeServer.InlineDisplay})
precompile(Tuple{typeof(Base.:(!=)), UInt32, UInt32})
precompile(Tuple{Type{NamedTuple{(:func, :limit), T} where T<:Tuple}, Tuple{typeof(Base.display_error), Int64}})
precompile(Tuple{typeof(Printf.base), Type})
precompile(Tuple{VSCodeServer.var"#62#66"{VSCodeServer.ReplRunCodeRequestParams}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_notification), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, String, Nothing})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Union{Nothing, String}}})
precompile(Tuple{typeof(Base.CoreLogging.min_enabled_level), Logging.ConsoleLogger})
precompile(Tuple{typeof(Base.min), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{VSCodeServer.var"#63#67"{Bool, Bool, Bool, Module, String, Int64, Int64, String, VSCodeServer.ReplRunCodeRequestParams}})
precompile(Tuple{typeof(Base.getproperty), REPL.LineEdit.MIState, Symbol})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.MIState})
precompile(Tuple{Type{Base.PkgId}, Nothing, String})
precompile(Tuple{Type{Base.BottomRF{typeof(Base.:(|))}}, Function})
precompile(Tuple{typeof(JuliaInterpreter.breakpoints)})
precompile(Tuple{Type{NamedTuple{(:eval_now,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.keys), Base.Dict{Tuple{Revise.PkgData, String}, Tuple{Exception, Any}}})
precompile(Tuple{Type{Base.KeySet{K, T} where T<:(Base.AbstractDict{K, V} where V) where K}, Base.Dict{Any, Nothing}})
precompile(Tuple{Type{Base.KeySet{Any, Base.Dict{Any, Nothing}}}, Base.Dict{Any, Nothing}})
precompile(Tuple{typeof(Revise.revise)})
precompile(Tuple{typeof(VSCodeServer.get_main_mode), REPL.LineEditREPL})
precompile(Tuple{typeof(Base.lastindex), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{String, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.push!), Array{Symbol, 1}, Symbol})
precompile(Tuple{typeof(Base.push!), Array{String, 1}, Base.SubString{String}})
precompile(Tuple{typeof(Base.include_string), typeof(REPL.softscope), Module, String, String})
precompile(Tuple{typeof(Main.consume_precompile), String, Symbol, Symbol, Vararg{Symbol}})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Accessors.__init__)})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(Requires.loaded), Base.PkgId})
precompile(Tuple{typeof(Requires.callbacks), Base.PkgId})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.foreach), typeof(Base.invokelatest), Array{Function, 1}})
precompile(Tuple{Accessors.var"#1#4"})
precompile(Tuple{typeof(Requires.withpath), Any, String})
precompile(Tuple{typeof(Base.task_local_storage)})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.something), String, String, Vararg{String}})
precompile(Tuple{Accessors.var"#2#5"})
precompile(Tuple{typeof(Requires.err), Any, Module, String, String, Any})
precompile(Tuple{Accessors.var"#3#6"})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Requires._include_path), String})
precompile(Tuple{typeof(Base.source_path), Nothing})
precompile(Tuple{typeof(Accessors.include), String})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:by,), Tuple{CodeInfoTools.var"#30#32"}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.include_string), typeof(Base.identity), Module, String, String})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.isassigned), Base.RefValue{Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Symbol}, Symbol})
precompile(Tuple{typeof(Requires.withnotifications), Any, Vararg{Any}})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}})
precompile(Tuple{typeof(Revise.add_require), String, Module, String, String, Expr})
precompile(Tuple{typeof(Base.isequal), QuoteNode, QuoteNode})
precompile(Tuple{typeof(Base.hash), QuoteNode, UInt64})
precompile(Tuple{typeof(Base.hash), Any, UInt64})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}, Int64})
precompile(Tuple{typeof(SPIRV_Tools_jll.__init__)})
precompile(Tuple{typeof(SPIRV_Tools_jll.find_artifact_dir)})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(VSCodeServer.on_pkg_load), Base.PkgId})
precompile(Tuple{typeof(VSCodeServer.on_pkg_load), Base.PkgId})
precompile(Tuple{typeof(VulkanCore.LibVulkan.__init__)})
precompile(Tuple{typeof(Base.Libc.Libdl.find_library), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(VSCodeServer.on_pkg_load), Base.PkgId})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(glslang_jll.__init__)})
precompile(Tuple{typeof(glslang_jll.find_artifact_dir)})
precompile(Tuple{typeof(Vulkan.__init__)})
precompile(Tuple{Type{Base.Dict{Symbol, Ptr{Nothing}}}, Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Dict{Vulkan.Instance, Vulkan.DispatchTable}}, Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Dict{Vulkan.Device, Vulkan.DispatchTable}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(VSCodeServer.on_pkg_load), Base.PkgId})
precompile(Tuple{typeof(ColorTypes.__init__)})
precompile(Tuple{typeof(VSCodeServer.on_pkg_load), Base.PkgId})
precompile(Tuple{typeof(Lava.debug_callback), Vulkan.DebugUtilsMessageSeverityFlagEXT, Vulkan.DebugUtilsMessageTypeFlagEXT, Ptr{VulkanCore.LibVulkan.VkDebugUtilsMessengerCallbackDataEXT}, Ptr{Nothing}})
precompile(Tuple{typeof(Lava.__init__)})
precompile(Tuple{typeof(VSCodeServer.on_pkg_load), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Libgpg_error_jll.__init__)})
precompile(Tuple{typeof(Libgpg_error_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libgcrypt_jll.__init__)})
precompile(Tuple{typeof(Libgcrypt_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libXau_jll.__init__)})
precompile(Tuple{typeof(Xorg_libXau_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libXdmcp_jll.__init__)})
precompile(Tuple{typeof(Xorg_libXdmcp_jll.find_artifact_dir)})
precompile(Tuple{typeof(Zlib_jll.__init__)})
precompile(Tuple{typeof(Libiconv_jll.__init__)})
precompile(Tuple{typeof(Libiconv_jll.find_artifact_dir)})
precompile(Tuple{typeof(XML2_jll.__init__)})
precompile(Tuple{typeof(XML2_jll.find_artifact_dir)})
precompile(Tuple{typeof(XSLT_jll.__init__)})
precompile(Tuple{typeof(XSLT_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libpthread_stubs_jll.__init__)})
precompile(Tuple{typeof(Xorg_libpthread_stubs_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libxcb_jll.__init__)})
precompile(Tuple{typeof(Xorg_libxcb_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_xcb_util_jll.__init__)})
precompile(Tuple{typeof(Xorg_xcb_util_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libffi_jll.__init__)})
precompile(Tuple{typeof(Libffi_jll.find_artifact_dir)})
precompile(Tuple{typeof(Expat_jll.__init__)})
precompile(Tuple{typeof(Expat_jll.find_artifact_dir)})
precompile(Tuple{typeof(Wayland_jll.__init__)})
precompile(Tuple{typeof(Wayland_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_xtrans_jll.__init__)})
precompile(Tuple{typeof(Xorg_xtrans_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libX11_jll.__init__)})
precompile(Tuple{typeof(Xorg_libX11_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libxkbfile_jll.__init__)})
precompile(Tuple{typeof(Xorg_libxkbfile_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_xkbcomp_jll.__init__)})
precompile(Tuple{typeof(Xorg_xkbcomp_jll.find_artifact_dir)})
precompile(Tuple{typeof(Wayland_protocols_jll.__init__)})
precompile(Tuple{typeof(Wayland_protocols_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_xkeyboard_config_jll.__init__)})
precompile(Tuple{typeof(Xorg_xkeyboard_config_jll.find_artifact_dir)})
precompile(Tuple{typeof(xkbcommon_jll.__init__)})
precompile(Tuple{typeof(xkbcommon_jll.find_artifact_dir)})
precompile(Tuple{typeof(VSCodeServer.on_pkg_load), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{Type{Base.VersionNumber}, UInt32, UInt32, UInt32, Tuple{UInt64}, Tuple{UInt64}})
precompile(Tuple{typeof(VSCodeServer.on_pkg_load), Base.PkgId})
precompile(Tuple{typeof(OpenLibm_jll.__init__)})
precompile(Tuple{typeof(OpenSpecFun_jll.__init__)})
precompile(Tuple{typeof(OpenSpecFun_jll.find_artifact_dir)})
precompile(Tuple{typeof(ColorVectorSpace.__init__)})
precompile(Tuple{typeof(JpegTurbo_jll.__init__)})
precompile(Tuple{typeof(JpegTurbo_jll.find_artifact_dir)})
precompile(Tuple{typeof(libpng_jll.__init__)})
precompile(Tuple{typeof(libpng_jll.find_artifact_dir)})
precompile(Tuple{typeof(Zstd_jll.__init__)})
precompile(Tuple{typeof(Zstd_jll.find_artifact_dir)})
precompile(Tuple{typeof(LERC_jll.__init__)})
precompile(Tuple{typeof(LERC_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libtiff_jll.__init__)})
precompile(Tuple{typeof(Libtiff_jll.find_artifact_dir)})
precompile(Tuple{Type{Base.BottomRF{Base.var"#57#58"{ImageMagick_jll.var"#13#15"}}}, Function})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), NTuple{4, Array{String, 1}}})
precompile(Tuple{Type{Base.Generator{NTuple{4, Array{String, 1}}, typeof(Base.identity)}}, Function, NTuple{4, Array{String, 1}}})
precompile(Tuple{typeof(Base.convert), Type{NTuple{4, Array{String, 1}}}, NTuple{4, Array{String, 1}}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{Base.var"#57#58"{ImageMagick_jll.var"#13#15"}}, Base.Generator{NTuple{4, Array{String, 1}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{Base.var"#57#58"{ImageMagick_jll.var"#13#15"}}, NTuple{4, Array{String, 1}}})
precompile(Tuple{Type{Base.BottomRF{Base.var"#57#58"{ImageMagick_jll.var"#14#16"}}}, Function})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{Base.var"#57#58"{ImageMagick_jll.var"#14#16"}}, Base.Generator{NTuple{4, Array{String, 1}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{Base.var"#57#58"{ImageMagick_jll.var"#14#16"}}, NTuple{4, Array{String, 1}}})
precompile(Tuple{typeof(ImageMagick_jll.__init__)})
precompile(Tuple{typeof(FileIO.__init__)})
precompile(Tuple{typeof(ImageMagick.__init__)})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(PNGFiles._readcallback), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(PNGFiles._readcallback_iobuffer), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(PNGFiles._writecallback), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(PNGFiles.png_error_handler), Ptr{Nothing}, Base.Cstring})
precompile(Tuple{typeof(PNGFiles.png_warn_handler), Ptr{Nothing}, Base.Cstring})
precompile(Tuple{typeof(PNGFiles.__init__)})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{typeof(Base.show_call), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Symbol, Array{Any, 1}, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Base.PkgId, Module}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Base.PkgId, Module}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Base.PkgId, Module}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.PkgId, Symbol})
precompile(Tuple{typeof(Base.in), String, Tuple{String, String, String}})
precompile(Tuple{Type{Symbol}, Module})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Base.PkgId, Module}, Int64})
precompile(Tuple{typeof(Base.eachline), String})
precompile(Tuple{typeof(Base.collect), Base.EachLine{Base.IOStream}})
precompile(Tuple{typeof(Base.Meta.parse), String})
precompile(Tuple{typeof(Base.popfirst!), Array{Any, 1}})
precompile(Tuple{typeof(Base._methods_by_ftype), Any, Int64, UInt64})
precompile(Tuple{typeof(Base.include_string), typeof(Base.identity), Module, String, String})
precompile(Tuple{Type{NamedTuple{(:with_validation, :instance_extensions), T} where T<:Tuple}, Tuple{Bool, Array{String, 1}}})
precompile(Tuple{typeof(Base.rem), UInt16, Type{UInt32}})
precompile(Tuple{typeof(Base.:(|)), Vulkan.QueueFlag, Vulkan.QueueFlag})
precompile(Tuple{Type{Pair{A, B} where B where A}, Vulkan.QueueFlag, Int64})
precompile(Tuple{typeof(Base.:(>>)), Int64, UInt8})
precompile(Tuple{typeof(Base._tablesz), Int64})
precompile(Tuple{typeof(Base.:(|)), Vulkan.DebugUtilsMessageTypeFlagEXT, Vulkan.DebugUtilsMessageTypeFlagEXT})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkLayerProperties}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkLayerProperties}}, Ptr{Nothing}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Int8, 1}}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkExtensionProperties}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkExtensionProperties}}, Ptr{Nothing}})
precompile(Tuple{Type{NamedTuple{(:layer_name,), T} where T<:Tuple}, Tuple{Ptr{Nothing}}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Int8}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Int8}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.:(|)), Vararg{Vulkan.DebugUtilsMessageSeverityFlagEXT, 4}})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.DebugUtilsMessageSeverityFlagEXT}, Vulkan.DebugUtilsMessageSeverityFlagEXT})
precompile(Tuple{Type{NamedTuple{(:allocator,), T} where T<:Tuple}, Tuple{Ptr{Nothing}}})
precompile(Tuple{typeof(Base.convert), Type{VulkanCore.LibVulkan.VkStructureType}, VulkanCore.LibVulkan.VkStructureType})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkAllocationCallbacks}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkAllocationCallbacks}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.:(!=)), Symbol})
precompile(Tuple{typeof(Base.in), NTuple{13, Symbol}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix2{typeof(Base.in), NTuple{13, Symbol}}}, Base.Fix2{typeof(Base.in), NTuple{13, Symbol}}})
precompile(Tuple{typeof(Base.filter), Function, NTuple{13, Symbol}})
precompile(Tuple{typeof(Base.filter_rec), Base.Fix2{typeof(Base.:(!=)), Symbol}, NTuple{13, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{12, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{11, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{10, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{9, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{8, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{7, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{6, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{5, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{4, Symbol}})
precompile(Tuple{ConstructionBase.var"##s26#3", Any, Any})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", NTuple{13, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{13, Symbol}})
precompile(Tuple{ConstructionBase.var"##s26#1", Any, Any, Any})
precompile(Tuple{typeof(Base.parentmodule), DataType})
precompile(Tuple{typeof(Base.nameof), DataType})
precompile(Tuple{Type{NamedTuple{(:next,), T} where T<:Tuple}, Tuple{Ptr{Nothing}}})
precompile(Tuple{typeof(Base.rem), UInt8, Type{Int64}})
precompile(Tuple{typeof(DataStructures._expand16), UInt8})
precompile(Tuple{typeof(Base.rem), Int32, Type{UInt32}})
precompile(Tuple{typeof(Base.in), NTuple{55, Symbol}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.in), NTuple{55, Symbol}})
precompile(Tuple{typeof(Base.convert), Type{NTuple{55, Symbol}}, NTuple{55, Symbol}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix2{typeof(Base.in), NTuple{55, Symbol}}}, Base.Fix2{typeof(Base.in), NTuple{55, Symbol}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{DataType, DataType, DataType}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Vulkan.intermediate_type), Tuple{Tuple{DataType, DataType, DataType}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Vulkan.intermediate_type), Tuple{Tuple{DataType, DataType, DataType}}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Vulkan.intermediate_type), Type})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkQueueFamilyProperties}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkQueueFamilyProperties}}, Ptr{Nothing}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Vulkan.intermediate_type), Tuple{Tuple{}}}}, Function, Tuple{Tuple{}}, Nothing})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{}})
precompile(Tuple{typeof(Base.axes), Tuple})
precompile(Tuple{typeof(Vulkan.convert_nonnull), Type, Ptr{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.DeviceQueueCreateFlag}, Int64})
precompile(Tuple{Type{NamedTuple{(:next, :flags), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.DeviceQueueCreateFlag}})
precompile(Tuple{typeof(Base.convert), Type{UInt32}, Vulkan.DeviceQueueCreateFlag})
precompile(Tuple{Type{NamedTuple{(:maxsize,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.typemin), Type{Base.VersionNumber}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.eltype), typeof(Base.promote_type)}, Type{Array{Vulkan.PropertyCondition, 1}}})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.axes), Base.UnitRange{Int64}})
precompile(Tuple{Base.var"##s92#212", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.reduce_first), Function, Type})
precompile(Tuple{Lava.var"#init##kw", NamedTuple{(:with_validation, :instance_extensions), Tuple{Bool, Array{String, 1}}}, typeof(Lava.init)})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Base.VersionNumber, Vulkan.VulkanError}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Array{Vulkan._LayerProperties, 1}, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.collect), NTuple{19, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{20, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{31, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{33, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{28, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{24, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{21, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{26, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{30, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{23, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{27, Int8}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Array{Vulkan._ExtensionProperties, 1}, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.collect), NTuple{14, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{34, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{35, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{38, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{32, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{37, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{22, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{18, Int8}})
precompile(Tuple{Type{NamedTuple{(:next, :application_name, :engine_name), T} where T<:Tuple}, Tuple{Ptr{Nothing}, String, String}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :application_name, :engine_name), Tuple{Ptr{Nothing}, String, String}}, Type{Vulkan._ApplicationInfo}, Base.VersionNumber, Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{Type{NamedTuple{(:next, :flags, :application_info), T} where T<:Tuple}, Tuple{Vulkan.DebugUtilsMessengerCreateInfoEXT, UInt32, Vulkan._ApplicationInfo}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags, :application_info), Tuple{Vulkan.DebugUtilsMessengerCreateInfoEXT, UInt32, Vulkan._ApplicationInfo}}, Type{Vulkan._InstanceCreateInfo}, Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Vulkan._DebugUtilsMessengerCreateInfoEXT}, Vulkan.DebugUtilsMessengerCreateInfoEXT})
precompile(Tuple{Type{NamedTuple{(:next, :flags, :user_data), T} where T<:Tuple}, Tuple{Ptr{Nothing}, UInt32, Ptr{Nothing}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags, :user_data), Tuple{Ptr{Nothing}, UInt32, Ptr{Nothing}}}, Type{Vulkan._DebugUtilsMessengerCreateInfoEXT}, Vulkan.DebugUtilsMessageSeverityFlagEXT, Vulkan.DebugUtilsMessageTypeFlagEXT, Ptr{Nothing}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Vulkan._DebugUtilsMessengerCreateInfoEXT})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Base.RefValue{VulkanCore.LibVulkan.VkDebugUtilsMessengerCreateInfoEXT}})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkInstanceCreateInfo}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, UInt32, Ptr{VulkanCore.LibVulkan.VkApplicationInfo}, Int64, Ptr{Base.Cstring}, Int64, Ptr{Base.Cstring}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.Instance, Vulkan.VulkanError}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.DebugUtilsMessengerEXT, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.intersect), NTuple{13, Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.intersect!), Base.Set{Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.vectorfilter), Type, Base.var"#127#128"{typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}, NTuple{13, Symbol}})
precompile(Tuple{typeof(Base.collect), Type{Symbol}, Base.Generator{Base.Iterators.Filter{Base.var"#129#130"{Base.var"#127#128"{typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}}, NTuple{13, Symbol}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.append!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.filter), Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), NTuple{13, Symbol}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.map), Base.Fix2{typeof(Base.in), Array{Symbol, 1}}, NTuple{12, Symbol}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan11Features}, Vararg{Bool, 12}})
precompile(Tuple{typeof(ConstructionBase.setproperties), Vulkan.PhysicalDeviceVulkan11Features, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{Type{NamedTuple{(:next, :storage_buffer_16_bit_access, :uniform_and_storage_buffer_16_bit_access, :storage_push_constant_16, :storage_input_output_16, :multiview, :multiview_geometry_shader, :multiview_tessellation_shader, :variable_pointers_storage_buffer, :variable_pointers, :protected_memory, :sampler_ycbcr_conversion, :shader_draw_parameters), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vararg{Bool, 12}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:next, :storage_buffer_16_bit_access, :uniform_and_storage_buffer_16_bit_access, :storage_push_constant_16, :storage_input_output_16, :multiview, :multiview_geometry_shader, :multiview_tessellation_shader, :variable_pointers_storage_buffer, :variable_pointers, :protected_memory, :sampler_ycbcr_conversion, :shader_draw_parameters), Tuple{Ptr{Nothing}, Vararg{Bool, 12}}}, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :storage_buffer_16_bit_access, :uniform_and_storage_buffer_16_bit_access, :storage_push_constant_16, :storage_input_output_16, :multiview, :multiview_geometry_shader, :multiview_tessellation_shader, :variable_pointers_storage_buffer, :variable_pointers, :protected_memory, :sampler_ycbcr_conversion, :shader_draw_parameters), Tuple{Ptr{Nothing}, Vararg{Bool, 12}}}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan11Features}, Ptr{Nothing}, Vararg{Bool, 12}})
precompile(Tuple{typeof(Base.intersect), NTuple{48, Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.vectorfilter), Type, Base.var"#127#128"{typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}, NTuple{48, Symbol}})
precompile(Tuple{typeof(Base.collect), Type{Symbol}, Base.Generator{Base.Iterators.Filter{Base.var"#129#130"{Base.var"#127#128"{typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}}, NTuple{48, Symbol}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.in), NTuple{48, Symbol}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix2{typeof(Base.in), NTuple{48, Symbol}}}, Base.Fix2{typeof(Base.in), NTuple{48, Symbol}}})
precompile(Tuple{typeof(Base.filter), Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), NTuple{48, Symbol}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.filter), Function, NTuple{48, Symbol}})
precompile(Tuple{typeof(Base.filter), Base.Fix2{typeof(Base.:(!=)), Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.map), Base.Fix2{typeof(Base.in), Array{Symbol, 1}}, NTuple{47, Symbol}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan12Features}, Vararg{Bool, 47}})
precompile(Tuple{Type{NamedTuple{(:next,), T} where T<:Tuple}, Tuple{Vulkan.PhysicalDeviceVulkan11Features}})
precompile(Tuple{typeof(ConstructionBase.setproperties), Vulkan.PhysicalDeviceVulkan12Features, NamedTuple{(:next,), Tuple{Vulkan.PhysicalDeviceVulkan11Features}}})
precompile(Tuple{Type{NamedTuple{(:next, :sampler_mirror_clamp_to_edge, :draw_indirect_count, :storage_buffer_8_bit_access, :uniform_and_storage_buffer_8_bit_access, :storage_push_constant_8, :shader_buffer_int_64_atomics, :shader_shared_int_64_atomics, :shader_float_16, :shader_int_8, :descriptor_indexing, :shader_input_attachment_array_dynamic_indexing, :shader_uniform_texel_buffer_array_dynamic_indexing, :shader_storage_texel_buffer_array_dynamic_indexing, :shader_uniform_buffer_array_non_uniform_indexing, :shader_sampled_image_array_non_uniform_indexing, :shader_storage_buffer_array_non_uniform_indexing, :shader_storage_image_array_non_uniform_indexing, :shader_input_attachment_array_non_uniform_indexing, :shader_uniform_texel_buffer_array_non_uniform_indexing, :shader_storage_texel_buffer_array_non_uniform_indexing, :descriptor_binding_uniform_buffer_update_after_bind, :descriptor_binding_sampled_image_update_after_bind, :descriptor_binding_storage_image_update_after_bind, :descriptor_binding_storage_buffer_update_after_bind, :descriptor_binding_uniform_texel_buffer_update_after_bind, :descriptor_binding_storage_texel_buffer_update_after_bind, :descriptor_binding_update_unused_while_pending, :descriptor_binding_partially_bound, :descriptor_binding_variable_descriptor_count, :runtime_descriptor_array, :sampler_filter_minmax, :scalar_block_layout, :imageless_framebuffer, :uniform_buffer_standard_layout, :shader_subgroup_extended_types, :separate_depth_stencil_layouts, :host_query_reset, :timeline_semaphore, :buffer_device_address, :buffer_device_address_capture_replay, :buffer_device_address_multi_device, :vulkan_memory_model, :vulkan_memory_model_device_scope, :vulkan_memory_model_availability_visibility_chains, :shader_output_viewport_index, :shader_output_layer, :subgroup_broadcast_dynamic_id), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vararg{Bool, 47}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:next, :sampler_mirror_clamp_to_edge, :draw_indirect_count, :storage_buffer_8_bit_access, :uniform_and_storage_buffer_8_bit_access, :storage_push_constant_8, :shader_buffer_int_64_atomics, :shader_shared_int_64_atomics, :shader_float_16, :shader_int_8, :descriptor_indexing, :shader_input_attachment_array_dynamic_indexing, :shader_uniform_texel_buffer_array_dynamic_indexing, :shader_storage_texel_buffer_array_dynamic_indexing, :shader_uniform_buffer_array_non_uniform_indexing, :shader_sampled_image_array_non_uniform_indexing, :shader_storage_buffer_array_non_uniform_indexing, :shader_storage_image_array_non_uniform_indexing, :shader_input_attachment_array_non_uniform_indexing, :shader_uniform_texel_buffer_array_non_uniform_indexing, :shader_storage_texel_buffer_array_non_uniform_indexing, :descriptor_binding_uniform_buffer_update_after_bind, :descriptor_binding_sampled_image_update_after_bind, :descriptor_binding_storage_image_update_after_bind, :descriptor_binding_storage_buffer_update_after_bind, :descriptor_binding_uniform_texel_buffer_update_after_bind, :descriptor_binding_storage_texel_buffer_update_after_bind, :descriptor_binding_update_unused_while_pending, :descriptor_binding_partially_bound, :descriptor_binding_variable_descriptor_count, :runtime_descriptor_array, :sampler_filter_minmax, :scalar_block_layout, :imageless_framebuffer, :uniform_buffer_standard_layout, :shader_subgroup_extended_types, :separate_depth_stencil_layouts, :host_query_reset, :timeline_semaphore, :buffer_device_address, :buffer_device_address_capture_replay, :buffer_device_address_multi_device, :vulkan_memory_model, :vulkan_memory_model_device_scope, :vulkan_memory_model_availability_visibility_chains, :shader_output_viewport_index, :shader_output_layer, :subgroup_broadcast_dynamic_id), Tuple{Ptr{Nothing}, Vararg{Bool, 47}}}, NamedTuple{(:next,), Tuple{Vulkan.PhysicalDeviceVulkan11Features}}})
precompile(Tuple{typeof(ConstructionBase.validate_setproperties_result), NamedTuple{(:next, :sampler_mirror_clamp_to_edge, :draw_indirect_count, :storage_buffer_8_bit_access, :uniform_and_storage_buffer_8_bit_access, :storage_push_constant_8, :shader_buffer_int_64_atomics, :shader_shared_int_64_atomics, :shader_float_16, :shader_int_8, :descriptor_indexing, :shader_input_attachment_array_dynamic_indexing, :shader_uniform_texel_buffer_array_dynamic_indexing, :shader_storage_texel_buffer_array_dynamic_indexing, :shader_uniform_buffer_array_non_uniform_indexing, :shader_sampled_image_array_non_uniform_indexing, :shader_storage_buffer_array_non_uniform_indexing, :shader_storage_image_array_non_uniform_indexing, :shader_input_attachment_array_non_uniform_indexing, :shader_uniform_texel_buffer_array_non_uniform_indexing, :shader_storage_texel_buffer_array_non_uniform_indexing, :descriptor_binding_uniform_buffer_update_after_bind, :descriptor_binding_sampled_image_update_after_bind, :descriptor_binding_storage_image_update_after_bind, :descriptor_binding_storage_buffer_update_after_bind, :descriptor_binding_uniform_texel_buffer_update_after_bind, :descriptor_binding_storage_texel_buffer_update_after_bind, :descriptor_binding_update_unused_while_pending, :descriptor_binding_partially_bound, :descriptor_binding_variable_descriptor_count, :runtime_descriptor_array, :sampler_filter_minmax, :scalar_block_layout, :imageless_framebuffer, :uniform_buffer_standard_layout, :shader_subgroup_extended_types, :separate_depth_stencil_layouts, :host_query_reset, :timeline_semaphore, :buffer_device_address, :buffer_device_address_capture_replay, :buffer_device_address_multi_device, :vulkan_memory_model, :vulkan_memory_model_device_scope, :vulkan_memory_model_availability_visibility_chains, :shader_output_viewport_index, :shader_output_layer, :subgroup_broadcast_dynamic_id), Tuple{Vulkan.PhysicalDeviceVulkan11Features, Vararg{Bool, 47}}}, NamedTuple{(:next, :sampler_mirror_clamp_to_edge, :draw_indirect_count, :storage_buffer_8_bit_access, :uniform_and_storage_buffer_8_bit_access, :storage_push_constant_8, :shader_buffer_int_64_atomics, :shader_shared_int_64_atomics, :shader_float_16, :shader_int_8, :descriptor_indexing, :shader_input_attachment_array_dynamic_indexing, :shader_uniform_texel_buffer_array_dynamic_indexing, :shader_storage_texel_buffer_array_dynamic_indexing, :shader_uniform_buffer_array_non_uniform_indexing, :shader_sampled_image_array_non_uniform_indexing, :shader_storage_buffer_array_non_uniform_indexing, :shader_storage_image_array_non_uniform_indexing, :shader_input_attachment_array_non_uniform_indexing, :shader_uniform_texel_buffer_array_non_uniform_indexing, :shader_storage_texel_buffer_array_non_uniform_indexing, :descriptor_binding_uniform_buffer_update_after_bind, :descriptor_binding_sampled_image_update_after_bind, :descriptor_binding_storage_image_update_after_bind, :descriptor_binding_storage_buffer_update_after_bind, :descriptor_binding_uniform_texel_buffer_update_after_bind, :descriptor_binding_storage_texel_buffer_update_after_bind, :descriptor_binding_update_unused_while_pending, :descriptor_binding_partially_bound, :descriptor_binding_variable_descriptor_count, :runtime_descriptor_array, :sampler_filter_minmax, :scalar_block_layout, :imageless_framebuffer, :uniform_buffer_standard_layout, :shader_subgroup_extended_types, :separate_depth_stencil_layouts, :host_query_reset, :timeline_semaphore, :buffer_device_address, :buffer_device_address_capture_replay, :buffer_device_address_multi_device, :vulkan_memory_model, :vulkan_memory_model_device_scope, :vulkan_memory_model_availability_visibility_chains, :shader_output_viewport_index, :shader_output_layer, :subgroup_broadcast_dynamic_id), Tuple{Ptr{Nothing}, Vararg{Bool, 47}}}, Vulkan.PhysicalDeviceVulkan12Features, NamedTuple{(:next,), Tuple{Vulkan.PhysicalDeviceVulkan11Features}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :sampler_mirror_clamp_to_edge, :draw_indirect_count, :storage_buffer_8_bit_access, :uniform_and_storage_buffer_8_bit_access, :storage_push_constant_8, :shader_buffer_int_64_atomics, :shader_shared_int_64_atomics, :shader_float_16, :shader_int_8, :descriptor_indexing, :shader_input_attachment_array_dynamic_indexing, :shader_uniform_texel_buffer_array_dynamic_indexing, :shader_storage_texel_buffer_array_dynamic_indexing, :shader_uniform_buffer_array_non_uniform_indexing, :shader_sampled_image_array_non_uniform_indexing, :shader_storage_buffer_array_non_uniform_indexing, :shader_storage_image_array_non_uniform_indexing, :shader_input_attachment_array_non_uniform_indexing, :shader_uniform_texel_buffer_array_non_uniform_indexing, :shader_storage_texel_buffer_array_non_uniform_indexing, :descriptor_binding_uniform_buffer_update_after_bind, :descriptor_binding_sampled_image_update_after_bind, :descriptor_binding_storage_image_update_after_bind, :descriptor_binding_storage_buffer_update_after_bind, :descriptor_binding_uniform_texel_buffer_update_after_bind, :descriptor_binding_storage_texel_buffer_update_after_bind, :descriptor_binding_update_unused_while_pending, :descriptor_binding_partially_bound, :descriptor_binding_variable_descriptor_count, :runtime_descriptor_array, :sampler_filter_minmax, :scalar_block_layout, :imageless_framebuffer, :uniform_buffer_standard_layout, :shader_subgroup_extended_types, :separate_depth_stencil_layouts, :host_query_reset, :timeline_semaphore, :buffer_device_address, :buffer_device_address_capture_replay, :buffer_device_address_multi_device, :vulkan_memory_model, :vulkan_memory_model_device_scope, :vulkan_memory_model_availability_visibility_chains, :shader_output_viewport_index, :shader_output_layer, :subgroup_broadcast_dynamic_id), Tuple{Vulkan.PhysicalDeviceVulkan11Features, Vararg{Bool, 47}}}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan12Features}, Vulkan.PhysicalDeviceVulkan11Features, Vararg{Bool, 47}})
precompile(Tuple{typeof(Base.intersect), NTuple{16, Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.vectorfilter), Type, Base.var"#127#128"{typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}, NTuple{16, Symbol}})
precompile(Tuple{typeof(Base.collect), Type{Symbol}, Base.Generator{Base.Iterators.Filter{Base.var"#129#130"{Base.var"#127#128"{typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}}, NTuple{16, Symbol}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.in), NTuple{16, Symbol}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix2{typeof(Base.in), NTuple{16, Symbol}}}, Base.Fix2{typeof(Base.in), NTuple{16, Symbol}}})
precompile(Tuple{typeof(Base.filter), Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), NTuple{16, Symbol}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.filter), Function, NTuple{16, Symbol}})
precompile(Tuple{typeof(Base.filter_rec), Base.Fix2{typeof(Base.:(!=)), Symbol}, NTuple{16, Symbol}})
precompile(Tuple{typeof(Base.map), Base.Fix2{typeof(Base.in), Array{Symbol, 1}}, NTuple{15, Symbol}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan13Features}, Vararg{Bool, 15}})
precompile(Tuple{Type{NamedTuple{(:next,), T} where T<:Tuple}, Tuple{Vulkan.PhysicalDeviceVulkan12Features}})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", NTuple{16, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{16, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{15, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{14, Symbol}})
precompile(Tuple{typeof(ConstructionBase.setproperties), Vulkan.PhysicalDeviceVulkan13Features, NamedTuple{(:next,), Tuple{Vulkan.PhysicalDeviceVulkan12Features}}})
precompile(Tuple{Type{NamedTuple{(:next, :robust_image_access, :inline_uniform_block, :descriptor_binding_inline_uniform_block_update_after_bind, :pipeline_creation_cache_control, :private_data, :shader_demote_to_helper_invocation, :shader_terminate_invocation, :subgroup_size_control, :compute_full_subgroups, :synchronization2, :texture_compression_astc_hdr, :shader_zero_initialize_workgroup_memory, :dynamic_rendering, :shader_integer_dot_product, :maintenance4), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vararg{Bool, 15}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:next, :robust_image_access, :inline_uniform_block, :descriptor_binding_inline_uniform_block_update_after_bind, :pipeline_creation_cache_control, :private_data, :shader_demote_to_helper_invocation, :shader_terminate_invocation, :subgroup_size_control, :compute_full_subgroups, :synchronization2, :texture_compression_astc_hdr, :shader_zero_initialize_workgroup_memory, :dynamic_rendering, :shader_integer_dot_product, :maintenance4), Tuple{Ptr{Nothing}, Vararg{Bool, 15}}}, NamedTuple{(:next,), Tuple{Vulkan.PhysicalDeviceVulkan12Features}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :robust_image_access, :inline_uniform_block, :descriptor_binding_inline_uniform_block_update_after_bind, :pipeline_creation_cache_control, :private_data, :shader_demote_to_helper_invocation, :shader_terminate_invocation, :subgroup_size_control, :compute_full_subgroups, :synchronization2, :texture_compression_astc_hdr, :shader_zero_initialize_workgroup_memory, :dynamic_rendering, :shader_integer_dot_product, :maintenance4), Tuple{Vulkan.PhysicalDeviceVulkan12Features, Vararg{Bool, 15}}}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan13Features}, Vulkan.PhysicalDeviceVulkan12Features, Vararg{Bool, 15}})
precompile(Tuple{typeof(Base.filter), Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), NTuple{55, Symbol}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.filter), Function, NTuple{55, Symbol}})
precompile(Tuple{typeof(Base.map), Base.Fix2{typeof(Base.in), Array{Symbol, 1}}, NTuple{55, Symbol}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceFeatures}, Vararg{Bool, 55}})
precompile(Tuple{Type{NamedTuple{(:next,), T} where T<:Tuple}, Tuple{Vulkan.PhysicalDeviceVulkan13Features}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Array{Vulkan.PhysicalDevice, 1}, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.collect), Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.iterate), Array{DataType, 1}})
precompile(Tuple{typeof(Vulkan.core_type), Type{Vulkan._PhysicalDeviceVulkan13Features}})
precompile(Tuple{Type{Ref{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan13Features}}})
precompile(Tuple{typeof(Base.iterate), Array{DataType, 1}, Int64})
precompile(Tuple{Type{Ref{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Features}}})
precompile(Tuple{typeof(Vulkan.core_type), Type{Vulkan._PhysicalDeviceVulkan11Features}})
precompile(Tuple{Type{Ref{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Features}}})
precompile(Tuple{Type{Ptr{VulkanCore.LibVulkan.VkPhysicalDeviceFeatures2}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan13Features}})
precompile(Tuple{Type{Ptr{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan13Features}}, Ptr{Nothing}})
precompile(Tuple{typeof(Vulkan.structure_type), Type{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan13Features}})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Features}})
precompile(Tuple{Type{Ptr{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Features}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Features}})
precompile(Tuple{Type{Ptr{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Features}}, Ptr{Nothing}})
precompile(Tuple{typeof(Vulkan.structure_type), Type{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Features}})
precompile(Tuple{Type{NamedTuple{(:sType, :pNext), T} where T<:Tuple}, Tuple{VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}}})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", NTuple{14, Symbol}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:sType, :pNext), Tuple{VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}}}}})
precompile(Tuple{typeof(ConstructionBase.setproperties), VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Features, NamedTuple{(:sType, :pNext), Tuple{VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}}}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Features}, VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Features})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Features}})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", NTuple{49, Symbol}})
precompile(Tuple{typeof(ConstructionBase.setproperties), VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Features, NamedTuple{(:sType, :pNext), Tuple{VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}}}})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Features}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, Vararg{UInt32, 47}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Features}, VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Features})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Features}})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", NTuple{17, Symbol}})
precompile(Tuple{typeof(ConstructionBase.setproperties), VulkanCore.LibVulkan.VkPhysicalDeviceVulkan13Features, NamedTuple{(:sType, :pNext), Tuple{VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}}}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan13Features}, VulkanCore.LibVulkan.VkPhysicalDeviceVulkan13Features})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan13Features}})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(ConstructionBase.setproperties), VulkanCore.LibVulkan.VkPhysicalDeviceFeatures2, NamedTuple{(:sType, :pNext), Tuple{VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}}}})
precompile(Tuple{Type{Vulkan._PhysicalDeviceFeatures2}, VulkanCore.LibVulkan.VkPhysicalDeviceFeatures2, Array{Any, 1}})
precompile(Tuple{Type{Ref{T} where T}, VulkanCore.LibVulkan.VkPhysicalDeviceFeatures2})
precompile(Tuple{typeof(VulkanCore.LibVulkan.vkGetPhysicalDeviceFeatures2), Vulkan.PhysicalDevice, Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceFeatures2}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.isempty), Array{DataType, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{DataType, 1}, Int64})
precompile(Tuple{typeof(Base.rest), Array{DataType, 1}, Int64})
precompile(Tuple{typeof(Base.:(!=)), Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{typeof(Vulkan.core_type), Type{Vulkan.PhysicalDeviceVulkan13Features}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan13Features}, VulkanCore.LibVulkan.VkPhysicalDeviceVulkan13Features, Type, Vararg{Type}})
precompile(Tuple{typeof(Base.collect), Tuple{DataType, DataType}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan12Features}, VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Features, Type})
precompile(Tuple{typeof(Base.collect), Tuple{DataType}})
precompile(Tuple{typeof(Vulkan.core_type), Type{Vulkan.PhysicalDeviceVulkan11Features}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan11Features}, VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Features})
precompile(Tuple{typeof(Base.isempty), Array{Union{}, 1}})
precompile(Tuple{typeof(Lava.unsupported_features), Vulkan.PhysicalDeviceVulkan13Features, Vulkan.PhysicalDeviceVulkan13Features})
precompile(Tuple{typeof(Base.isempty), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.collect), NTuple{29, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{25, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{16, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{17, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{39, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{41, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{36, Int8}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Dictionaries.Indices{Vulkan.QueueFlag}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Int64, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt64, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Vulkan.QueueFlag, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.iterate), Array{Union{}, 1}})
precompile(Tuple{typeof(Vulkan.core_type), Type{Vulkan._PhysicalDeviceProperties2}})
precompile(Tuple{Type{Ptr{VulkanCore.LibVulkan.VkPhysicalDeviceProperties2}}, Ptr{Nothing}})
precompile(Tuple{typeof(Vulkan.structure_type), Type{VulkanCore.LibVulkan.VkPhysicalDeviceProperties2}})
precompile(Tuple{typeof(ConstructionBase.setproperties), VulkanCore.LibVulkan.VkPhysicalDeviceProperties2, NamedTuple{(:sType, :pNext), Tuple{VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}}}})
precompile(Tuple{Type{Vulkan._PhysicalDeviceProperties2}, VulkanCore.LibVulkan.VkPhysicalDeviceProperties2, Array{Any, 1}})
precompile(Tuple{Type{Ref{T} where T}, VulkanCore.LibVulkan.VkPhysicalDeviceProperties2})
precompile(Tuple{typeof(VulkanCore.LibVulkan.vkGetPhysicalDeviceProperties2), Vulkan.PhysicalDevice, Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceProperties2}, Ptr{Nothing}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, Vulkan.DeviceQueueCreateFlag}}, Type{Vulkan._DeviceQueueCreateInfo}, UInt32, Array{Float32, 1}})
precompile(Tuple{Type{NamedTuple{(:next, :flags, :enabled_features), T} where T<:Tuple}, Tuple{Vulkan.PhysicalDeviceFeatures2, UInt32, Ptr{Nothing}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags, :enabled_features), Tuple{Vulkan.PhysicalDeviceFeatures2, UInt32, Ptr{Nothing}}}, Type{Vulkan._DeviceCreateInfo}, Array{Vulkan._DeviceQueueCreateInfo, 1}, Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Vulkan._PhysicalDeviceFeatures2}, Vulkan.PhysicalDeviceFeatures2})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next,), Tuple{Vulkan.PhysicalDeviceVulkan13Features}}, Type{Vulkan._PhysicalDeviceFeatures2}, Vulkan._PhysicalDeviceFeatures})
precompile(Tuple{typeof(Base.convert), Type{Vulkan._PhysicalDeviceVulkan13Features}, Vulkan.PhysicalDeviceVulkan13Features})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next,), Tuple{Vulkan.PhysicalDeviceVulkan12Features}}, Type{Vulkan._PhysicalDeviceVulkan13Features}, Vararg{Bool, 15}})
precompile(Tuple{typeof(Base.convert), Type{Vulkan._PhysicalDeviceVulkan12Features}, Vulkan.PhysicalDeviceVulkan12Features})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next,), Tuple{Vulkan.PhysicalDeviceVulkan11Features}}, Type{Vulkan._PhysicalDeviceVulkan12Features}, Vararg{Bool, 47}})
precompile(Tuple{typeof(Base.convert), Type{Vulkan._PhysicalDeviceVulkan11Features}, Vulkan.PhysicalDeviceVulkan11Features})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next,), Tuple{Ptr{Nothing}}}, Type{Vulkan._PhysicalDeviceVulkan11Features}, Vararg{Bool, 12}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Vulkan._PhysicalDeviceVulkan11Features})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Features}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, Vararg{Bool, 47}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Vulkan._PhysicalDeviceVulkan12Features})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan13Features}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, Vararg{Bool, 15}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Vulkan._PhysicalDeviceVulkan13Features})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Vulkan._PhysicalDeviceFeatures2})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceFeatures2}})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkDeviceCreateInfo}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, UInt32, Int64, Ptr{VulkanCore.LibVulkan.VkDeviceQueueCreateInfo}, Int64, Ptr{Base.Cstring}, Int64, Ptr{Base.Cstring}, Ptr{VulkanCore.LibVulkan.VkPhysicalDeviceFeatures}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.Device, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.RefValue{Module}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{Vulkan.PropertyCondition, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}}}, Type{DataType}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.RefValue{Module}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{Vulkan.PropertyCondition, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.unique), Array{DataType, 1}})
precompile(Tuple{typeof(Vulkan.get_physical_device_properties_2), Vulkan.PhysicalDevice, Type, Type})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{DataType, DataType}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Vulkan.intermediate_type), Tuple{Tuple{DataType, DataType}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Vulkan.intermediate_type), Tuple{Tuple{DataType, DataType}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Vulkan.intermediate_type), Tuple{Tuple{DataType, DataType}}}})
precompile(Tuple{typeof(Vulkan.intermediate_type), Type{Vulkan.PhysicalDeviceVulkan11Properties}})
precompile(Tuple{typeof(Vulkan.intermediate_type), Type{Vulkan.PhysicalDeviceVulkan12Properties}})
precompile(Tuple{typeof(Vulkan._get_physical_device_properties_2), Vulkan.PhysicalDevice, Type, Type})
precompile(Tuple{typeof(Vulkan.core_type), Type{Vulkan._PhysicalDeviceVulkan11Properties}})
precompile(Tuple{Type{Ref{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Properties}}})
precompile(Tuple{typeof(Vulkan.core_type), Type{Vulkan._PhysicalDeviceVulkan12Properties}})
precompile(Tuple{Type{Ref{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties}}})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Properties}})
precompile(Tuple{Type{Ptr{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Properties}}, Ptr{Nothing}})
precompile(Tuple{typeof(Vulkan.structure_type), Type{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Properties}})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties}})
precompile(Tuple{Type{Ptr{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties}}, Ptr{Nothing}})
precompile(Tuple{typeof(Vulkan.structure_type), Type{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties}})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", NTuple{54, Symbol}})
precompile(Tuple{typeof(ConstructionBase.setproperties), VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties, NamedTuple{(:sType, :pNext), Tuple{VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}}}})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, VulkanCore.LibVulkan.VkDriverId, NTuple{256, Int8}, NTuple{256, Int8}, VulkanCore.LibVulkan.VkConformanceVersion, VulkanCore.LibVulkan.VkShaderFloatControlsIndependence, VulkanCore.LibVulkan.VkShaderFloatControlsIndependence, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt64, UInt32})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties}, VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties}})
precompile(Tuple{typeof(ConstructionBase.setproperties), VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Properties, NamedTuple{(:sType, :pNext), Tuple{VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}}}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Properties}, VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Properties})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Properties}})
precompile(Tuple{typeof(Vulkan.core_type), Type{Vulkan.PhysicalDeviceVulkan11Properties}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan11Properties}, VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Properties, Type})
precompile(Tuple{typeof(Vulkan.core_type), Type{Vulkan.PhysicalDeviceVulkan12Properties}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan12Properties}, VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties})
precompile(Tuple{typeof(Base.collect), NTuple{6, Int8}})
precompile(Tuple{typeof(Base.collect), NTuple{9, Int8}})
precompile(Tuple{Type{NamedTuple{(:next, :features), T} where T<:Tuple}, Tuple{Vulkan.PhysicalDeviceVulkan13Features, Vulkan.PhysicalDeviceFeatures}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:next, :features), Tuple{Vulkan.PhysicalDeviceVulkan13Features, Vulkan.PhysicalDeviceFeatures}}, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :features), Tuple{Ptr{Nothing}, Vulkan.PhysicalDeviceFeatures}}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceFeatures2}, Ptr{Nothing}, Vulkan.PhysicalDeviceFeatures})
precompile(Tuple{typeof(Base.:(!=)), Vulkan.PhysicalDeviceVulkan13Features, Ptr{Nothing}})
precompile(Tuple{typeof(ConstructionBase.setproperties), Vulkan.PhysicalDeviceVulkan13Features, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{Type{NamedTuple{(:next, :robust_image_access, :inline_uniform_block, :descriptor_binding_inline_uniform_block_update_after_bind, :pipeline_creation_cache_control, :private_data, :shader_demote_to_helper_invocation, :shader_terminate_invocation, :subgroup_size_control, :compute_full_subgroups, :synchronization2, :texture_compression_astc_hdr, :shader_zero_initialize_workgroup_memory, :dynamic_rendering, :shader_integer_dot_product, :maintenance4), T} where T<:Tuple}, Tuple{Vulkan.PhysicalDeviceVulkan12Features, Vararg{Bool, 15}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:next, :robust_image_access, :inline_uniform_block, :descriptor_binding_inline_uniform_block_update_after_bind, :pipeline_creation_cache_control, :private_data, :shader_demote_to_helper_invocation, :shader_terminate_invocation, :subgroup_size_control, :compute_full_subgroups, :synchronization2, :texture_compression_astc_hdr, :shader_zero_initialize_workgroup_memory, :dynamic_rendering, :shader_integer_dot_product, :maintenance4), Tuple{Vulkan.PhysicalDeviceVulkan12Features, Vararg{Bool, 15}}}, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :robust_image_access, :inline_uniform_block, :descriptor_binding_inline_uniform_block_update_after_bind, :pipeline_creation_cache_control, :private_data, :shader_demote_to_helper_invocation, :shader_terminate_invocation, :subgroup_size_control, :compute_full_subgroups, :synchronization2, :texture_compression_astc_hdr, :shader_zero_initialize_workgroup_memory, :dynamic_rendering, :shader_integer_dot_product, :maintenance4), Tuple{Ptr{Nothing}, Vararg{Bool, 15}}}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan13Features}, Ptr{Nothing}, Vararg{Bool, 15}})
precompile(Tuple{typeof(Base.getproperty), Vulkan.PhysicalDeviceVulkan13Features, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Vulkan.PhysicalDeviceVulkan12Features, Ptr{Nothing}})
precompile(Tuple{typeof(ConstructionBase.setproperties), Vulkan.PhysicalDeviceVulkan12Features, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{Type{NamedTuple{(:next, :sampler_mirror_clamp_to_edge, :draw_indirect_count, :storage_buffer_8_bit_access, :uniform_and_storage_buffer_8_bit_access, :storage_push_constant_8, :shader_buffer_int_64_atomics, :shader_shared_int_64_atomics, :shader_float_16, :shader_int_8, :descriptor_indexing, :shader_input_attachment_array_dynamic_indexing, :shader_uniform_texel_buffer_array_dynamic_indexing, :shader_storage_texel_buffer_array_dynamic_indexing, :shader_uniform_buffer_array_non_uniform_indexing, :shader_sampled_image_array_non_uniform_indexing, :shader_storage_buffer_array_non_uniform_indexing, :shader_storage_image_array_non_uniform_indexing, :shader_input_attachment_array_non_uniform_indexing, :shader_uniform_texel_buffer_array_non_uniform_indexing, :shader_storage_texel_buffer_array_non_uniform_indexing, :descriptor_binding_uniform_buffer_update_after_bind, :descriptor_binding_sampled_image_update_after_bind, :descriptor_binding_storage_image_update_after_bind, :descriptor_binding_storage_buffer_update_after_bind, :descriptor_binding_uniform_texel_buffer_update_after_bind, :descriptor_binding_storage_texel_buffer_update_after_bind, :descriptor_binding_update_unused_while_pending, :descriptor_binding_partially_bound, :descriptor_binding_variable_descriptor_count, :runtime_descriptor_array, :sampler_filter_minmax, :scalar_block_layout, :imageless_framebuffer, :uniform_buffer_standard_layout, :shader_subgroup_extended_types, :separate_depth_stencil_layouts, :host_query_reset, :timeline_semaphore, :buffer_device_address, :buffer_device_address_capture_replay, :buffer_device_address_multi_device, :vulkan_memory_model, :vulkan_memory_model_device_scope, :vulkan_memory_model_availability_visibility_chains, :shader_output_viewport_index, :shader_output_layer, :subgroup_broadcast_dynamic_id), T} where T<:Tuple}, Tuple{Vulkan.PhysicalDeviceVulkan11Features, Vararg{Bool, 47}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:next, :sampler_mirror_clamp_to_edge, :draw_indirect_count, :storage_buffer_8_bit_access, :uniform_and_storage_buffer_8_bit_access, :storage_push_constant_8, :shader_buffer_int_64_atomics, :shader_shared_int_64_atomics, :shader_float_16, :shader_int_8, :descriptor_indexing, :shader_input_attachment_array_dynamic_indexing, :shader_uniform_texel_buffer_array_dynamic_indexing, :shader_storage_texel_buffer_array_dynamic_indexing, :shader_uniform_buffer_array_non_uniform_indexing, :shader_sampled_image_array_non_uniform_indexing, :shader_storage_buffer_array_non_uniform_indexing, :shader_storage_image_array_non_uniform_indexing, :shader_input_attachment_array_non_uniform_indexing, :shader_uniform_texel_buffer_array_non_uniform_indexing, :shader_storage_texel_buffer_array_non_uniform_indexing, :descriptor_binding_uniform_buffer_update_after_bind, :descriptor_binding_sampled_image_update_after_bind, :descriptor_binding_storage_image_update_after_bind, :descriptor_binding_storage_buffer_update_after_bind, :descriptor_binding_uniform_texel_buffer_update_after_bind, :descriptor_binding_storage_texel_buffer_update_after_bind, :descriptor_binding_update_unused_while_pending, :descriptor_binding_partially_bound, :descriptor_binding_variable_descriptor_count, :runtime_descriptor_array, :sampler_filter_minmax, :scalar_block_layout, :imageless_framebuffer, :uniform_buffer_standard_layout, :shader_subgroup_extended_types, :separate_depth_stencil_layouts, :host_query_reset, :timeline_semaphore, :buffer_device_address, :buffer_device_address_capture_replay, :buffer_device_address_multi_device, :vulkan_memory_model, :vulkan_memory_model_device_scope, :vulkan_memory_model_availability_visibility_chains, :shader_output_viewport_index, :shader_output_layer, :subgroup_broadcast_dynamic_id), Tuple{Vulkan.PhysicalDeviceVulkan11Features, Vararg{Bool, 47}}}, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{typeof(ConstructionBase.validate_setproperties_result), NamedTuple{(:next, :sampler_mirror_clamp_to_edge, :draw_indirect_count, :storage_buffer_8_bit_access, :uniform_and_storage_buffer_8_bit_access, :storage_push_constant_8, :shader_buffer_int_64_atomics, :shader_shared_int_64_atomics, :shader_float_16, :shader_int_8, :descriptor_indexing, :shader_input_attachment_array_dynamic_indexing, :shader_uniform_texel_buffer_array_dynamic_indexing, :shader_storage_texel_buffer_array_dynamic_indexing, :shader_uniform_buffer_array_non_uniform_indexing, :shader_sampled_image_array_non_uniform_indexing, :shader_storage_buffer_array_non_uniform_indexing, :shader_storage_image_array_non_uniform_indexing, :shader_input_attachment_array_non_uniform_indexing, :shader_uniform_texel_buffer_array_non_uniform_indexing, :shader_storage_texel_buffer_array_non_uniform_indexing, :descriptor_binding_uniform_buffer_update_after_bind, :descriptor_binding_sampled_image_update_after_bind, :descriptor_binding_storage_image_update_after_bind, :descriptor_binding_storage_buffer_update_after_bind, :descriptor_binding_uniform_texel_buffer_update_after_bind, :descriptor_binding_storage_texel_buffer_update_after_bind, :descriptor_binding_update_unused_while_pending, :descriptor_binding_partially_bound, :descriptor_binding_variable_descriptor_count, :runtime_descriptor_array, :sampler_filter_minmax, :scalar_block_layout, :imageless_framebuffer, :uniform_buffer_standard_layout, :shader_subgroup_extended_types, :separate_depth_stencil_layouts, :host_query_reset, :timeline_semaphore, :buffer_device_address, :buffer_device_address_capture_replay, :buffer_device_address_multi_device, :vulkan_memory_model, :vulkan_memory_model_device_scope, :vulkan_memory_model_availability_visibility_chains, :shader_output_viewport_index, :shader_output_layer, :subgroup_broadcast_dynamic_id), Tuple{Ptr{Nothing}, Vararg{Bool, 47}}}, NamedTuple{(:next, :sampler_mirror_clamp_to_edge, :draw_indirect_count, :storage_buffer_8_bit_access, :uniform_and_storage_buffer_8_bit_access, :storage_push_constant_8, :shader_buffer_int_64_atomics, :shader_shared_int_64_atomics, :shader_float_16, :shader_int_8, :descriptor_indexing, :shader_input_attachment_array_dynamic_indexing, :shader_uniform_texel_buffer_array_dynamic_indexing, :shader_storage_texel_buffer_array_dynamic_indexing, :shader_uniform_buffer_array_non_uniform_indexing, :shader_sampled_image_array_non_uniform_indexing, :shader_storage_buffer_array_non_uniform_indexing, :shader_storage_image_array_non_uniform_indexing, :shader_input_attachment_array_non_uniform_indexing, :shader_uniform_texel_buffer_array_non_uniform_indexing, :shader_storage_texel_buffer_array_non_uniform_indexing, :descriptor_binding_uniform_buffer_update_after_bind, :descriptor_binding_sampled_image_update_after_bind, :descriptor_binding_storage_image_update_after_bind, :descriptor_binding_storage_buffer_update_after_bind, :descriptor_binding_uniform_texel_buffer_update_after_bind, :descriptor_binding_storage_texel_buffer_update_after_bind, :descriptor_binding_update_unused_while_pending, :descriptor_binding_partially_bound, :descriptor_binding_variable_descriptor_count, :runtime_descriptor_array, :sampler_filter_minmax, :scalar_block_layout, :imageless_framebuffer, :uniform_buffer_standard_layout, :shader_subgroup_extended_types, :separate_depth_stencil_layouts, :host_query_reset, :timeline_semaphore, :buffer_device_address, :buffer_device_address_capture_replay, :buffer_device_address_multi_device, :vulkan_memory_model, :vulkan_memory_model_device_scope, :vulkan_memory_model_availability_visibility_chains, :shader_output_viewport_index, :shader_output_layer, :subgroup_broadcast_dynamic_id), Tuple{Vulkan.PhysicalDeviceVulkan11Features, Vararg{Bool, 47}}}, Vulkan.PhysicalDeviceVulkan12Features, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :sampler_mirror_clamp_to_edge, :draw_indirect_count, :storage_buffer_8_bit_access, :uniform_and_storage_buffer_8_bit_access, :storage_push_constant_8, :shader_buffer_int_64_atomics, :shader_shared_int_64_atomics, :shader_float_16, :shader_int_8, :descriptor_indexing, :shader_input_attachment_array_dynamic_indexing, :shader_uniform_texel_buffer_array_dynamic_indexing, :shader_storage_texel_buffer_array_dynamic_indexing, :shader_uniform_buffer_array_non_uniform_indexing, :shader_sampled_image_array_non_uniform_indexing, :shader_storage_buffer_array_non_uniform_indexing, :shader_storage_image_array_non_uniform_indexing, :shader_input_attachment_array_non_uniform_indexing, :shader_uniform_texel_buffer_array_non_uniform_indexing, :shader_storage_texel_buffer_array_non_uniform_indexing, :descriptor_binding_uniform_buffer_update_after_bind, :descriptor_binding_sampled_image_update_after_bind, :descriptor_binding_storage_image_update_after_bind, :descriptor_binding_storage_buffer_update_after_bind, :descriptor_binding_uniform_texel_buffer_update_after_bind, :descriptor_binding_storage_texel_buffer_update_after_bind, :descriptor_binding_update_unused_while_pending, :descriptor_binding_partially_bound, :descriptor_binding_variable_descriptor_count, :runtime_descriptor_array, :sampler_filter_minmax, :scalar_block_layout, :imageless_framebuffer, :uniform_buffer_standard_layout, :shader_subgroup_extended_types, :separate_depth_stencil_layouts, :host_query_reset, :timeline_semaphore, :buffer_device_address, :buffer_device_address_capture_replay, :buffer_device_address_multi_device, :vulkan_memory_model, :vulkan_memory_model_device_scope, :vulkan_memory_model_availability_visibility_chains, :shader_output_viewport_index, :shader_output_layer, :subgroup_broadcast_dynamic_id), Tuple{Ptr{Nothing}, Vararg{Bool, 47}}}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan12Features}, Ptr{Nothing}, Vararg{Bool, 47}})
precompile(Tuple{typeof(Base.getproperty), Vulkan.PhysicalDeviceVulkan12Features, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Vulkan.PhysicalDeviceVulkan11Features, Ptr{Nothing}})
precompile(Tuple{typeof(Base.getproperty), Vulkan.PhysicalDeviceVulkan11Features, Symbol})
precompile(Tuple{Lava.var"#100#106", Vulkan.PhysicalDeviceFeatures2})
precompile(Tuple{Type{Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceFeatures2}}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceFeatures2}, Symbol, Vulkan.PhysicalDeviceFeatures2})
precompile(Tuple{typeof(Dictionaries.__dictionary), typeof(Base.first), typeof(Base.last), Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceFeatures2}, Base.Generator{Array{Any, 1}, Lava.var"#100#106"}, Int64})
precompile(Tuple{Lava.var"#100#106", Vulkan.PhysicalDeviceVulkan13Features})
precompile(Tuple{typeof(Base.promote_type), Type{Vulkan.PhysicalDeviceVulkan13Features}, Type{Vulkan.PhysicalDeviceFeatures2}})
precompile(Tuple{typeof(Base.promote_type), Type{Vulkan.PhysicalDeviceFeatures2}, Type{Vulkan.PhysicalDeviceVulkan13Features}})
precompile(Tuple{typeof(Base.copy), Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceFeatures2}, Type{Vulkan.HighLevelStruct}})
precompile(Tuple{typeof(Dictionaries.gettoken!), Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}, Symbol})
precompile(Tuple{typeof(Dictionaries.settokenvalue!), Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}, Tuple{Int64, Int64}, Vulkan.PhysicalDeviceVulkan13Features})
precompile(Tuple{typeof(Dictionaries.__dictionary), typeof(Base.first), typeof(Base.last), Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}, Base.Generator{Array{Any, 1}, Lava.var"#100#106"}, Int64})
precompile(Tuple{Lava.var"#100#106", Vulkan.PhysicalDeviceVulkan12Features})
precompile(Tuple{Lava.var"#100#106", Vulkan.PhysicalDeviceVulkan11Features})
precompile(Tuple{Type{NamedTuple{(:next, :properties), T} where T<:Tuple}, Tuple{Vulkan.PhysicalDeviceVulkan11Properties, Vulkan.PhysicalDeviceProperties}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:next, :properties), Tuple{Vulkan.PhysicalDeviceVulkan11Properties, Vulkan.PhysicalDeviceProperties}}, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :properties), Tuple{Ptr{Nothing}, Vulkan.PhysicalDeviceProperties}}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceProperties2}, Ptr{Nothing}, Vulkan.PhysicalDeviceProperties})
precompile(Tuple{typeof(Base.:(!=)), Vulkan.PhysicalDeviceVulkan11Properties, Ptr{Nothing}})
precompile(Tuple{typeof(ConstructionBase.setproperties), Vulkan.PhysicalDeviceVulkan11Properties, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{Type{NamedTuple{(:next, :device_uuid, :driver_uuid, :device_luid, :device_node_mask, :device_luid_valid, :subgroup_size, :subgroup_supported_stages, :subgroup_supported_operations, :subgroup_quad_operations_in_all_stages, :point_clipping_behavior, :max_multiview_view_count, :max_multiview_instance_index, :protected_no_fault, :max_per_set_descriptors, :max_memory_allocation_size), T} where T<:Tuple}, Tuple{Vulkan.PhysicalDeviceVulkan12Properties, NTuple{16, UInt8}, NTuple{16, UInt8}, NTuple{8, UInt8}, UInt32, Bool, UInt32, Vulkan.ShaderStageFlag, Vulkan.SubgroupFeatureFlag, Bool, Vulkan.PointClippingBehavior, UInt32, UInt32, Bool, UInt32, UInt64}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:next, :device_uuid, :driver_uuid, :device_luid, :device_node_mask, :device_luid_valid, :subgroup_size, :subgroup_supported_stages, :subgroup_supported_operations, :subgroup_quad_operations_in_all_stages, :point_clipping_behavior, :max_multiview_view_count, :max_multiview_instance_index, :protected_no_fault, :max_per_set_descriptors, :max_memory_allocation_size), Tuple{Vulkan.PhysicalDeviceVulkan12Properties, NTuple{16, UInt8}, NTuple{16, UInt8}, NTuple{8, UInt8}, UInt32, Bool, UInt32, Vulkan.ShaderStageFlag, Vulkan.SubgroupFeatureFlag, Bool, Vulkan.PointClippingBehavior, UInt32, UInt32, Bool, UInt32, UInt64}}, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :device_uuid, :driver_uuid, :device_luid, :device_node_mask, :device_luid_valid, :subgroup_size, :subgroup_supported_stages, :subgroup_supported_operations, :subgroup_quad_operations_in_all_stages, :point_clipping_behavior, :max_multiview_view_count, :max_multiview_instance_index, :protected_no_fault, :max_per_set_descriptors, :max_memory_allocation_size), Tuple{Ptr{Nothing}, NTuple{16, UInt8}, NTuple{16, UInt8}, NTuple{8, UInt8}, UInt32, Bool, UInt32, Vulkan.ShaderStageFlag, Vulkan.SubgroupFeatureFlag, Bool, Vulkan.PointClippingBehavior, UInt32, UInt32, Bool, UInt32, UInt64}}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan11Properties}, Ptr{Nothing}, NTuple{16, UInt8}, NTuple{16, UInt8}, NTuple{8, UInt8}, UInt32, Bool, UInt32, Vulkan.ShaderStageFlag, Vulkan.SubgroupFeatureFlag, Bool, Vulkan.PointClippingBehavior, UInt32, UInt32, Bool, UInt32, UInt64})
precompile(Tuple{typeof(Base.getproperty), Vulkan.PhysicalDeviceVulkan11Properties, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Vulkan.PhysicalDeviceVulkan12Properties, Ptr{Nothing}})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", NTuple{53, Symbol}})
precompile(Tuple{typeof(ConstructionBase.setproperties), Vulkan.PhysicalDeviceVulkan12Properties, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{Type{NamedTuple{(:next, :driver_id, :driver_name, :driver_info, :conformance_version, :denorm_behavior_independence, :rounding_mode_independence, :shader_signed_zero_inf_nan_preserve_float_16, :shader_signed_zero_inf_nan_preserve_float_32, :shader_signed_zero_inf_nan_preserve_float_64, :shader_denorm_preserve_float_16, :shader_denorm_preserve_float_32, :shader_denorm_preserve_float_64, :shader_denorm_flush_to_zero_float_16, :shader_denorm_flush_to_zero_float_32, :shader_denorm_flush_to_zero_float_64, :shader_rounding_mode_rte_float_16, :shader_rounding_mode_rte_float_32, :shader_rounding_mode_rte_float_64, :shader_rounding_mode_rtz_float_16, :shader_rounding_mode_rtz_float_32, :shader_rounding_mode_rtz_float_64, :max_update_after_bind_descriptors_in_all_pools, :shader_uniform_buffer_array_non_uniform_indexing_native, :shader_sampled_image_array_non_uniform_indexing_native, :shader_storage_buffer_array_non_uniform_indexing_native, :shader_storage_image_array_non_uniform_indexing_native, :shader_input_attachment_array_non_uniform_indexing_native, :robust_buffer_access_update_after_bind, :quad_divergent_implicit_lod, :max_per_stage_descriptor_update_after_bind_samplers, :max_per_stage_descriptor_update_after_bind_uniform_buffers, :max_per_stage_descriptor_update_after_bind_storage_buffers, :max_per_stage_descriptor_update_after_bind_sampled_images, :max_per_stage_descriptor_update_after_bind_storage_images, :max_per_stage_descriptor_update_after_bind_input_attachments, :max_per_stage_update_after_bind_resources, :max_descriptor_set_update_after_bind_samplers, :max_descriptor_set_update_after_bind_uniform_buffers, :max_descriptor_set_update_after_bind_uniform_buffers_dynamic, :max_descriptor_set_update_after_bind_storage_buffers, :max_descriptor_set_update_after_bind_storage_buffers_dynamic, :max_descriptor_set_update_after_bind_sampled_images, :max_descriptor_set_update_after_bind_storage_images, :max_descriptor_set_update_after_bind_input_attachments, :supported_depth_resolve_modes, :supported_stencil_resolve_modes, :independent_resolve_none, :independent_resolve, :filter_minmax_single_component_formats, :filter_minmax_image_component_mapping, :max_timeline_semaphore_value_difference, :framebuffer_integer_color_sample_counts), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.DriverId, String, String, Vulkan.ConformanceVersion, Vulkan.ShaderFloatControlsIndependence, Vulkan.ShaderFloatControlsIndependence, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, UInt32, Bool, Bool, Bool, Bool, Bool, Bool, Bool, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, Vulkan.ResolveModeFlag, Vulkan.ResolveModeFlag, Bool, Bool, Bool, Bool, UInt64, Vulkan.SampleCountFlag}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:next, :driver_id, :driver_name, :driver_info, :conformance_version, :denorm_behavior_independence, :rounding_mode_independence, :shader_signed_zero_inf_nan_preserve_float_16, :shader_signed_zero_inf_nan_preserve_float_32, :shader_signed_zero_inf_nan_preserve_float_64, :shader_denorm_preserve_float_16, :shader_denorm_preserve_float_32, :shader_denorm_preserve_float_64, :shader_denorm_flush_to_zero_float_16, :shader_denorm_flush_to_zero_float_32, :shader_denorm_flush_to_zero_float_64, :shader_rounding_mode_rte_float_16, :shader_rounding_mode_rte_float_32, :shader_rounding_mode_rte_float_64, :shader_rounding_mode_rtz_float_16, :shader_rounding_mode_rtz_float_32, :shader_rounding_mode_rtz_float_64, :max_update_after_bind_descriptors_in_all_pools, :shader_uniform_buffer_array_non_uniform_indexing_native, :shader_sampled_image_array_non_uniform_indexing_native, :shader_storage_buffer_array_non_uniform_indexing_native, :shader_storage_image_array_non_uniform_indexing_native, :shader_input_attachment_array_non_uniform_indexing_native, :robust_buffer_access_update_after_bind, :quad_divergent_implicit_lod, :max_per_stage_descriptor_update_after_bind_samplers, :max_per_stage_descriptor_update_after_bind_uniform_buffers, :max_per_stage_descriptor_update_after_bind_storage_buffers, :max_per_stage_descriptor_update_after_bind_sampled_images, :max_per_stage_descriptor_update_after_bind_storage_images, :max_per_stage_descriptor_update_after_bind_input_attachments, :max_per_stage_update_after_bind_resources, :max_descriptor_set_update_after_bind_samplers, :max_descriptor_set_update_after_bind_uniform_buffers, :max_descriptor_set_update_after_bind_uniform_buffers_dynamic, :max_descriptor_set_update_after_bind_storage_buffers, :max_descriptor_set_update_after_bind_storage_buffers_dynamic, :max_descriptor_set_update_after_bind_sampled_images, :max_descriptor_set_update_after_bind_storage_images, :max_descriptor_set_update_after_bind_input_attachments, :supported_depth_resolve_modes, :supported_stencil_resolve_modes, :independent_resolve_none, :independent_resolve, :filter_minmax_single_component_formats, :filter_minmax_image_component_mapping, :max_timeline_semaphore_value_difference, :framebuffer_integer_color_sample_counts), Tuple{Ptr{Nothing}, Vulkan.DriverId, String, String, Vulkan.ConformanceVersion, Vulkan.ShaderFloatControlsIndependence, Vulkan.ShaderFloatControlsIndependence, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, UInt32, Bool, Bool, Bool, Bool, Bool, Bool, Bool, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, Vulkan.ResolveModeFlag, Vulkan.ResolveModeFlag, Bool, Bool, Bool, Bool, UInt64, Vulkan.SampleCountFlag}}, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{typeof(ConstructionBase.validate_setproperties_result), NamedTuple{(:next, :driver_id, :driver_name, :driver_info, :conformance_version, :denorm_behavior_independence, :rounding_mode_independence, :shader_signed_zero_inf_nan_preserve_float_16, :shader_signed_zero_inf_nan_preserve_float_32, :shader_signed_zero_inf_nan_preserve_float_64, :shader_denorm_preserve_float_16, :shader_denorm_preserve_float_32, :shader_denorm_preserve_float_64, :shader_denorm_flush_to_zero_float_16, :shader_denorm_flush_to_zero_float_32, :shader_denorm_flush_to_zero_float_64, :shader_rounding_mode_rte_float_16, :shader_rounding_mode_rte_float_32, :shader_rounding_mode_rte_float_64, :shader_rounding_mode_rtz_float_16, :shader_rounding_mode_rtz_float_32, :shader_rounding_mode_rtz_float_64, :max_update_after_bind_descriptors_in_all_pools, :shader_uniform_buffer_array_non_uniform_indexing_native, :shader_sampled_image_array_non_uniform_indexing_native, :shader_storage_buffer_array_non_uniform_indexing_native, :shader_storage_image_array_non_uniform_indexing_native, :shader_input_attachment_array_non_uniform_indexing_native, :robust_buffer_access_update_after_bind, :quad_divergent_implicit_lod, :max_per_stage_descriptor_update_after_bind_samplers, :max_per_stage_descriptor_update_after_bind_uniform_buffers, :max_per_stage_descriptor_update_after_bind_storage_buffers, :max_per_stage_descriptor_update_after_bind_sampled_images, :max_per_stage_descriptor_update_after_bind_storage_images, :max_per_stage_descriptor_update_after_bind_input_attachments, :max_per_stage_update_after_bind_resources, :max_descriptor_set_update_after_bind_samplers, :max_descriptor_set_update_after_bind_uniform_buffers, :max_descriptor_set_update_after_bind_uniform_buffers_dynamic, :max_descriptor_set_update_after_bind_storage_buffers, :max_descriptor_set_update_after_bind_storage_buffers_dynamic, :max_descriptor_set_update_after_bind_sampled_images, :max_descriptor_set_update_after_bind_storage_images, :max_descriptor_set_update_after_bind_input_attachments, :supported_depth_resolve_modes, :supported_stencil_resolve_modes, :independent_resolve_none, :independent_resolve, :filter_minmax_single_component_formats, :filter_minmax_image_component_mapping, :max_timeline_semaphore_value_difference, :framebuffer_integer_color_sample_counts), Tuple{Ptr{Nothing}, Vulkan.DriverId, String, String, Vulkan.ConformanceVersion, Vulkan.ShaderFloatControlsIndependence, Vulkan.ShaderFloatControlsIndependence, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, UInt32, Bool, Bool, Bool, Bool, Bool, Bool, Bool, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, Vulkan.ResolveModeFlag, Vulkan.ResolveModeFlag, Bool, Bool, Bool, Bool, UInt64, Vulkan.SampleCountFlag}}, NamedTuple{(:next, :driver_id, :driver_name, :driver_info, :conformance_version, :denorm_behavior_independence, :rounding_mode_independence, :shader_signed_zero_inf_nan_preserve_float_16, :shader_signed_zero_inf_nan_preserve_float_32, :shader_signed_zero_inf_nan_preserve_float_64, :shader_denorm_preserve_float_16, :shader_denorm_preserve_float_32, :shader_denorm_preserve_float_64, :shader_denorm_flush_to_zero_float_16, :shader_denorm_flush_to_zero_float_32, :shader_denorm_flush_to_zero_float_64, :shader_rounding_mode_rte_float_16, :shader_rounding_mode_rte_float_32, :shader_rounding_mode_rte_float_64, :shader_rounding_mode_rtz_float_16, :shader_rounding_mode_rtz_float_32, :shader_rounding_mode_rtz_float_64, :max_update_after_bind_descriptors_in_all_pools, :shader_uniform_buffer_array_non_uniform_indexing_native, :shader_sampled_image_array_non_uniform_indexing_native, :shader_storage_buffer_array_non_uniform_indexing_native, :shader_storage_image_array_non_uniform_indexing_native, :shader_input_attachment_array_non_uniform_indexing_native, :robust_buffer_access_update_after_bind, :quad_divergent_implicit_lod, :max_per_stage_descriptor_update_after_bind_samplers, :max_per_stage_descriptor_update_after_bind_uniform_buffers, :max_per_stage_descriptor_update_after_bind_storage_buffers, :max_per_stage_descriptor_update_after_bind_sampled_images, :max_per_stage_descriptor_update_after_bind_storage_images, :max_per_stage_descriptor_update_after_bind_input_attachments, :max_per_stage_update_after_bind_resources, :max_descriptor_set_update_after_bind_samplers, :max_descriptor_set_update_after_bind_uniform_buffers, :max_descriptor_set_update_after_bind_uniform_buffers_dynamic, :max_descriptor_set_update_after_bind_storage_buffers, :max_descriptor_set_update_after_bind_storage_buffers_dynamic, :max_descriptor_set_update_after_bind_sampled_images, :max_descriptor_set_update_after_bind_storage_images, :max_descriptor_set_update_after_bind_input_attachments, :supported_depth_resolve_modes, :supported_stencil_resolve_modes, :independent_resolve_none, :independent_resolve, :filter_minmax_single_component_formats, :filter_minmax_image_component_mapping, :max_timeline_semaphore_value_difference, :framebuffer_integer_color_sample_counts), Tuple{Ptr{Nothing}, Vulkan.DriverId, String, String, Vulkan.ConformanceVersion, Vulkan.ShaderFloatControlsIndependence, Vulkan.ShaderFloatControlsIndependence, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, UInt32, Bool, Bool, Bool, Bool, Bool, Bool, Bool, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, Vulkan.ResolveModeFlag, Vulkan.ResolveModeFlag, Bool, Bool, Bool, Bool, UInt64, Vulkan.SampleCountFlag}}, Vulkan.PhysicalDeviceVulkan12Properties, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :driver_id, :driver_name, :driver_info, :conformance_version, :denorm_behavior_independence, :rounding_mode_independence, :shader_signed_zero_inf_nan_preserve_float_16, :shader_signed_zero_inf_nan_preserve_float_32, :shader_signed_zero_inf_nan_preserve_float_64, :shader_denorm_preserve_float_16, :shader_denorm_preserve_float_32, :shader_denorm_preserve_float_64, :shader_denorm_flush_to_zero_float_16, :shader_denorm_flush_to_zero_float_32, :shader_denorm_flush_to_zero_float_64, :shader_rounding_mode_rte_float_16, :shader_rounding_mode_rte_float_32, :shader_rounding_mode_rte_float_64, :shader_rounding_mode_rtz_float_16, :shader_rounding_mode_rtz_float_32, :shader_rounding_mode_rtz_float_64, :max_update_after_bind_descriptors_in_all_pools, :shader_uniform_buffer_array_non_uniform_indexing_native, :shader_sampled_image_array_non_uniform_indexing_native, :shader_storage_buffer_array_non_uniform_indexing_native, :shader_storage_image_array_non_uniform_indexing_native, :shader_input_attachment_array_non_uniform_indexing_native, :robust_buffer_access_update_after_bind, :quad_divergent_implicit_lod, :max_per_stage_descriptor_update_after_bind_samplers, :max_per_stage_descriptor_update_after_bind_uniform_buffers, :max_per_stage_descriptor_update_after_bind_storage_buffers, :max_per_stage_descriptor_update_after_bind_sampled_images, :max_per_stage_descriptor_update_after_bind_storage_images, :max_per_stage_descriptor_update_after_bind_input_attachments, :max_per_stage_update_after_bind_resources, :max_descriptor_set_update_after_bind_samplers, :max_descriptor_set_update_after_bind_uniform_buffers, :max_descriptor_set_update_after_bind_uniform_buffers_dynamic, :max_descriptor_set_update_after_bind_storage_buffers, :max_descriptor_set_update_after_bind_storage_buffers_dynamic, :max_descriptor_set_update_after_bind_sampled_images, :max_descriptor_set_update_after_bind_storage_images, :max_descriptor_set_update_after_bind_input_attachments, :supported_depth_resolve_modes, :supported_stencil_resolve_modes, :independent_resolve_none, :independent_resolve, :filter_minmax_single_component_formats, :filter_minmax_image_component_mapping, :max_timeline_semaphore_value_difference, :framebuffer_integer_color_sample_counts), Tuple{Ptr{Nothing}, Vulkan.DriverId, String, String, Vulkan.ConformanceVersion, Vulkan.ShaderFloatControlsIndependence, Vulkan.ShaderFloatControlsIndependence, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, UInt32, Bool, Bool, Bool, Bool, Bool, Bool, Bool, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, Vulkan.ResolveModeFlag, Vulkan.ResolveModeFlag, Bool, Bool, Bool, Bool, UInt64, Vulkan.SampleCountFlag}}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan12Properties}, Ptr{Nothing}, Vulkan.DriverId, String, String, Vulkan.ConformanceVersion, Vulkan.ShaderFloatControlsIndependence, Vulkan.ShaderFloatControlsIndependence, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, UInt32, Bool, Bool, Bool, Bool, Bool, Bool, Bool, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, Vulkan.ResolveModeFlag, Vulkan.ResolveModeFlag, Bool, Bool, Bool, Bool, UInt64, Vulkan.SampleCountFlag})
precompile(Tuple{typeof(Base.getproperty), Vulkan.PhysicalDeviceVulkan12Properties, Symbol})
precompile(Tuple{Lava.var"#101#107", Vulkan.PhysicalDeviceProperties2})
precompile(Tuple{Type{Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceProperties2}}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceProperties2}, Symbol, Vulkan.PhysicalDeviceProperties2})
precompile(Tuple{typeof(Dictionaries.__dictionary), typeof(Base.first), typeof(Base.last), Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceProperties2}, Base.Generator{Array{Any, 1}, Lava.var"#101#107"}, Int64})
precompile(Tuple{Lava.var"#101#107", Vulkan.PhysicalDeviceVulkan11Properties})
precompile(Tuple{typeof(Base.promote_type), Type{Vulkan.PhysicalDeviceVulkan11Properties}, Type{Vulkan.PhysicalDeviceProperties2}})
precompile(Tuple{typeof(Base.promote_type), Type{Vulkan.PhysicalDeviceProperties2}, Type{Vulkan.PhysicalDeviceVulkan11Properties}})
precompile(Tuple{typeof(Base.copy), Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceProperties2}, Type{Vulkan.HighLevelStruct}})
precompile(Tuple{typeof(Dictionaries.settokenvalue!), Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}, Tuple{Int64, Int64}, Vulkan.PhysicalDeviceVulkan11Properties})
precompile(Tuple{typeof(Dictionaries.__dictionary), typeof(Base.first), typeof(Base.last), Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}, Base.Generator{Array{Any, 1}, Lava.var"#101#107"}, Int64})
precompile(Tuple{Lava.var"#101#107", Vulkan.PhysicalDeviceVulkan12Properties})
precompile(Tuple{typeof(Base.push!), Array{SPIRV.Capability, 1}, SPIRV.Capability})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Lava.var"#103#109"{Base.VersionNumber, Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}}, Array{Vulkan.FeatureCondition, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Vulkan.FeatureCondition, 1}, Lava.var"#103#109"{Base.VersionNumber, Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Lava.var"#104#110"{Base.VersionNumber, Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}}, Array{Vulkan.PropertyCondition, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Vulkan.PropertyCondition, 1}, Lava.var"#104#110"{Base.VersionNumber, Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}}}})
precompile(Tuple{typeof(Base.in), Vulkan.SubgroupFeatureFlag, Vulkan.SubgroupFeatureFlag})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.Fence, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Lava.Instance, Lava.Device}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Lava.Instance, Lava.Device}, Int64, Int64})
precompile(Tuple{typeof(Base.tryparse), Type{Bool}, String})
precompile(Tuple{typeof(Base.something), Bool, Bool})
precompile(Tuple{Type{Base.Iterators.Filter{Test.var"#16#21", Tuple{}}}, Function, Tuple{}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, Test.var"#16#21", Tuple{}})
precompile(Tuple{Type{Base.Generator{Base.Iterators.Filter{Test.var"#16#21", Tuple{}}, Test.var"#15#20"}}, Function, Base.Iterators.Filter{Test.var"#16#21", Tuple{}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Test.var"#15#20", Base.Iterators.Filter{Test.var"#16#21", Tuple{}}})
precompile(Tuple{typeof(Base._iterator_upper_bound), Base.Generator{Base.Iterators.Filter{Test.var"#16#21", Tuple{}}, Test.var"#15#20"}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{Test.var"#16#21", Tuple{}}, Test.var"#15#20"}})
precompile(Tuple{Type{Base.Iterators.Filter{Test.var"#18#23", Tuple{}}}, Function, Tuple{}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, Test.var"#18#23", Tuple{}})
precompile(Tuple{Type{Base.Generator{Base.Iterators.Filter{Test.var"#18#23", Tuple{}}, Test.var"#17#22"}}, Function, Base.Iterators.Filter{Test.var"#18#23", Tuple{}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Test.var"#17#22", Base.Iterators.Filter{Test.var"#18#23", Tuple{}}})
precompile(Tuple{typeof(Base._iterator_upper_bound), Base.Generator{Base.Iterators.Filter{Test.var"#18#23", Tuple{}}, Test.var"#17#22"}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{Test.var"#18#23", Tuple{}}, Test.var"#17#22"}})
precompile(Tuple{typeof(Base.filter), Function, Tuple{}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Union{}, 1}, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Union{}, 1}, Symbol}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Union{}, 1}})
precompile(Tuple{typeof(Test.get_test_result), Any, Any})
precompile(Tuple{typeof(Base.:(!=)), Char, Char})
precompile(Tuple{typeof(Base.length), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test._check_testset), Type, Expr})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.push!), Array{Test.AbstractTestSet, 1}, Test.DefaultTestSet})
precompile(Tuple{typeof(Base.copy), Random.TaskLocalRNG})
precompile(Tuple{typeof(Random.seed!), Array{UInt64, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Test.AbstractTestSet, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), Lava.Device, Symbol})
precompile(Tuple{typeof(Base.getproperty), Vulkan.Device, Symbol})
precompile(Tuple{typeof(Base.getproperty), SPIRV.SupportedFeatures, Symbol})
precompile(Tuple{typeof(Test.eval_test), Expr, Expr, LineNumberNode, Bool})
precompile(Tuple{typeof(Test.do_test), Test.ExecutionResult, Any})
precompile(Tuple{typeof(Base.isempty), Array{SPIRV.Capability, 1}})
precompile(Tuple{typeof(Base.in), SPIRV.Capability, Array{SPIRV.Capability, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Symbol, Symbol}, Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.map), Base.Iterators.var"#5#6", Tuple{Tuple{Symbol, Symbol}, Tuple{DataType, DataType}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Tuple{Symbol, Symbol}, Tuple{DataType, DataType}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Tuple{Symbol, Symbol}, Tuple{DataType, DataType}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.Iterators.zip), NTuple{55, Symbol}, NTuple{55, DataType}})
precompile(Tuple{typeof(Base.map), Base.Iterators.var"#5#6", Tuple{NTuple{55, Symbol}, NTuple{55, DataType}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{NTuple{55, Symbol}, NTuple{55, DataType}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{NTuple{55, Symbol}, NTuple{55, DataType}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Lava.spirv_features), Vulkan.PhysicalDevice, Base.VersionNumber, Array{Any, 1}, Vulkan.PhysicalDeviceFeatures2})
precompile(Tuple{Type{NamedTuple{(:next, :features), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.PhysicalDeviceFeatures}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:next, :features), Tuple{Ptr{Nothing}, Vulkan.PhysicalDeviceFeatures}}, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Lava.var"#103#109"{Base.VersionNumber, Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceFeatures2}}, Array{Vulkan.FeatureCondition, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Vulkan.FeatureCondition, 1}, Lava.var"#103#109"{Base.VersionNumber, Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceFeatures2}}}})
precompile(Tuple{typeof(Base.:(∉)), SPIRV.Capability, Array{SPIRV.Capability, 1}})
precompile(Tuple{typeof(Base.copy!), Random.TaskLocalRNG, Random.Xoshiro})
precompile(Tuple{typeof(Random.set_global_seed!), Array{UInt64, 1}})
precompile(Tuple{typeof(Base.pop!), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.PhysicalDevice}, Vulkan.PhysicalDevice})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.PhysicalDevice, typeof(Base.identity), Vulkan.Instance}})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.Instance, Vulkan.var"#1103#1104"{Ptr{Nothing}}, Nothing}})
precompile(Tuple{typeof(Test.finish), Test.DefaultTestSet})
precompile(Tuple{Type{Vulkan.BufferUsageFlag}, Int64})
precompile(Tuple{Type{Lava.BufferBlock{M} where M<:Lava.DenseMemory}, Lava.Device, Int64})
precompile(Tuple{Type{NamedTuple{(:next, :flags), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.BufferCreateFlag}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, Vulkan.BufferCreateFlag}}, Type{Vulkan._BufferCreateInfo}, UInt64, Vulkan.BufferUsageFlag, Vulkan.SharingMode, Array{UInt32, 1}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.Buffer, Vulkan.VulkanError}})
precompile(Tuple{Type{Ref{Lava.MemoryBlock}}})
precompile(Tuple{Type{Lava.BufferBlock{M} where M<:Lava.DenseMemory}, Vulkan.Buffer, Int64, Vulkan.BufferUsageFlag, Array{Int8, 1}, Vulkan.SharingMode, Base.RefValue{Lava.MemoryBlock}})
precompile(Tuple{typeof(Lava.isallocated), Lava.BufferBlock{Lava.MemoryBlock}})
precompile(Tuple{Type{Test.Returned}, Any, Any, LineNumberNode})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Vulkan.MemoryType, 1}}})
precompile(Tuple{Type{Base.BottomRF{typeof(Base._rf_findmax)}}, Function})
precompile(Tuple{typeof(Base.reduce_empty), Base.BottomRF{typeof(Base._rf_findmax)}, Type{Int64}})
precompile(Tuple{Type{NamedTuple{(:flags,), T} where T<:Tuple}, Tuple{Vulkan.MemoryAllocateFlag}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:flags,), Tuple{Vulkan.MemoryAllocateFlag}}, Type{Vulkan.MemoryAllocateFlagsInfo}, Int64})
precompile(Tuple{Type{NamedTuple{(:next,), T} where T<:Tuple}, Tuple{Vulkan.MemoryAllocateFlagsInfo}})
precompile(Tuple{typeof(Vulkan.CEnum.namemap), Type{Vulkan.Result}})
precompile(Tuple{typeof(Base.similar), Lava.BufferBlock{Lava.MemoryBlock}})
precompile(Tuple{typeof(Base.getproperty), Lava.BufferBlock{Lava.MemoryBlock}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Vulkan.SharingMode, Vulkan.SharingMode})
precompile(Tuple{typeof(Base.:(==)), Array{Int8, 1}, Array{Int8, 1}})
precompile(Tuple{typeof(Base.:(==)), Vulkan.BufferUsageFlag, Vulkan.BufferUsageFlag})
precompile(Tuple{typeof(Base.lastindex), Lava.BufferBlock{Lava.MemoryBlock}})
precompile(Tuple{typeof(Base.view), Lava.BufferBlock{Lava.MemoryBlock}, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.getproperty), Lava.SubBuffer{Lava.BufferBlock{Lava.MemoryBlock}}, Symbol})
precompile(Tuple{typeof(Lava.memory), Lava.SubBuffer{Lava.BufferBlock{Lava.MemoryBlock}}})
precompile(Tuple{Type{Test.Threw}, Any, Union{Nothing, Array{Any, 1}}, LineNumberNode})
precompile(Tuple{typeof(Test.do_test_throws), Test.ExecutionResult, Any, Any})
precompile(Tuple{typeof(Base.view), Lava.BufferBlock{Lava.MemoryBlock}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.size), Lava.BufferBlock{Lava.MemoryBlock}})
precompile(Tuple{Type{Lava.MemoryBlock}, Lava.Device, Int64, Int64, Lava.MemoryDomain})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Lava.var"#61#63"{Int64}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Lava.var"#61#63"{Int64}, Tuple{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.:(|)), Vulkan.MemoryPropertyFlag, Vulkan.MemoryPropertyFlag})
precompile(Tuple{typeof(Base.argmax), Lava.var"#62#64"{Base.Fix1{typeof(Lava.score), Lava.MemoryDomain}, NTuple{11, Vulkan.MemoryType}}, Array{Int64, 1}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next,), Tuple{Vulkan.MemoryAllocateFlagsInfo}}, Type{Vulkan.MemoryAllocateInfo}, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Vulkan._MemoryAllocateFlagsInfo}, Vulkan.MemoryAllocateFlagsInfo})
precompile(Tuple{Type{NamedTuple{(:next, :flags), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.MemoryAllocateFlag}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, Vulkan.MemoryAllocateFlag}}, Type{Vulkan._MemoryAllocateFlagsInfo}, UInt32})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Vulkan._MemoryAllocateFlagsInfo})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Base.RefValue{VulkanCore.LibVulkan.VkMemoryAllocateFlagsInfo}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.DeviceMemory, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.getproperty), Vulkan.MemoryType, Symbol})
precompile(Tuple{typeof(Base.view), Lava.MemoryBlock, Base.UnitRange{Int64}})
precompile(Tuple{Type{Vulkan.DebugUtilsMessageSeverityFlagEXT}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Vulkan.DebugUtilsMessageSeverityFlagEXT})
precompile(Tuple{Lava.var"#202#203"{Vulkan.DebugUtilsMessageSeverityFlagEXT, String}})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Base.convert), Type{LineNumberNode}, LineNumberNode})
precompile(Tuple{typeof(Base.println), Base.TTY})
precompile(Tuple{typeof(Base.CoreLogging._invoked_shouldlog), Vararg{Any, 5}})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), VSCodeServer.VSCodeLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Base.sprint), Function, UndefVarError})
precompile(Tuple{typeof(Base.showerror), Base.GenericIOBuffer{Array{UInt8, 1}}, UndefVarError})
precompile(Tuple{typeof(REPL.REPLCompletions.UndefVarError_hint), Base.GenericIOBuffer{Array{UInt8, 1}}, UndefVarError})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), VSCodeServer.VSCodeLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.:(<=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.string), Module})
precompile(Tuple{typeof(Base.:(==)), Vulkan.Result, Vulkan.Result})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.get_param_type), VSCodeServer.JSONRPC.RequestType{VSCodeServer.GetCompletionsRequestParams, Array{T, 1} where T}})
precompile(Tuple{Type{VSCodeServer.GetCompletionsRequestParams}, Base.Dict{String, Any}})
precompile(Tuple{typeof(VSCodeServer.repl_getcompletions_request), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, VSCodeServer.GetCompletionsRequestParams})
precompile(Tuple{typeof(REPL.REPLCompletions.completions), String, Int64, Module})
precompile(Tuple{typeof(Base.in!), REPL.REPLCompletions.KeywordCompletion, Base.Set{REPL.REPLCompletions.Completion}})
precompile(Tuple{typeof(Base.in!), REPL.REPLCompletions.ModuleCompletion, Base.Set{REPL.REPLCompletions.Completion}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(REPL.REPLCompletions.completion_text), Base.Order.ForwardOrdering}, REPL.REPLCompletions.ModuleCompletion, REPL.REPLCompletions.KeywordCompletion})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(REPL.REPLCompletions.completion_text), Base.Order.ForwardOrdering}, REPL.REPLCompletions.ModuleCompletion, REPL.REPLCompletions.ModuleCompletion})
precompile(Tuple{typeof(Base.first), Tuple{Array{REPL.REPLCompletions.Completion, 1}, Base.UnitRange{Int64}, Bool}})
precompile(Tuple{typeof(Base.filter!), typeof(VSCodeServer.is_target_completion), Array{REPL.REPLCompletions.Completion, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{REPL.REPLCompletions.Completion, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(VSCodeServer.completion), Tuple{Array{REPL.REPLCompletions.Completion, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(VSCodeServer.completion), Tuple{Array{REPL.REPLCompletions.Completion, 1}}}})
precompile(Tuple{typeof(Base.in), Tuple{Char, Char}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(VSCodeServer.completion), Tuple{Array{REPL.REPLCompletions.Completion, 1}}}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.get_return_type), VSCodeServer.JSONRPC.RequestType{VSCodeServer.GetCompletionsRequestParams, Array{T, 1} where T}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_success_response), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Array{Any, 1}}}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, Array{Any, 1}})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Int64})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:bold, :underline, :blink, :reverse, :hidden, :color), Tuple{Bool, Bool, Bool, Bool, Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, Int64})
precompile(Tuple{typeof(Base.print), Char})
precompile(Tuple{typeof(Base.print), Base.TTY, Char})
precompile(Tuple{typeof(Base.displaysize), Base.IOStream})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.IOStream})
precompile(Tuple{typeof(Base.write), Base.IOStream, Array{UInt8, 1}})
precompile(Tuple{Base.RedirectStdStream, Base.TTY})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Lava.var"#61#63"{UInt32}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Lava.var"#61#63"{UInt32}, Tuple{Base.UnitRange{Int64}}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next,), Tuple{Vulkan.MemoryAllocateFlagsInfo}}, Type{Vulkan.MemoryAllocateInfo}, UInt64, Int64})
precompile(Tuple{Type{Lava.MemoryBlock}, Vulkan.DeviceMemory, UInt64, Vulkan.MemoryPropertyFlag, Lava.MemoryDomain, Base.RefValue{Bool}, Base.RefValue{Ptr{Nothing}}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.Result, Vulkan.VulkanError}})
precompile(Tuple{typeof(Lava.device_address), Lava.BufferBlock{Lava.MemoryBlock}})
precompile(Tuple{typeof(Base.:(!=)), UInt64, Ptr{Nothing}})
precompile(Tuple{typeof(Lava.device_address), Lava.SubBuffer{Lava.BufferBlock{Lava.MemoryBlock}}})
precompile(Tuple{typeof(Base.:(==)), UInt64, UInt64})
precompile(Tuple{typeof(Lava.memory), Lava.BufferBlock{Lava.MemoryBlock}})
precompile(Tuple{typeof(Lava.bind!), Lava.BufferBlock{Lava.MemoryBlock}, Lava.MemoryBlock})
precompile(Tuple{Type{NamedTuple{(:memory_domain,), T} where T<:Tuple}, Tuple{Lava.MemoryDomain}})
precompile(Tuple{Base.var"#similar##kw", NamedTuple{(:memory_domain,), Tuple{Lava.MemoryDomain}}, typeof(Base.similar), Lava.BufferBlock{Lava.MemoryBlock}})
precompile(Tuple{typeof(Base.:(!=)), Lava.MemoryBlock, Lava.MemoryBlock})
precompile(Tuple{typeof(Base.collect), Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:memory_domain, :usage), T} where T<:Tuple}, Tuple{Lava.MemoryDomain, Vulkan.BufferUsageFlag}})
precompile(Tuple{typeof(Base.:(|)), Vulkan.BufferUsageFlag, Vulkan.BufferUsageFlag})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.BufferUsageFlag}, Vulkan.BufferUsageFlag})
precompile(Tuple{typeof(Base.something), Lava.MemoryDomain})
precompile(Tuple{typeof(Lava.check_isbits), Any})
precompile(Tuple{Type{NamedTuple{(:flags,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Type{Vulkan.MemoryPropertyFlag}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Vulkan.MemoryPropertyFlag})
precompile(Tuple{Type{Vulkan.QueueFlag}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Vulkan.QueueFlag})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.CommandBufferLevel}, Vulkan.CommandBufferLevel})
precompile(Tuple{typeof(Base.convert), Type{VulkanCore.LibVulkan.VkCommandBufferLevel}, Vulkan.CommandBufferLevel})
precompile(Tuple{Type{NamedTuple{(:flags,), T} where T<:Tuple}, Tuple{Vulkan.CommandBufferUsageFlag}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:flags,), Tuple{Vulkan.CommandBufferUsageFlag}}, Type{Vulkan.CommandBufferBeginInfo}})
precompile(Tuple{Type{NamedTuple{(:next, :flags, :inheritance_info), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.CommandBufferUsageFlag, Ptr{Nothing}}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkCommandBufferInheritanceInfo}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkCommandBufferInheritanceInfo}}, Ptr{Nothing}})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkCommandBufferBeginInfo}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, Vulkan.CommandBufferUsageFlag, Ptr{VulkanCore.LibVulkan.VkCommandBufferInheritanceInfo}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:submission,), Tuple{Lava.SubmissionInfo}}}})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.SubmitFlag}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.SemaphoreWaitFlag}, Int64})
precompile(Tuple{Type{NamedTuple{(:next, :flags), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.SemaphoreWaitFlag}})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.Buffer}, Vulkan.Buffer})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.Buffer, Vulkan.var"#1139#1140"{Ptr{Nothing}, Vulkan.Device}, Vulkan.Device}})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.Device, Vulkan.var"#1109#1110"{Ptr{Nothing}}, Vulkan.PhysicalDevice}})
precompile(Tuple{Lava.var"#buffer##kw", NamedTuple{(:memory_domain,), Tuple{Lava.MemoryDomain}}, typeof(Lava.buffer), Lava.Device, Array{Int64, 1}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Ptr{Nothing}, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.:(==)), Lava.MemoryDomain, Lava.MemoryDomain})
precompile(Tuple{Type{NamedTuple{(:usage,), T} where T<:Tuple}, Tuple{Vulkan.BufferUsageFlag}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:usage,), Tuple{Vulkan.BufferUsageFlag}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Lava.buffer), Lava.Device, Array{Int64, 1}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.CommandPool, Vulkan.VulkanError}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Array{Vulkan.CommandBuffer, 1}, Vulkan.VulkanError}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags, :inheritance_info), Tuple{Ptr{Nothing}, Vulkan.CommandBufferUsageFlag, Ptr{Nothing}}}, Type{Vulkan._CommandBufferBeginInfo}})
precompile(Tuple{Type{NamedTuple{(:fence,), T} where T<:Tuple}, Tuple{Vulkan.Fence}})
precompile(Tuple{Vulkan.var"#queue_submit_2##kw", NamedTuple{(:fence,), Tuple{Vulkan.Fence}}, typeof(Vulkan.queue_submit_2), Lava.Queue, Array{Vulkan.SubmitInfo2, 1}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next,), Tuple{Ptr{Nothing}}}, Type{Vulkan._CommandBufferSubmitInfo}, Vulkan.CommandBuffer, UInt32})
precompile(Tuple{Type{NamedTuple{(:next, :flags), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.SubmitFlag}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, Vulkan.SubmitFlag}}, Type{Vulkan._SubmitInfo2}, Array{Vulkan._SemaphoreSubmitInfo, 1}, Array{Vulkan._CommandBufferSubmitInfo, 1}, Array{Vulkan._SemaphoreSubmitInfo, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{VulkanCore.LibVulkan.VkCommandBufferSubmitInfo, 1}, VulkanCore.LibVulkan.VkCommandBufferSubmitInfo, Int64})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkSemaphoreSubmitInfo}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkCommandBufferSubmitInfo}}, Array{VulkanCore.LibVulkan.VkCommandBufferSubmitInfo, 1}})
precompile(Tuple{Type{NamedTuple{(:size,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Lava.var"#buffer##kw", NamedTuple{(:size,), Tuple{Int64}}, typeof(Lava.buffer), Lava.Device})
precompile(Tuple{typeof(Lava.buffer), Lava.Device})
precompile(Tuple{Type{Lava.LinearAllocator}, Lava.Device, Int64})
precompile(Tuple{typeof(Base.size), Lava.LinearAllocator})
precompile(Tuple{typeof(Lava.available_size), Lava.LinearAllocator})
precompile(Tuple{typeof(Lava.device_address), Lava.LinearAllocator})
precompile(Tuple{typeof(Base.copyto!), Lava.LinearAllocator, Array{Int64, 1}})
precompile(Tuple{typeof(Lava.offset), Lava.SubBuffer{Lava.BufferBlock{Lava.MemoryBlock}}})
precompile(Tuple{typeof(Base.size), Lava.SubBuffer{Lava.BufferBlock{Lava.MemoryBlock}}})
precompile(Tuple{typeof(Lava.available_size), Lava.LinearAllocator, Int64})
precompile(Tuple{typeof(Base.isvarargtype), Any})
precompile(Tuple{typeof(Base.:(!=)), UInt64, Int64})
precompile(Tuple{typeof(Base.copyto!), Lava.LinearAllocator, Tuple{Float32, Float32, Float32}})
precompile(Tuple{typeof(Lava.reset!), Lava.LinearAllocator})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Base.OneTo{Int64}}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.check_broadcast_shape), Tuple{Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast._eachindex), Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.SimdLoop.simd_inner_length), Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.SimdLoop.simd_index), Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.checkbounds_indices), Type{Bool}, Tuple{Base.OneTo{Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Lava.image_type), Int64})
precompile(Tuple{typeof(Vulkan.CEnum.namemap), Type{Vulkan.Format}})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.CommandBuffer}, Vulkan.CommandBuffer})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.CommandBuffer, typeof(Base.identity), Vulkan.CommandPool}})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.CommandPool, Vulkan.var"#1195#1196"{Ptr{Nothing}, Vulkan.Device}, Vulkan.Device}})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.DeviceMemory}, Vulkan.DeviceMemory})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.DeviceMemory, Vulkan.var"#1116#1117"{Ptr{Nothing}, Vulkan.Device}, Vulkan.Device}})
precompile(Tuple{Type{Lava.ImageBlock{N, M} where M where N}, Lava.Device, Tuple{Int64, Int64}, Vulkan.Format, Vulkan.ImageUsageFlag})
precompile(Tuple{Type{Vulkan.Extent3D}, Int64, Int64, Int64})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan._ImageFormatProperties, Vulkan.VulkanError}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.Image, Vulkan.VulkanError}})
precompile(Tuple{Type{Lava.ImageBlock{2, Lava.MemoryBlock}}, Vulkan.Image, Tuple{Int64, Int64}, Vulkan.Format, Int64, Int64, Int64, Vulkan.ImageUsageFlag, Array{Int64, 1}, Vulkan.SharingMode, Bool, Base.RefValue{Vulkan.ImageLayout}, Base.RefValue{Lava.MemoryBlock}})
precompile(Tuple{typeof(Lava.isallocated), Lava.ImageBlock{2, Lava.MemoryBlock}})
precompile(Tuple{typeof(Base.similar), Lava.ImageBlock{2, Lava.MemoryBlock}})
precompile(Tuple{Type{Lava.ImageBlock{2, Lava.MemoryBlock}}, Vulkan.Image, Tuple{Int64, Int64}, Vulkan.Format, Int64, Int64, Int64, Vulkan.ImageUsageFlag, Array{Int8, 1}, Vulkan.SharingMode, Bool, Base.RefValue{Vulkan.ImageLayout}, Base.RefValue{Lava.MemoryBlock}})
precompile(Tuple{typeof(Lava.memory), Lava.ImageBlock{2, Lava.MemoryBlock}})
precompile(Tuple{typeof(Lava.image_view_type), Int64})
precompile(Tuple{Type{Vulkan.ComponentMapping}, Vararg{Vulkan.ComponentSwizzle, 4}})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.ImageViewCreateFlag}, Int64})
precompile(Tuple{Type{NamedTuple{(:next, :flags), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.ImageViewCreateFlag}})
precompile(Tuple{typeof(Base.convert), Type{UInt32}, Vulkan.ImageViewCreateFlag})
precompile(Tuple{Type{Lava.View{O} where O<:Lava.LavaAbstraction}, Lava.ImageBlock{2, Lava.MemoryBlock}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.ImageView, Vulkan.VulkanError}})
precompile(Tuple{Type{NamedTuple{(:format, :dims), T} where T<:Tuple}, Tuple{Vulkan.Format, Tuple{Int64, Int64}}})
precompile(Tuple{Type{NamedTuple{(:is_linear, :samples), T} where T<:Tuple}, Tuple{Bool, Int64}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:is_linear, :samples), Tuple{Bool, Int64}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{Lava.var"#image##kw", NamedTuple{(:format, :dims), Tuple{Vulkan.Format, Tuple{Int64, Int64}}}, typeof(Lava.image), Lava.Device})
precompile(Tuple{typeof(Base.eltype), Lava.ImageBlock{2, Lava.MemoryBlock}})
precompile(Tuple{typeof(Base.rand), Type{ColorTypes.RGBA{Float32}}, Int64, Int64})
precompile(Tuple{typeof(Lava.format), DataType})
precompile(Tuple{Type{NamedTuple{(:usage, :memory_domain), T} where T<:Tuple}, Tuple{Vulkan.BufferUsageFlag, Lava.MemoryDomain}})
precompile(Tuple{typeof(Base.:(|)), Vulkan.AccessFlag2, Vulkan.AccessFlag2})
precompile(Tuple{Type{NamedTuple{(:src_stage_mask, :dst_stage_mask, :src_access_mask, :dst_access_mask), T} where T<:Tuple}, Tuple{Vulkan.PipelineStageFlag2, Vulkan.PipelineStageFlag2, Vulkan.AccessFlag2, Vulkan.AccessFlag2}})
precompile(Tuple{typeof(Base.convert), Type{UInt64}, Vulkan.PipelineStageFlag2})
precompile(Tuple{typeof(Base.convert), Type{UInt64}, Vulkan.AccessFlag2})
precompile(Tuple{Type{Vulkan.Offset3D}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.ImageAspectFlag}, Vulkan.ImageAspectFlag})
precompile(Tuple{Base.Returns{Int64}, Any})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.Offset3D}, Vulkan.Offset3D})
precompile(Tuple{typeof(Base.:(|)), Vulkan.ImageUsageFlag, Vulkan.ImageUsageFlag})
precompile(Tuple{typeof(Lava.image), Lava.Device, Array{ColorTypes.RGBA{Float32}, 2}})
precompile(Tuple{Type{NamedTuple{(:next, :src_stage_mask, :src_access_mask, :dst_stage_mask, :dst_access_mask), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vararg{UInt64, 4}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :src_stage_mask, :src_access_mask, :dst_stage_mask, :dst_access_mask), Tuple{Ptr{Nothing}, Vararg{UInt64, 4}}}, Type{Vulkan._ImageMemoryBarrier2}, Vulkan.ImageLayout, Vulkan.ImageLayout, UInt32, UInt32, Vulkan.Image, Vulkan._ImageSubresourceRange})
precompile(Tuple{Type{NamedTuple{(:next, :dependency_flags), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.DependencyFlag}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :dependency_flags), Tuple{Ptr{Nothing}, Vulkan.DependencyFlag}}, Type{Vulkan._DependencyInfo}, Array{Vulkan._MemoryBarrier2, 1}, Array{Vulkan._BufferMemoryBarrier2, 1}, Array{Vulkan._ImageMemoryBarrier2, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{VulkanCore.LibVulkan.VkImageMemoryBarrier2, 1}, VulkanCore.LibVulkan.VkImageMemoryBarrier2, Int64})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkBufferMemoryBarrier2}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkImageMemoryBarrier2}}, Array{VulkanCore.LibVulkan.VkImageMemoryBarrier2, 1}})
precompile(Tuple{Lava.var"#buffer##kw", NamedTuple{(:usage, :memory_domain), Tuple{Vulkan.BufferUsageFlag, Lava.MemoryDomain}}, typeof(Lava.buffer), Lava.Device, Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:size, :usage), T} where T<:Tuple}, Tuple{Int64, Vulkan.BufferUsageFlag}})
precompile(Tuple{Lava.var"#buffer##kw", NamedTuple{(:size, :usage), Tuple{Int64, Vulkan.BufferUsageFlag}}, typeof(Lava.buffer), Lava.Device})
precompile(Tuple{typeof(Base.collect), Lava.BufferBlock{Lava.MemoryBlock}})
precompile(Tuple{typeof(Base.reinterpret), Type{Int64}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.ReinterpretArray{Int64, 1, UInt8, Array{UInt8, 1}, false}, Array{Int64, 1}})
precompile(Tuple{typeof(Lava.transfer), Lava.Device, Lava.BufferBlock{Lava.MemoryBlock}, Lava.BufferBlock{Lava.MemoryBlock}})
precompile(Tuple{Type{NamedTuple{(:free_src,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:free_src,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:free_src,), Tuple{Bool}}})
precompile(Tuple{typeof(Base.collect), Lava.BufferBlock{Lava.MemoryBlock}, Lava.Device})
precompile(Tuple{typeof(Base.finalize), Lava.BufferBlock{Lava.MemoryBlock}})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.Buffer, Vulkan.var"#1139#1140"{Ptr{Nothing}, Lava.Device}, Vulkan.Device}})
precompile(Tuple{Lava.var"#buffer##kw", NamedTuple{(:usage,), Tuple{Vulkan.BufferUsageFlag}}, typeof(Lava.buffer), Lava.Device, Array{Int64, 1}})
precompile(Tuple{typeof(ColorTypes.basetype), Any})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(Base.supertype), DataType})
precompile(Tuple{typeof(ColorTypes.ccolor), Type{ColorTypes.RGBA{Float16}}, Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{NTuple{4, Int64}, NTuple{4, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{NTuple{4, Int64}, NTuple{4, Int64}}}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{NTuple{4, Int64}, NTuple{4, Int64}}}, Float64}}})
precompile(Tuple{typeof(Base.ntuple), Base.Broadcast.var"#31#32"{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{NTuple{4, Int64}, NTuple{4, Int64}}}, Float64}}}, Base.Val{4}})
precompile(Tuple{typeof(Base.:(==)), Int64})
precompile(Tuple{Base.Fix2{typeof(Base.:(==)), Int64}, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, NTuple{4, Int64}, NTuple{4, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{NTuple{4, Int64}, NTuple{4, Int64}}}, Float64})
precompile(Tuple{typeof(Base.rand), Type{ColorTypes.RGBA{Float16}}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:memory_domain, :optimal_tiling, :usage), T} where T<:Tuple}, Tuple{Lava.MemoryDomain, Bool, Vulkan.ImageUsageFlag}})
precompile(Tuple{Lava.var"#image##kw", NamedTuple{(:memory_domain, :optimal_tiling, :usage), Tuple{Lava.MemoryDomain, Bool, Vulkan.ImageUsageFlag}}, typeof(Lava.image), Lava.Device, Array{ColorTypes.RGBA{Float16}, 2}})
precompile(Tuple{Type{NamedTuple{(:is_linear,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:samples,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect), Lava.ImageBlock{2, Lava.MemoryBlock}, Lava.Device})
precompile(Tuple{typeof(Base.reinterpret), Type{ColorTypes.RGBA{Float16}}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.reshape), Base.ReinterpretArray{ColorTypes.RGBA{Float16}, 1, UInt8, Array{UInt8, 1}, false}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(==)), Base.ReshapedArray{ColorTypes.RGBA{Float16}, 2, Base.ReinterpretArray{ColorTypes.RGBA{Float16}, 1, UInt8, Array{UInt8, 1}, false}, Tuple{}}, Array{ColorTypes.RGBA{Float16}, 2}})
precompile(Tuple{Type{NamedTuple{(:memory_domain, :usage), T} where T<:Tuple}, Tuple{Lava.MemoryDomain, Vulkan.ImageUsageFlag}})
precompile(Tuple{Lava.var"#image##kw", NamedTuple{(:memory_domain, :usage), Tuple{Lava.MemoryDomain, Vulkan.ImageUsageFlag}}, typeof(Lava.image), Lava.Device, Array{ColorTypes.RGBA{Float16}, 2}})
precompile(Tuple{Type{NamedTuple{(:optimal_tiling, :usage), T} where T<:Tuple}, Tuple{Bool, Vulkan.ImageUsageFlag}})
precompile(Tuple{Lava.var"#image##kw", NamedTuple{(:optimal_tiling, :usage), Tuple{Bool, Vulkan.ImageUsageFlag}}, typeof(Lava.image), Lava.Device, Array{ColorTypes.RGBA{Float16}, 2}})
precompile(Tuple{Type{NamedTuple{(:usage,), T} where T<:Tuple}, Tuple{Vulkan.ImageUsageFlag}})
precompile(Tuple{Lava.var"#image##kw", NamedTuple{(:usage,), Tuple{Vulkan.ImageUsageFlag}}, typeof(Lava.image), Lava.Device, Array{ColorTypes.RGBA{Float16}, 2}})
precompile(Tuple{Type{Lava.LogicalResources}})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.Image}, Vulkan.Image})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.Image, Vulkan.var"#1147#1148"{Ptr{Nothing}, Lava.Device}, Vulkan.Device}})
precompile(Tuple{typeof(Lava.buffer), Lava.LogicalResources, Int64})
precompile(Tuple{typeof(Base.getproperty), Lava.LogicalBuffer, Symbol})
precompile(Tuple{typeof(Base.getindex), Lava.LogicalResources, Base.UUID})
precompile(Tuple{typeof(Lava.handle), Nothing})
precompile(Tuple{typeof(Lava.image), Lava.LogicalResources, Vulkan.Format, Tuple{Int64, Int64}})
precompile(Tuple{Type{Lava.LogicalImage}, Base.UUID, Vulkan.Format, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Lava.new!), Lava.LogicalResources, Lava.LogicalImage})
precompile(Tuple{typeof(Base.getproperty), Lava.LogicalImage, Symbol})
precompile(Tuple{typeof(Base.ispow2), Int64})
precompile(Tuple{typeof(Lava.attachment), Lava.LogicalResources, Vulkan.Format, Tuple{Int64, Int64}})
precompile(Tuple{Type{Lava.LogicalAttachment}, Base.UUID, Vulkan.Format, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Lava.new!), Lava.LogicalResources, Lava.LogicalAttachment})
precompile(Tuple{typeof(Base.getproperty), Lava.LogicalAttachment, Symbol})
precompile(Tuple{typeof(Lava.buffer), Lava.PhysicalResources, Lava.BufferBlock{Lava.MemoryBlock}})
precompile(Tuple{typeof(Base.getproperty), Lava.PhysicalBuffer, Symbol})
precompile(Tuple{typeof(Base.getindex), Lava.PhysicalResources, Base.UUID})
precompile(Tuple{typeof(Lava.image), Lava.PhysicalResources, Lava.ImageBlock{2, Lava.MemoryBlock}})
precompile(Tuple{typeof(Base.getproperty), Lava.PhysicalImage, Symbol})
precompile(Tuple{typeof(Base.:(|)), Lava.MemoryAccess, Lava.MemoryAccess})
precompile(Tuple{Lava.var"#attachment##kw", NamedTuple{(:format, :dims), Tuple{Vulkan.Format, Tuple{Int64, Int64}}}, typeof(Lava.attachment), Lava.Device})
precompile(Tuple{typeof(Lava.attachment), Lava.PhysicalResources, Lava.Attachment{Lava.ImageView{Lava.ImageBlock{2, Lava.MemoryBlock}}}})
precompile(Tuple{Type{Lava.LogicalAttachment}, Base.UUID, Vulkan.Format, Tuple{Int64, Int64}, Base.UnitRange{Int64}, Vararg{Any}})
precompile(Tuple{Type{Lava.LogicalAttachment}, Base.UUID, Vulkan.Format, Array{Int64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Vulkan.ResolveModeFlag})
precompile(Tuple{typeof(Base.getproperty), Lava.PhysicalAttachment, Symbol})
precompile(Tuple{Type{MethodError}, Any, Any})
precompile(Tuple{typeof(Base.zero), Type{Any}})
precompile(Tuple{typeof(Base.reduce_empty), typeof(Base.:(+)), Type{Any}})
precompile(Tuple{typeof(Base.reduce_empty), typeof(Base.add_sum), Type{Any}})
precompile(Tuple{typeof(Base.reduce_empty), Base.BottomRF{typeof(Base.add_sum)}, Type{Any}})
precompile(Tuple{typeof(Lava.shader), Expr, Expr, SPIRV.ExecutionModel})
precompile(Tuple{Base.Fix2{typeof(Base.:(==)), SPIRV.StorageClass}, SPIRV.StorageClass})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Dictionaries.PairDictionary{Int64, Array{Expr, 1}, Dictionaries.Dictionary{Int64, Array{Expr, 1}}}, Lava.var"#112#114"}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Dictionaries.PairDictionary{Int64, Array{Expr, 1}, Dictionaries.Dictionary{Int64, Array{Expr, 1}}}, Lava.var"#112#114"}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, Lava.var"#113#115"}})
precompile(Tuple{Lava.var"#113#115", Expr})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, Lava.var"#113#115"}, Int64})
precompile(Tuple{typeof(SPIRV.get_signature), Expr})
precompile(Tuple{SPIRV.var"#104#105", Expr})
precompile(Tuple{typeof(Base._similar_for), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, Type{Expr}, Base.Generator{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.var"#104#105"}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.var"#104#105"}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Expr, Expr}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.esc), Tuple{Tuple{Expr, Expr}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.esc), Tuple{Tuple{Expr, Expr}}}})
precompile(Tuple{typeof(Core.convert), Type{SPIRV.Decoration}, SPIRV.Decoration})
precompile(Tuple{Type{NamedTuple{(:inferred,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:inline_cost_threshold,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.first), Core.Compiler.Missing})
precompile(Tuple{typeof(Base.first), Nothing})
precompile(Tuple{typeof(Core.Compiler.indexed_iterate), Nothing, Int64})
precompile(Tuple{typeof(Core.Compiler.indexed_iterate), Nothing, Int64, Int64})
precompile(Tuple{Type{SPIRV.Metadata}, UInt32, UInt32, Base.VersionNumber, Int64})
precompile(Tuple{typeof(Base.convert), Type{SPIRV.SSAValue}, Int64})
precompile(Tuple{Type{SPIRV.FloatType}, Int64})
precompile(Tuple{Type{SPIRV.IntegerType}, Int64, Bool})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.getproperty), Symbol})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix2{typeof(Base.getproperty), Symbol}}, Base.Fix2{typeof(Base.getproperty), Symbol}})
precompile(Tuple{Type{Base.Splat{F} where F}, Type})
precompile(Tuple{typeof(Base.convert), Type{Type{Base.UnitRange{T} where T<:Real}}, Type{Base.UnitRange{T} where T<:Real}})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.HasShape{1}, 1}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Splat{Type{Base.UnitRange{T} where T<:Real}}}, Base.Splat{Type{Base.UnitRange{T} where T<:Real}}})
precompile(Tuple{Type{Signed}, UInt64})
precompile(Tuple{Type{Base.CanonicalIndexError}, String, Any})
precompile(Tuple{typeof(Graphs._NI), String})
precompile(Tuple{typeof(Base.:(<=)), Int64, UInt8})
precompile(Tuple{typeof(Base.:(<=)), UInt8, Int64})
precompile(Tuple{typeof(Base.convert), Type{Unsigned}, UInt128})
precompile(Tuple{typeof(Base.isbits), Any})
precompile(Tuple{typeof(Base.convert), Type{Unsigned}, Int128})
precompile(Tuple{Type{NamedTuple{(:has_backedges,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.convert), Type{SPIRV.OpCode}, SPIRV.OpCode})
precompile(Tuple{Type{NamedTuple{(:record_jtype,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{UInt32}, SPIRV.OpCode})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{SPIRV.SSAValue, 1}}})
precompile(Tuple{typeof(Base.convert), Type{SPIRV.AddressingModel}, SPIRV.AddressingModel})
precompile(Tuple{typeof(Base.promote_rule), Type{Union{Nothing, SPIRV.SSAValue}}, Type})
precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rem), Char, Type{UInt8}})
precompile(Tuple{typeof(Base.convert), Type{ResultTypes.Result{Bool, SPIRV.ValidationError}}, Bool})
precompile(Tuple{Type{NamedTuple{(:allocator, :next, :flags), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Ptr{Nothing}, Int64}})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.ImageView}, Vulkan.ImageView})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.ImageView, Vulkan.var"#1151#1152"{Ptr{Nothing}, Vulkan.Device}, Vulkan.Device}})
precompile(Tuple{Type{NamedTuple{(:execution_model, :storage_classes, :variable_decorations, :features), T} where T<:Tuple}, Tuple{SPIRV.ExecutionModel, Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, Dictionaries.Dictionary{SPIRV.Decoration, Array{UInt32, 1}}}, SPIRV.SupportedFeatures}})
precompile(Tuple{SPIRV.var"##VulkanLayout#70", Bool, Bool, Type{SPIRV.VulkanLayout}})
precompile(Tuple{typeof(Base.convert), Type{SPIRV.LayoutStrategy}, SPIRV.VulkanLayout})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:execution_model, :storage_classes, :variable_decorations, :features), Tuple{SPIRV.ExecutionModel, Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, Dictionaries.Dictionary{SPIRV.Decoration, Array{UInt32, 1}}}, SPIRV.SupportedFeatures}}, Type{SPIRV.ShaderInterface}})
precompile(Tuple{typeof(Base._unsafe_copyto!), Array{Dictionaries.Dictionary{SPIRV.Decoration, Array{Any, 1}}, 1}, Int64, Array{Dictionaries.Dictionary{SPIRV.Decoration, Array{UInt32, 1}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{Union{Nothing, Core.MethodTable}}, Array{Core.MethodTable, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.cat_size_shape), Tuple{Bool}, Array{Core.MethodTable, 1}, Nothing})
precompile(Tuple{typeof(Base.cat_similar), Array{Core.MethodTable, 1}, Type{Union{Nothing, Core.MethodTable}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.__cat), Array{Union{Nothing, Core.MethodTable}, 1}, Tuple{Int64}, Tuple{Bool}, Array{Core.MethodTable, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{Union{Nothing, Core.MethodTable}, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, Array{Core.MethodTable, 1}, Nothing})
precompile(Tuple{typeof(Base.max), UInt64, UInt64})
precompile(Tuple{typeof(Core.Compiler.abstract_call_known), SPIRV.SPIRVInterpreter, Any, Core.Compiler.ArgInfo, Core.Compiler.InferenceState, Int64})
precompile(Tuple{typeof(Core.Compiler.ssa_inlining_pass!), Core.Compiler.IRCode, Array{Core.LineInfoNode, 1}, Core.Compiler.InliningState{Core.Compiler.EdgeTracker, Core.Compiler.WorldView{SPIRV.CodeInstanceCache}, SPIRV.SPIRVInterpreter}, Bool})
precompile(Tuple{SPIRV.var"##s545#81", Vararg{Any, 5}})
precompile(Tuple{typeof(SPIRV.BitwiseAnd), UInt8, UInt8})
precompile(Tuple{typeof(SPIRV.IEqual), UInt8, UInt8})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Vec{4, Float32}}})
precompile(Tuple{SPIRV.var"##spir_type!#36", Bool, Nothing, typeof(SPIRV.spir_type!), SPIRV.IR, Type, Bool})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.FloatType, SPIRV.FloatType})
precompile(Tuple{typeof(Base.:(==)), SPIRV.FloatType, SPIRV.FloatType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Float32}, SPIRV.FloatType})
precompile(Tuple{typeof(Base.length), Type{SPIRV.Vec{4, Float32}}})
precompile(Tuple{Type{SPIRV.VectorType}, SPIRV.FloatType, Int64})
precompile(Tuple{typeof(SPIRV.promote_to_interface_block), SPIRV.VectorType, SPIRV.StorageClass})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.VectorType, SPIRV.VectorType})
precompile(Tuple{typeof(Base.:(==)), SPIRV.VectorType, SPIRV.VectorType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Vec{4, Float32}}, SPIRV.VectorType})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.StorageClass, SPIRV.VectorType})
precompile(Tuple{typeof(Base.lastindex), Core.SimpleVector})
precompile(Tuple{typeof(Base.Iterators.enumerate), Core.SimpleVector})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Core.SimpleVector}, Tuple{Int64}})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.VectorType})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.FloatType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.SSAValue, SPIRV.FloatType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.SSAValue, SPIRV.VectorType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.SSAValue, SPIRV.PointerType})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Core.SimpleVector}, Tuple{Int64, Int64}})
precompile(Tuple{Type{SPIRV.FunctionType}, SPIRV.VectorType, Array{SPIRV.SPIRType, 1}})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.FunctionType})
precompile(Tuple{typeof(Base.reinterpret), Type{Int64}, UInt64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.VectorType})
precompile(Tuple{typeof(Base.iterate), Array{SPIRV.SPIRType, 1}})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.SSAValue, SPIRV.FunctionType})
precompile(Tuple{typeof(Base.push!), Array{UInt64, 1}, UInt64})
precompile(Tuple{typeof(Base.argtail), Type, Type})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.:(-)), Int32, Int64})
precompile(Tuple{typeof(Base.haskey), Dictionaries.Dictionary{Int64, SPIRV.Variable}, Int64})
precompile(Tuple{typeof(Base.depwarn), String, Symbol})
precompile(Tuple{Type{NamedTuple{(:dir,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(SPIRV.remove_backedges), SPIRV.DeltaGraph{Int64}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Array{Int64, 1}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Array{Int64, 1}, 1}})
precompile(Tuple{SPIRV.var"#traverse##kw", NamedTuple{(:has_backedges,), Tuple{Bool}}, typeof(SPIRV.traverse), SPIRV.DeltaGraph{Int64}})
precompile(Tuple{typeof(SPIRV.add_mapping!), SPIRV.IRMapping, SPIRV.IR, Array{Base.UnitRange{Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(SPIRV.emit_nodes!), SPIRV.FunctionDefinition, SPIRV.IR, SPIRV.IRMapping, SPIRV.CFG, Array{Base.UnitRange{Int64}, 1}, Array{Int64, 1}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.UnitRange{Int64}, 1}, Int64})
precompile(Tuple{typeof(SPIRV.emit!), SPIRV.FunctionDefinition, SPIRV.IR, SPIRV.IRMapping, SPIRV.CFG, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(SPIRV.emit_inst!), SPIRV.IR, SPIRV.IRMapping, SPIRV.CFG, SPIRV.FunctionDefinition, Expr, Type, SPIRV.Block})
precompile(Tuple{typeof(Base.collect), Array{Any, 1}})
precompile(Tuple{typeof(SPIRV.load_if_variable!), SPIRV.Block, SPIRV.IR, SPIRV.IRMapping, SPIRV.FunctionDefinition, Float32})
precompile(Tuple{typeof(SPIRV.remap_args!), Array{Any, 1}, SPIRV.IR, SPIRV.IRMapping, SPIRV.OpCode})
precompile(Tuple{typeof(Base.in), SPIRV.Id, Tuple{SPIRV.Id, SPIRV.Id}})
precompile(Tuple{Type{NamedTuple{(:class, :operands, :capabilities, :extensions, :min_version), T} where T<:Tuple}, Tuple{String, Array{SPIRV.OperandInfo, 1}, Array{SPIRV.Capability, 1}, Array{String, 1}, Base.VersionNumber}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:operands,), Tuple{Array{SPIRV.OperandInfo, 1}}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:class, :operands, :capabilities, :extensions, :min_version), Tuple{String, Array{SPIRV.OperandInfo, 1}, Array{SPIRV.Capability, 1}, Array{String, 1}, Base.VersionNumber}}, NamedTuple{(:operands,), Tuple{Array{SPIRV.OperandInfo, 1}}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:class, :operands, :capabilities, :extensions, :min_version), Tuple{String, Array{SPIRV.OperandInfo, 1}, Array{SPIRV.Capability, 1}, Array{String, 1}, Base.VersionNumber}}})
precompile(Tuple{Type{SPIRV.InstructionInfo}, String, Array{SPIRV.OperandInfo, 1}, Array{SPIRV.Capability, 1}, Array{String, 1}, Base.VersionNumber})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{SPIRV.OperandInfo, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{SPIRV.OperandInfo, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{SPIRV.Capability, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, SPIRV.Id})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, Float32, String})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.FloatType})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.SSAValue, String})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, SPIRV.SSAValue, SPIRV.SSAValue, SPIRV.SSAValue, Vararg{SPIRV.SSAValue}})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.VoidType, SPIRV.VoidType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Nothing}, SPIRV.VoidType})
precompile(Tuple{typeof(Base.collect), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(SPIRV.load_if_variable!), SPIRV.Block, SPIRV.IR, SPIRV.IRMapping, SPIRV.FunctionDefinition, Core.SSAValue})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, Nothing, SPIRV.SSAValue, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.SSAValue, SPIRV.SSAValue}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, Nothing, Array{SPIRV.SSAValue, 1}})
precompile(Tuple{typeof(Base.getproperty), Core.ReturnNode, Symbol})
precompile(Tuple{typeof(Graphs.inneighbors), SPIRV.DeltaGraph{Int64}, Int64})
precompile(Tuple{typeof(Graphs.outneighbors), SPIRV.DeltaGraph{Int64}, Int64})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, Type{Graphs.SimpleGraphs.SimpleEdge{T} where T<:Integer}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.Fix2{Type{Graphs.SimpleGraphs.SimpleEdge{T} where T<:Integer}, Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, Base.Fix2{Type{Graphs.SimpleGraphs.SimpleEdge{T} where T<:Integer}, Int64}}})
precompile(Tuple{typeof(Base.filter), Base.Fix2{typeof(Base.in), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.FunctionDefinition}, SPIRV.SSAValue})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.VoidType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.SSAValue, SPIRV.VoidType})
precompile(Tuple{typeof(SPIRV.add_type_layouts!), SPIRV.IR, SPIRV.VulkanLayout})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.FloatType})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.VectorType})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Vec{4, Float32}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.VoidType})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Nothing}})
precompile(Tuple{typeof(Base.pairs), Dictionaries.Dictionary{Any, Any}})
precompile(Tuple{typeof(Base.iterate), Dictionaries.PairDictionary{Any, Any, Dictionaries.Dictionary{Any, Any}}})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.Variable}, SPIRV.SSAValue, Nothing})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.Variable}, SPIRV.SSAValue})
precompile(Tuple{typeof(Base.something), SPIRV.Instruction})
precompile(Tuple{typeof(Base.getproperty), SPIRV.Instruction, Symbol})
precompile(Tuple{typeof(Base.getproperty), SPIRV.PointerType, Symbol})
precompile(Tuple{typeof(Base.:(==)), SPIRV.StorageClass, SPIRV.StorageClass})
precompile(Tuple{typeof(Base.something), SPIRV.Variable})
precompile(Tuple{typeof(Base.getproperty), SPIRV.Variable, Symbol})
precompile(Tuple{typeof(Base.isequal), SPIRV.VectorType, SPIRV.VectorType})
precompile(Tuple{typeof(SPIRV.satisfy_requirements!), SPIRV.IR, SPIRV.SupportedFeatures})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.AddressingModel, SPIRV.MemoryModel}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, Nothing, Array{CEnum.Cenum{UInt32}, 1}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, Nothing, SPIRV.ExecutionModel, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ExecutionModel, SPIRV.SSAValue, String, SPIRV.SSAValue}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, Nothing, Array{Any, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.SSAValue, SPIRV.FloatType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.SSAValue, SPIRV.VectorType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.SSAValue, SPIRV.PointerType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.SSAValue, SPIRV.FunctionType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.SSAValue, SPIRV.VoidType})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.SSAValue, SPIRV.Decoration, UInt32}})
precompile(Tuple{typeof(Base.pairs), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}})
precompile(Tuple{typeof(Base.iterate), Dictionaries.PairDictionary{SPIRV.SSAValue, SPIRV.SPIRType, Dictionaries.Dictionary{SPIRV.SSAValue, SPIRV.SPIRType}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.FloatType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.FloatType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, Any}, SPIRV.SSAValue, SPIRV.FloatType})
precompile(Tuple{typeof(Base.iterate), Dictionaries.PairDictionary{SPIRV.SSAValue, SPIRV.SPIRType, Dictionaries.Dictionary{SPIRV.SSAValue, SPIRV.SPIRType}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.VectorType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.VectorType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, Any}, SPIRV.SSAValue, SPIRV.VectorType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.PointerType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.PointerType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, Any}, SPIRV.SSAValue, SPIRV.PointerType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.FunctionType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.FunctionType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, Any}, SPIRV.SSAValue, SPIRV.FunctionType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.VoidType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.VoidType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, Any}, SPIRV.SSAValue, SPIRV.VoidType})
precompile(Tuple{typeof(Base.pairs), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.Constant}})
precompile(Tuple{typeof(Base.iterate), Dictionaries.PairDictionary{SPIRV.SSAValue, SPIRV.Constant, Dictionaries.Dictionary{SPIRV.SSAValue, SPIRV.Constant}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.Constant}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.Constant}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, Any}, SPIRV.SSAValue, SPIRV.Constant})
precompile(Tuple{typeof(Base.iterate), Dictionaries.PairDictionary{SPIRV.SSAValue, SPIRV.Constant, Dictionaries.Dictionary{SPIRV.SSAValue, SPIRV.Constant}}, Int64})
precompile(Tuple{typeof(Base.pairs), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.Variable}})
precompile(Tuple{typeof(Base.iterate), Dictionaries.PairDictionary{SPIRV.SSAValue, SPIRV.Variable, Dictionaries.Dictionary{SPIRV.SSAValue, SPIRV.Variable}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.Variable}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.Variable}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, Any}, SPIRV.SSAValue, SPIRV.Variable})
precompile(Tuple{typeof(Base.iterate), Dictionaries.PairDictionary{SPIRV.SSAValue, SPIRV.Variable, Dictionaries.Dictionary{SPIRV.SSAValue, SPIRV.Variable}}, Int64})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{SPIRV.SSAValue, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.AdaptiveSort{Base.Sort.QuickSortAlg}, Base.Order.Perm{Base.Order.ForwardOrdering, Array{SPIRV.SSAValue, 1}}})
precompile(Tuple{SPIRV.var"#58#59"{SPIRV.IR}, Pair{SPIRV.SSAValue, SPIRV.FloatType}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.Instruction, 1}, SPIRV.Instruction, Int64})
precompile(Tuple{SPIRV.var"#58#59"{SPIRV.IR}, Pair{SPIRV.SSAValue, SPIRV.VectorType}})
precompile(Tuple{SPIRV.var"#58#59"{SPIRV.IR}, Pair{SPIRV.SSAValue, SPIRV.PointerType}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.StorageClass, SPIRV.SSAValue}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, SPIRV.SSAValue, Array{Any, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.SSAValue, SPIRV.Variable})
precompile(Tuple{SPIRV.var"#58#59"{SPIRV.IR}, Pair{SPIRV.SSAValue, SPIRV.Variable}})
precompile(Tuple{SPIRV.var"#58#59"{SPIRV.IR}, Pair{SPIRV.SSAValue, SPIRV.FunctionType}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, SPIRV.SSAValue, SPIRV.SSAValue})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.SSAValue, SPIRV.Constant})
precompile(Tuple{SPIRV.var"#58#59"{SPIRV.IR}, Pair{SPIRV.SSAValue, SPIRV.Constant}})
precompile(Tuple{typeof(Base.reinterpret), Type{UInt32}, Float32})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, SPIRV.SSAValue, SPIRV.SSAValue, UInt32})
precompile(Tuple{SPIRV.var"#58#59"{SPIRV.IR}, Pair{SPIRV.SSAValue, SPIRV.VoidType}})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.VoidType})
precompile(Tuple{typeof(Base.getindex), Array{UInt64, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{SPIRV.SPIRType, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{SPIRV.SSAValue, 1}, Int64})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, SPIRV.SSAValue, SPIRV.SSAValue, SPIRV.FunctionControl, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.FunctionControl, SPIRV.SSAValue}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, SPIRV.SSAValue, SPIRV.SSAValue, Array{Any, 1}})
precompile(Tuple{typeof(Base.in), Type, Tuple{SPIRV.Id, SPIRV.Id}})
precompile(Tuple{typeof(Base.deepcopy_internal), DataType, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, Type})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.AddressingModel, String})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.MemoryModel, String})
precompile(Tuple{Type{UInt32}, SPIRV.AddressingModel})
precompile(Tuple{typeof(Base.get), Base.Dict{UInt32, SPIRV.EnumerantInfo}, UInt32, Nothing})
precompile(Tuple{Type{UInt32}, SPIRV.MemoryModel})
precompile(Tuple{typeof(Base.in), SPIRV.Literal, Tuple{SPIRV.Id, SPIRV.Id}})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.ExecutionModel, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, SPIRV.Literal})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, String, String})
precompile(Tuple{Type{UInt32}, SPIRV.ExecutionModel})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.ExecutionMode, String})
precompile(Tuple{Type{UInt32}, SPIRV.ExecutionMode})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.Decoration, String})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, UInt32, String})
precompile(Tuple{Type{UInt32}, SPIRV.Decoration})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.StorageClass, String})
precompile(Tuple{Type{UInt32}, SPIRV.StorageClass})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.FunctionControl, String})
precompile(Tuple{Type{UInt32}, SPIRV.FunctionControl})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.Capability})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, String})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.AddressingModel})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.MemoryModel})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.ExecutionModel})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.SSAValue})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.ExecutionMode})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.Decoration})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, UInt32})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.StorageClass})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.FunctionControl})
precompile(Tuple{typeof(Base.push!), Array{UInt32, 1}, UInt32})
precompile(Tuple{Base.var"#730#731"{Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Base.PipeEndpoint, Base.PipeEndpoint, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Type{Lava.ShaderCache}, Lava.Device})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.ShaderModule, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.getproperty), Lava.ShaderCache, Symbol})
precompile(Tuple{typeof(Base.length), Dictionaries.Dictionary{Lava.ShaderSource, Lava.Shader}})
precompile(Tuple{typeof(Base.vect), SPIRV.StorageClass, Vararg{SPIRV.StorageClass}})
precompile(Tuple{typeof(Base.vect), SPIRV.BuiltIn})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.Decoration, Array{SPIRV.BuiltIn, 1}})
precompile(Tuple{typeof(Base.vect), Pair{SPIRV.Decoration, Array{SPIRV.BuiltIn, 1}}})
precompile(Tuple{typeof(Dictionaries.dictionary), Array{Pair{SPIRV.Decoration, Array{SPIRV.BuiltIn, 1}}, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Int64, Dictionaries.Dictionary{SPIRV.Decoration, Array{SPIRV.BuiltIn, 1}}})
precompile(Tuple{typeof(Base.vect), Pair{Int64, Dictionaries.Dictionary{SPIRV.Decoration, Array{SPIRV.BuiltIn, 1}}}})
precompile(Tuple{typeof(Dictionaries.dictionary), Array{Pair{Int64, Dictionaries.Dictionary{SPIRV.Decoration, Array{SPIRV.BuiltIn, 1}}}, 1}})
precompile(Tuple{Type{NamedTuple{(:execution_model, :storage_classes, :variable_decorations, :features), T} where T<:Tuple}, Tuple{SPIRV.ExecutionModel, Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, Dictionaries.Dictionary{SPIRV.Decoration, Array{SPIRV.BuiltIn, 1}}}, SPIRV.SupportedFeatures}})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.ShaderModule}, Vulkan.ShaderModule})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.ShaderModule, Vulkan.var"#1155#1156"{Ptr{Nothing}, Vulkan.Device}, Vulkan.Device}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:execution_model, :storage_classes, :variable_decorations, :features), Tuple{SPIRV.ExecutionModel, Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, Dictionaries.Dictionary{SPIRV.Decoration, Array{SPIRV.BuiltIn, 1}}}, SPIRV.SupportedFeatures}}, Type{SPIRV.ShaderInterface}})
precompile(Tuple{typeof(Base._unsafe_copyto!), Array{Dictionaries.Dictionary{SPIRV.Decoration, Array{Any, 1}}, 1}, Int64, Array{Dictionaries.Dictionary{SPIRV.Decoration, Array{SPIRV.BuiltIn, 1}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.SSAValue, SPIRV.Decoration, SPIRV.BuiltIn}})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.BuiltIn, String})
precompile(Tuple{Type{UInt32}, SPIRV.BuiltIn})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.BuiltIn})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.Decoration, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.vect), Pair{SPIRV.Decoration, Array{UInt32, 1}}})
precompile(Tuple{typeof(Dictionaries.dictionary), Array{Pair{SPIRV.Decoration, Array{UInt32, 1}}, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Int64, Dictionaries.Dictionary{SPIRV.Decoration, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.vect), Pair{Int64, Dictionaries.Dictionary{SPIRV.Decoration, Array{UInt32, 1}}}})
precompile(Tuple{typeof(Dictionaries.dictionary), Array{Pair{Int64, Dictionaries.Dictionary{SPIRV.Decoration, Array{UInt32, 1}}}, 1}})
precompile(Tuple{Type{Lava.Program}, Lava.Device, Lava.ShaderSource, Vararg{Lava.ShaderSource}})
precompile(Tuple{Type{Lava.Program}, Lava.ShaderCache, Lava.ShaderSource, Vararg{Lava.ShaderSource}})
precompile(Tuple{typeof(Base.map), Lava.var"#140#141"{Lava.ShaderCache}, Tuple{Lava.ShaderSource, Lava.ShaderSource}})
precompile(Tuple{typeof(Dictionaries.dictionary), Tuple{Pair{Vulkan.ShaderStageFlag, Lava.Shader}, Pair{Vulkan.ShaderStageFlag, Lava.Shader}}})
precompile(Tuple{Type{Lava.PhysicalAttachment}, Lava.Attachment{Lava.ImageView{Lava.ImageBlock{2, Lava.MemoryBlock}}}})
precompile(Tuple{Lava.var"##GlobalDescriptorsConfig#94", Int64, Int64, Int64, Type{Lava.GlobalDescriptorsConfig}})
precompile(Tuple{Type{Vulkan.DescriptorPoolSize}, Vulkan.DescriptorType, Int64})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.DescriptorType}, Vulkan.DescriptorType})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.ShaderStageFlag}, Vulkan.ShaderStageFlag})
precompile(Tuple{typeof(Base.:(<)), Int64})
precompile(Tuple{Type{NamedTuple{(:outer,), T} where T<:Tuple}, Tuple{Tuple{Int64}}})
precompile(Tuple{typeof(Base.any), Function, Tuple{Int64}})
precompile(Tuple{typeof(Base._any), Base.Fix2{typeof(Base.:(<)), Int64}, Tuple{Int64}, Base.Colon})
precompile(Tuple{typeof(Base._RepeatInnerOuter.to_tuple), Tuple{Int64}})
precompile(Tuple{typeof(Base.fill_to_length), Tuple{Int64}, Int64, Base.Val{1}})
precompile(Tuple{typeof(Core.convert), Type{Vulkan.DescriptorType}, Vulkan.DescriptorType})
precompile(Tuple{Type{Lava.ResourceDescriptors}, Lava.Device})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.DescriptorPool, Vulkan.VulkanError}})
precompile(Tuple{Type{NamedTuple{(:descriptor_count, :immutable_samplers), T} where T<:Tuple}, Tuple{UInt32, Ptr{Nothing}}})
precompile(Tuple{typeof(Base.convert), Type{Vulkan._DescriptorSetLayoutBindingFlagsCreateInfo}, Vulkan.DescriptorSetLayoutBindingFlagsCreateInfo})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next,), Tuple{Ptr{Nothing}}}, Type{Vulkan._DescriptorSetLayoutBindingFlagsCreateInfo}, Array{Vulkan.DescriptorBindingFlag, 1}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Vulkan._DescriptorSetLayoutBindingFlagsCreateInfo})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Base.RefValue{VulkanCore.LibVulkan.VkDescriptorSetLayoutBindingFlagsCreateInfo}})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkDescriptorSetLayoutCreateInfo}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, Int64, Int64, Ptr{VulkanCore.LibVulkan.VkDescriptorSetLayoutBinding}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.DescriptorSetLayout, Vulkan.VulkanError}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Array{Vulkan.DescriptorSet, 1}, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.empty!), Array{Vulkan.GraphicsPipelineCreateInfo, 1}})
precompile(Tuple{typeof(Base.empty!), Lava.HashTable{Lava.Pipeline}})
precompile(Tuple{typeof(LRUCache._finalize_evictions!), Nothing, Array{Tuple{UInt64, Lava.Pipeline}, 1}})
precompile(Tuple{Type{Base.BottomRF{Base.var"#57#58"{typeof(Base.empty!)}}}, Function})
precompile(Tuple{Base.var"##mapfoldl#261", Nothing, typeof(Base.mapfoldl), Function, Function, Tuple{}})
precompile(Tuple{Base.var"#mapfoldl##kw", NamedTuple{(:init,), Tuple{Nothing}}, typeof(Base.mapfoldl), Function, Function, Tuple{}})
precompile(Tuple{Base.var"##foldl#262", Base.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:init,), Tuple{Nothing}}}, typeof(Base.foldl), Function, Tuple{}})
precompile(Tuple{Base.var"#foldl##kw", NamedTuple{(:init,), Tuple{Nothing}}, typeof(Base.foldl), Function, Tuple{}})
precompile(Tuple{typeof(Base.empty!), Dictionaries.Dictionary{Vulkan.PipelineLayout, Lava.PipelineLayout}})
precompile(Tuple{typeof(Base.empty!), Lava.HashTable{Lava.PipelineLayout}})
precompile(Tuple{typeof(LRUCache._finalize_evictions!), Nothing, Array{Tuple{UInt64, Lava.PipelineLayout}, 1}})
precompile(Tuple{Type{Vulkan.Offset2D}, Int64, Int64})
precompile(Tuple{Type{Lava.RenderArea}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Lava.RenderArea, Symbol})
precompile(Tuple{typeof(Base.:(|)), Vulkan.ColorComponentFlag, Vulkan.ColorComponentFlag})
precompile(Tuple{Lava.var"##RenderState#138", Nothing, Bool, Nothing, Bool, Vulkan.ColorComponentFlag, Type{Lava.RenderState}})
precompile(Tuple{Type{Lava.RenderState}})
precompile(Tuple{Lava.var"##ProgramInvocationState#139", Vulkan.CullModeFlag, Vulkan.FrontFace, Bool, Vulkan.PrimitiveTopology, Vulkan.VertexInputRate, Vulkan.PolygonMode, Type{Lava.ProgramInvocationState}})
precompile(Tuple{Type{Lava.ProgramInvocationState}})
precompile(Tuple{typeof(Base.vect), Lava.PhysicalAttachment})
precompile(Tuple{Type{Lava.RenderTargets}, Array{Lava.PhysicalAttachment, 1}})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.PipelineShaderStageCreateFlag}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Float32}, Float32})
precompile(Tuple{typeof(Base.convert), Type{Float32}, Float64})
precompile(Tuple{Type{Base.Returns{V} where V}, Float32})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Float32, 1}}})
precompile(Tuple{Base.Returns{Float32}, Any})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.PipelineColorBlendStateCreateFlag}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.LogicOp}, Vulkan.LogicOp})
precompile(Tuple{typeof(Base.convert), Type{NTuple{4, Float32}}, NTuple{4, Float32}})
precompile(Tuple{Type{Vulkan.PushConstantRange}, Vulkan.ShaderStageFlag, Int64, Int64})
precompile(Tuple{Type{Vulkan.StencilOpState}, Vulkan.StencilOp, Vulkan.StencilOp, Vulkan.StencilOp, Vulkan.CompareOp, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.PipelineDepthStencilStateCreateFlag}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.CompareOp}, Vulkan.CompareOp})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.StencilOpState}, Vulkan.StencilOpState})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.PipelineCreateFlag}, Int64})
precompile(Tuple{typeof(Lava.pipeline_info), Lava.Device, Vulkan.Rect2D, Lava.Program, Lava.RenderState, Lava.ProgramInvocationState, Lava.ResourceDescriptors, Lava.RenderTargets})
precompile(Tuple{Type{NamedTuple{(:specialization_info,), T} where T<:Tuple}, Tuple{Ptr{Nothing}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:specialization_info,), Tuple{Ptr{Nothing}}}, Type{Vulkan.PipelineShaderStageCreateInfo}, Vulkan.ShaderStageFlag, Vulkan.ShaderModule, String})
precompile(Tuple{Type{NamedTuple{(:next, :flags), T} where T<:Tuple}, Tuple{Ptr{Nothing}, UInt32}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, UInt32}}, Type{Vulkan._PipelineLayoutCreateInfo}, Array{Vulkan.DescriptorSetLayout, 1}, Array{Vulkan._PushConstantRange, 1}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.PipelineLayout, Vulkan.VulkanError}})
precompile(Tuple{typeof(LRUCache._constone), Lava.PipelineLayout})
precompile(Tuple{Type{NamedTuple{(:next, :input_assembly_state, :vertex_input_state, :viewport_state, :multisample_state, :color_blend_state, :depth_stencil_state), T} where T<:Tuple}, Tuple{Vulkan.PipelineRenderingCreateInfo, Vulkan.PipelineInputAssemblyStateCreateInfo, Vulkan.PipelineVertexInputStateCreateInfo, Vulkan.PipelineViewportStateCreateInfo, Vulkan.PipelineMultisampleStateCreateInfo, Vulkan.PipelineColorBlendStateCreateInfo, Ptr{Nothing}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :input_assembly_state, :vertex_input_state, :viewport_state, :multisample_state, :color_blend_state, :depth_stencil_state), Tuple{Vulkan.PipelineRenderingCreateInfo, Vulkan.PipelineInputAssemblyStateCreateInfo, Vulkan.PipelineVertexInputStateCreateInfo, Vulkan.PipelineViewportStateCreateInfo, Vulkan.PipelineMultisampleStateCreateInfo, Vulkan.PipelineColorBlendStateCreateInfo, Ptr{Nothing}}}, Type{Vulkan.GraphicsPipelineCreateInfo}, Array{Vulkan.PipelineShaderStageCreateInfo, 1}, Vulkan.PipelineRasterizationStateCreateInfo, Vulkan.PipelineLayout, Int64, Int64})
precompile(Tuple{typeof(Lava.request_pipeline), Lava.Device, Vulkan.GraphicsPipelineCreateInfo})
precompile(Tuple{typeof(Base.hash), Vulkan.PipelineRenderingCreateInfo, UInt64})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Array{Vulkan.Pipeline, 1}, Array{Vulkan.GraphicsPipelineCreateInfo, 1}}}, Int64})
precompile(Tuple{Type{Lava.PipelineType}, Vulkan.PipelineBindPoint})
precompile(Tuple{typeof(Lava.create_pipelines), Lava.Device})
precompile(Tuple{Type{NamedTuple{(:next, :flags, :specialization_info), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.PipelineShaderStageCreateFlag, Ptr{Nothing}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags, :specialization_info), Tuple{Ptr{Nothing}, Vulkan.PipelineShaderStageCreateFlag, Ptr{Nothing}}}, Type{Vulkan._PipelineShaderStageCreateInfo}, Vulkan.ShaderStageFlag, Vulkan.ShaderModule, String})
precompile(Tuple{Type{NamedTuple{(:next, :flags, :cull_mode), T} where T<:Tuple}, Tuple{Ptr{Nothing}, UInt32, Vulkan.CullModeFlag}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags, :cull_mode), Tuple{Ptr{Nothing}, UInt32, Vulkan.CullModeFlag}}, Type{Vulkan._PipelineRasterizationStateCreateInfo}, Bool, Bool, Vulkan.PolygonMode, Vulkan.FrontFace, Bool, Vararg{Float32, 4}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, UInt32}}, Type{Vulkan._PipelineVertexInputStateCreateInfo}, Array{Vulkan._VertexInputBindingDescription, 1}, Array{Vulkan._VertexInputAttributeDescription, 1}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, UInt32}}, Type{Vulkan._PipelineInputAssemblyStateCreateInfo}, Vulkan.PrimitiveTopology, Bool})
precompile(Tuple{typeof(Base.convert), Type{Vulkan._PipelineViewportStateCreateInfo}, Vulkan.PipelineViewportStateCreateInfo})
precompile(Tuple{Type{NamedTuple{(:next, :flags, :viewports, :scissors), T} where T<:Tuple}, Tuple{Ptr{Nothing}, UInt32, Array{Vulkan._Viewport, 1}, Array{Vulkan._Rect2D, 1}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags, :viewports, :scissors), Tuple{Ptr{Nothing}, UInt32, Array{Vulkan._Viewport, 1}, Array{Vulkan._Rect2D, 1}}}, Type{Vulkan._PipelineViewportStateCreateInfo}})
precompile(Tuple{Type{NamedTuple{(:next, :flags, :sample_mask), T} where T<:Tuple}, Tuple{Ptr{Nothing}, UInt32, Ptr{Nothing}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags, :sample_mask), Tuple{Ptr{Nothing}, UInt32, Ptr{Nothing}}}, Type{Vulkan._PipelineMultisampleStateCreateInfo}, Vulkan.SampleCountFlag, Bool, Float32, Bool, Bool})
precompile(Tuple{Type{NamedTuple{(:next, :flags), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.PipelineColorBlendStateCreateFlag}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, Vulkan.PipelineColorBlendStateCreateFlag}}, Type{Vulkan._PipelineColorBlendStateCreateInfo}, Bool, Vulkan.LogicOp, Array{Vulkan._PipelineColorBlendAttachmentState, 1}, NTuple{4, Float32}})
precompile(Tuple{Type{NamedTuple{(:next, :flags, :vertex_input_state, :input_assembly_state, :tessellation_state, :viewport_state, :multisample_state, :depth_stencil_state, :color_blend_state, :dynamic_state, :render_pass, :base_pipeline_handle), T} where T<:Tuple}, Tuple{Vulkan.PipelineRenderingCreateInfo, Vulkan.PipelineCreateFlag, Vulkan._PipelineVertexInputStateCreateInfo, Vulkan._PipelineInputAssemblyStateCreateInfo, Ptr{Nothing}, Vulkan._PipelineViewportStateCreateInfo, Vulkan._PipelineMultisampleStateCreateInfo, Ptr{Nothing}, Vulkan._PipelineColorBlendStateCreateInfo, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags, :vertex_input_state, :input_assembly_state, :tessellation_state, :viewport_state, :multisample_state, :depth_stencil_state, :color_blend_state, :dynamic_state, :render_pass, :base_pipeline_handle), Tuple{Vulkan.PipelineRenderingCreateInfo, Vulkan.PipelineCreateFlag, Vulkan._PipelineVertexInputStateCreateInfo, Vulkan._PipelineInputAssemblyStateCreateInfo, Ptr{Nothing}, Vulkan._PipelineViewportStateCreateInfo, Vulkan._PipelineMultisampleStateCreateInfo, Ptr{Nothing}, Vulkan._PipelineColorBlendStateCreateInfo, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}}, Type{Vulkan._GraphicsPipelineCreateInfo}, Array{Vulkan._PipelineShaderStageCreateInfo, 1}, Vulkan._PipelineRasterizationStateCreateInfo, Vulkan.PipelineLayout, UInt32, Int32})
precompile(Tuple{typeof(Base.convert), Type{Vulkan._PipelineRenderingCreateInfo}, Vulkan.PipelineRenderingCreateInfo})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next,), Tuple{Ptr{Nothing}}}, Type{Vulkan._PipelineRenderingCreateInfo}, UInt32, Array{Vulkan.Format, 1}, Vulkan.Format, Vulkan.Format})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Vulkan._PipelineRenderingCreateInfo})
precompile(Tuple{typeof(Base.setindex!), Array{VulkanCore.LibVulkan.VkPipelineShaderStageCreateInfo, 1}, VulkanCore.LibVulkan.VkPipelineShaderStageCreateInfo, Int64})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Base.RefValue{VulkanCore.LibVulkan.VkPipelineRenderingCreateInfo}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkPipelineShaderStageCreateInfo}}, Array{VulkanCore.LibVulkan.VkPipelineShaderStageCreateInfo, 1}})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, Vulkan.PipelineCreateFlag, Int64, Ptr{VulkanCore.LibVulkan.VkPipelineShaderStageCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineVertexInputStateCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineInputAssemblyStateCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineTessellationStateCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineViewportStateCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineRasterizationStateCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineMultisampleStateCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineDepthStencilStateCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineColorBlendStateCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineDynamicStateCreateInfo}, Vulkan.PipelineLayout, Ptr{Nothing}, UInt32, Ptr{Nothing}, Int32})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{Vulkan._GraphicsPipelineCreateInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo}})
precompile(Tuple{typeof(Base.setindex!), Array{VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo, 1}, VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo, Int64})
precompile(Tuple{typeof(Base.ndims), Array{VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo, 1}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{Vulkan._GraphicsPipelineCreateInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo}}, Array{VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo, 1}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Tuple{Array{Vulkan.Pipeline, 1}, Vulkan.Result}, Vulkan.VulkanError}})
precompile(Tuple{typeof(LRUCache._constone), Lava.Pipeline})
precompile(Tuple{typeof(Base.getindex), Lava.HashTable{Lava.Pipeline}, UInt64})
precompile(Tuple{typeof(Base.length), Lava.HashTable{Lava.Pipeline}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Graphs.SimpleGraphs.var"#1#3"{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, Graphs.SimpleGraphs.var"#1#3"{Int64}}, Base.HasShape{1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Graphs.SimpleGraphs.var"#2#4"{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, Graphs.SimpleGraphs.var"#2#4"{Int64}}, Base.HasShape{1}})
precompile(Tuple{Type{Lava.RenderGraph}, Lava.Device})
precompile(Tuple{typeof(Lava.buffer), Lava.RenderGraph, Int64})
precompile(Tuple{typeof(Lava.image), Lava.RenderGraph, Vulkan.Format, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Lava.attachment), Lava.RenderGraph, Vulkan.Format})
precompile(Tuple{Lava.var"#attachment##kw", NamedTuple{(:samples,), Tuple{Int64}}, typeof(Lava.attachment), Lava.RenderGraph, Vulkan.Format})
precompile(Tuple{typeof(Base.:(|)), Vulkan.PipelineStageFlag2, Vulkan.PipelineStageFlag2})
precompile(Tuple{Type{NamedTuple{(:render_area, :stages), T} where T<:Tuple}, Tuple{Lava.RenderArea, Vulkan.PipelineStageFlag2}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:render_area, :stages), Tuple{Lava.RenderArea, Vulkan.PipelineStageFlag2}}, Type{Lava.RenderNode}, Function})
precompile(Tuple{typeof(Base.:(|)), Lava.ResourceType, Lava.ResourceType})
precompile(Tuple{typeof(Lava.add_resource_dependencies), Symbol, Expr})
precompile(Tuple{typeof(Lava.normalize), Expr})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Lava.var"#5#6"{typeof(Lava.rmlines)}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{typeof(Lava.rmlines)}}})
precompile(Tuple{Lava.var"#5#6"{typeof(Lava.rmlines)}, Expr})
precompile(Tuple{Lava.var"#5#6"{typeof(Lava.rmlines)}, Symbol})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Symbol}, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{typeof(Lava.rmlines)}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{typeof(Lava.rmlines)}}, Int64})
precompile(Tuple{Lava.var"#5#6"{typeof(Lava.rmlines)}, Float64})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Float64}, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{typeof(Lava.rmlines)}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{typeof(Lava.rmlines)}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Symbol, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{typeof(Lava.rmlines)}}, Int64, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Expr}, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{typeof(Lava.rmlines)}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{typeof(Lava.rmlines)}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Expr, 1}, Symbol, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Lava.var"#5#6"{Lava.var"#7#8"}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{Lava.var"#7#8"}}})
precompile(Tuple{Lava.var"#5#6"{Lava.var"#7#8"}, Expr})
precompile(Tuple{Lava.var"#5#6"{Lava.var"#7#8"}, Symbol})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Symbol}, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{Lava.var"#7#8"}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{Lava.var"#7#8"}}, Int64})
precompile(Tuple{Lava.var"#5#6"{Lava.var"#7#8"}, Float64})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Float64}, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{Lava.var"#7#8"}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{Lava.var"#7#8"}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{Lava.var"#7#8"}}, Int64, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Expr}, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{Lava.var"#7#8"}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Array{Any, 1}, Lava.var"#5#6"{Lava.var"#7#8"}}, Int64})
precompile(Tuple{typeof(Base.in), Symbol, Array{Any, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Lava.ResourceType})
precompile(Tuple{typeof(Lava.extract_special_usage), Symbol})
precompile(Tuple{typeof(Base.haskey), Dictionaries.Dictionary{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, Any}, Symbol, Tuple{Lava.ResourceType, Lava.MemoryAccess, Nothing, Int64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Expr, Lava.ResourceType})
precompile(Tuple{typeof(Lava.extract_special_usage), Expr})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{Any, Any}, Symbol, Tuple{Lava.ResourceType, Lava.MemoryAccess, Expr, Int64}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{Any, Any}, Symbol, Tuple{Lava.ResourceType, Lava.MemoryAccess, Nothing, Int64}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, Any}, Symbol, Dictionaries.Dictionary{Any, Any}})
precompile(Tuple{typeof(Base.getindex), Array{Expr, 1}, Int64})
precompile(Tuple{Lava.var"#5#6"{typeof(Lava.rmlines)}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{Lava.var"#5#6"{Lava.var"#7#8"}, Int64})
precompile(Tuple{typeof(Base.getindex), Dictionaries.Dictionary{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.:(∉)), Lava.MemoryAccess, Lava.MemoryAccess})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Dictionaries.Dictionary{Any, Any}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Lava.ResourceType, Lava.MemoryAccess, Nothing, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Tuple{Lava.ResourceType, Lava.MemoryAccess, Nothing, Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Tuple{Lava.ResourceType, Lava.MemoryAccess, Nothing, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Dictionaries.PairDictionary{Any, Any, Dictionaries.Dictionary{Any, Any}}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Lava.ResourceType, Lava.MemoryAccess, Expr, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Tuple{Lava.ResourceType, Lava.MemoryAccess, Expr, Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Tuple{Lava.ResourceType, Lava.MemoryAccess, Expr, Int64}}, Int64, Int64})
precompile(Tuple{Type{Lava.ResourceDependency}, Lava.ResourceType, Lava.MemoryAccess, Nothing, Int64})
precompile(Tuple{typeof(Lava.add_resource_dependency), Lava.RenderGraph, Lava.RenderNode, Lava.LogicalBuffer, Lava.ResourceDependency})
precompile(Tuple{typeof(Lava.add_resource_dependency), Lava.RenderGraph, Lava.RenderNode, Lava.BufferBlock{Lava.MemoryBlock}, Lava.ResourceDependency})
precompile(Tuple{typeof(Base.convert), Type{NTuple{4, Float32}}, NTuple{4, Float64}})
precompile(Tuple{Type{Lava.ResourceDependency}, Lava.ResourceType, Lava.MemoryAccess, NTuple{4, Float32}, Int64})
precompile(Tuple{Type{Vulkan.ImageUsageFlag}, Int64})
precompile(Tuple{Type{Vulkan.ImageAspectFlag}, Int64})
precompile(Tuple{typeof(Base.:(|)), Vulkan.ImageAspectFlag, Vulkan.ImageAspectFlag})
precompile(Tuple{typeof(Lava.add_resource_dependency), Lava.RenderGraph, Lava.RenderNode, Lava.LogicalAttachment, Lava.ResourceDependency})
precompile(Tuple{Type{NamedTuple{(:type, :access, :clear_value, :samples, :stages, :usage, :aspect), T} where T<:Tuple}, Tuple{Lava.ResourceType, Lava.MemoryAccess, NTuple{4, Float32}, Int64, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:type, :access, :clear_value, :samples, :stages, :usage, :aspect), Tuple{Lava.ResourceType, Lava.MemoryAccess, NTuple{4, Float32}, Int64, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag}}, Type{Lava.AttachmentUsage}})
precompile(Tuple{Type{NamedTuple{(:type, :access, :clear_value, :samples, :stages, :usage, :aspect), T} where T<:Tuple}, Tuple{Lava.ResourceType, Lava.MemoryAccess, Nothing, Int64, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:type, :access, :clear_value, :samples, :stages, :usage, :aspect), Tuple{Lava.ResourceType, Lava.MemoryAccess, Nothing, Int64, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag}}, Type{Lava.AttachmentUsage}})
precompile(Tuple{typeof(Lava.add_resource_dependency), Lava.RenderGraph, Lava.RenderNode, Lava.LogicalImage, Lava.ResourceDependency})
precompile(Tuple{Type{NamedTuple{(:overwrite,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Accessors.var"#setmacro##kw", NamedTuple{(:overwrite,), Tuple{Bool}}, typeof(Accessors.setmacro), Function, Expr})
precompile(Tuple{typeof(Accessors.parse_obj_optic), Expr})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.match), QuoteNode, QuoteNode, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Accessors.parse_obj_optics), Symbol})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.getproperty), Lava.RenderGraph, Symbol})
precompile(Tuple{typeof(Graphs.nv), Graphs.SimpleGraphs.SimpleDiGraph{Int64}})
precompile(Tuple{typeof(Graphs.ne), Graphs.SimpleGraphs.SimpleDiGraph{Int64}})
precompile(Tuple{typeof(Base.getproperty), Lava.RenderNode, Symbol})
precompile(Tuple{typeof(Base.getindex), Dictionaries.Dictionary{Base.UUID, Lava.ResourceUses}, Base.UUID})
precompile(Tuple{typeof(Base.getindex), Lava.ResourceUses, Lava.LogicalImage})
precompile(Tuple{typeof(Base.getproperty), Lava.ImageUsage, Symbol})
precompile(Tuple{typeof(Base.:(==)), Lava.ResourceType, Lava.ResourceType})
precompile(Tuple{typeof(Base.getindex), Lava.ResourceUses, Lava.LogicalAttachment})
precompile(Tuple{typeof(Base.getproperty), Lava.AttachmentUsage, Symbol})
precompile(Tuple{typeof(Base.:(==)), NTuple{4, Float32}, NTuple{4, Float32}})
precompile(Tuple{typeof(Base.mergewith), Function})
precompile(Tuple{Type{Lava.ResourceUses}, Lava.RenderGraph})
precompile(Tuple{typeof(Base.iterate), Dictionaries.Dictionary{Base.UUID, Lava.ResourceUses}})
precompile(Tuple{typeof(Base.iterate), Dictionaries.Dictionary{Base.UUID, Lava.ResourceUses}, Int64})
precompile(Tuple{typeof(Base.merge), Lava.ResourceUses, Lava.ResourceUses, Lava.ResourceUses, Vararg{Lava.ResourceUses}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getproperty), Tuple{Tuple{Lava.ResourceUses, Lava.ResourceUses, Lava.ResourceUses}, Base.RefValue{Symbol}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getproperty), Tuple{Tuple{Lava.ResourceUses, Lava.ResourceUses, Lava.ResourceUses}, Base.RefValue{Symbol}}}})
precompile(Tuple{Base.var"#reduce##kw", NamedTuple{(:init,), Tuple{Dictionaries.Dictionary{Base.UUID, Lava.BufferUsage}}}, typeof(Base.reduce), Function, Tuple{Dictionaries.Dictionary{Base.UUID, Lava.BufferUsage}, Dictionaries.Dictionary{Base.UUID, Lava.BufferUsage}, Dictionaries.Dictionary{Base.UUID, Lava.BufferUsage}}})
precompile(Tuple{Type{Base.BottomRF{Base.var"#198#199"{typeof(Base.merge)}}}, Function})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), Base.var"#198#199"{typeof(Base.merge)}, Dictionaries.Dictionary{Base.UUID, Lava.BufferUsage}, Tuple{Dictionaries.Dictionary{Base.UUID, Lava.BufferUsage}, Dictionaries.Dictionary{Base.UUID, Lava.BufferUsage}, Dictionaries.Dictionary{Base.UUID, Lava.BufferUsage}}})
precompile(Tuple{typeof(Base.mergewith!), typeof(Base.merge), Dictionaries.Dictionary{Base.UUID, Lava.BufferUsage}, Dictionaries.Dictionary{Base.UUID, Lava.BufferUsage}})
precompile(Tuple{Base.var"#reduce##kw", NamedTuple{(:init,), Tuple{Dictionaries.Dictionary{Base.UUID, Lava.ImageUsage}}}, typeof(Base.reduce), Function, Tuple{Dictionaries.Dictionary{Base.UUID, Lava.ImageUsage}, Dictionaries.Dictionary{Base.UUID, Lava.ImageUsage}, Dictionaries.Dictionary{Base.UUID, Lava.ImageUsage}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), Base.var"#198#199"{typeof(Base.merge)}, Dictionaries.Dictionary{Base.UUID, Lava.ImageUsage}, Tuple{Dictionaries.Dictionary{Base.UUID, Lava.ImageUsage}, Dictionaries.Dictionary{Base.UUID, Lava.ImageUsage}, Dictionaries.Dictionary{Base.UUID, Lava.ImageUsage}}})
precompile(Tuple{typeof(Base.mergewith!), typeof(Base.merge), Dictionaries.Dictionary{Base.UUID, Lava.ImageUsage}, Dictionaries.Dictionary{Base.UUID, Lava.ImageUsage}})
precompile(Tuple{Base.var"#reduce##kw", NamedTuple{(:init,), Tuple{Dictionaries.Dictionary{Base.UUID, Lava.AttachmentUsage}}}, typeof(Base.reduce), Function, Tuple{Dictionaries.Dictionary{Base.UUID, Lava.AttachmentUsage}, Dictionaries.Dictionary{Base.UUID, Lava.AttachmentUsage}, Dictionaries.Dictionary{Base.UUID, Lava.AttachmentUsage}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), Base.var"#198#199"{typeof(Base.merge)}, Dictionaries.Dictionary{Base.UUID, Lava.AttachmentUsage}, Tuple{Dictionaries.Dictionary{Base.UUID, Lava.AttachmentUsage}, Dictionaries.Dictionary{Base.UUID, Lava.AttachmentUsage}, Dictionaries.Dictionary{Base.UUID, Lava.AttachmentUsage}}})
precompile(Tuple{typeof(Base.mergewith!), typeof(Base.merge), Dictionaries.Dictionary{Base.UUID, Lava.AttachmentUsage}, Dictionaries.Dictionary{Base.UUID, Lava.AttachmentUsage}})
precompile(Tuple{typeof(Base.:(==)), Lava.MemoryAccess, Lava.MemoryAccess})
precompile(Tuple{typeof(Base.:(==)), Vulkan.PipelineStageFlag2, Vulkan.PipelineStageFlag2})
precompile(Tuple{typeof(Base.:(==)), Vulkan.ImageAspectFlag, Vulkan.ImageAspectFlag})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Vulkan.BufferUsageFlag})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Vulkan.ImageUsageFlag})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Vulkan.ImageAspectFlag})
precompile(Tuple{typeof(Lava.check_physical_resources), Lava.RenderGraph, Lava.ResourceUses})
precompile(Tuple{typeof(Base.deepcopy), Lava.ResourceUses})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Dictionaries.Indices{Base.UUID}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Base.UUID, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Lava.BufferUsage, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Lava.ImageUsage, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Lava.AttachmentUsage, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Lava.AttachmentUsage, 1}})
precompile(Tuple{typeof(Base.getproperty), Lava.PhysicalResources, Symbol})
precompile(Tuple{typeof(Base.getindex), Lava.ResourceUses, Base.UUID})
precompile(Tuple{typeof(Base.getproperty), Lava.ResourceUses, Symbol})
precompile(Tuple{Type{Accessors.PropertyLens{:usage}}})
precompile(Tuple{typeof(Accessors.opticcompose), Accessors.PropertyLens{:usage}})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", NTuple{4, Symbol}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:usage,), Tuple{Vulkan.BufferUsageFlag}}}})
precompile(Tuple{typeof(Accessors.set), Lava.BufferUsage, Accessors.PropertyLens{:usage}, Vulkan.BufferUsageFlag})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{Base.UUID, Lava.BufferUsage}, Base.UUID, Lava.BufferUsage})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Vulkan.BufferUsageFlag})
precompile(Tuple{typeof(Base.in), Expr, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Lava.materialize_logical_resources), Lava.RenderGraph, Lava.ResourceUses})
precompile(Tuple{Type{NamedTuple{(:format, :dims, :samples, :aspect, :access, :usage), T} where T<:Tuple}, Tuple{Vulkan.Format, Tuple{UInt32, UInt32}, Int64, Vulkan.ImageAspectFlag, Lava.MemoryAccess, Vulkan.ImageUsageFlag}})
precompile(Tuple{Lava.var"#attachment##kw", NamedTuple{(:format, :dims, :samples, :aspect, :access, :usage), Tuple{Vulkan.Format, Tuple{UInt32, UInt32}, Int64, Vulkan.ImageAspectFlag, Lava.MemoryAccess, Vulkan.ImageUsageFlag}}, typeof(Lava.attachment), Lava.Device})
precompile(Tuple{Type{Lava.ImageBlock{2, Lava.MemoryBlock}}, Vulkan.Image, Tuple{UInt32, UInt32}, Vulkan.Format, Int64, Int64, Int64, Vulkan.ImageUsageFlag, Array{Int64, 1}, Vulkan.SharingMode, Bool, Base.RefValue{Vulkan.ImageLayout}, Base.RefValue{Lava.MemoryBlock}})
precompile(Tuple{typeof(Base.insert!), Lava.PhysicalResources, Base.UUID, Lava.Attachment{Lava.ImageView{Lava.ImageBlock{2, Lava.MemoryBlock}}}})
precompile(Tuple{typeof(Base.getindex), Lava.PhysicalResources, Lava.LogicalAttachment})
precompile(Tuple{typeof(Base.:(==)), Vulkan.ImageUsageFlag, Vulkan.ImageUsageFlag})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", NTuple{7, Symbol}})
precompile(Tuple{Type{Lava.ResourceType}, Int64})
precompile(Tuple{Type{Lava.MemoryAccess}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{UnionAll, UnionAll, UnionAll}}, Tuple{UnionAll, UnionAll, UnionAll}})
precompile(Tuple{Type{NamedTuple{(:size, :usage, :memory_domain), T} where T<:Tuple}, Tuple{Int64, Vulkan.BufferUsageFlag, Lava.MemoryDomain}})
precompile(Tuple{typeof(Lava.bake), Lava.RenderGraph})
precompile(Tuple{Type{NamedTuple{(:type, :access, :stages, :usage, :aspect, :samples, :clear_value), T} where T<:Tuple}, Tuple{Lava.ResourceType, Lava.MemoryAccess, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag, Int64, Nothing}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:type, :access, :stages, :usage, :aspect, :samples, :clear_value), Tuple{Lava.ResourceType, Lava.MemoryAccess, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag, Int64, Nothing}}, NamedTuple{(:samples,), Tuple{Int64}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:type, :access, :stages, :usage, :aspect, :samples, :clear_value), Tuple{Lava.ResourceType, Lava.MemoryAccess, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag, Int64, Nothing}}})
precompile(Tuple{Type{Lava.AttachmentUsage}, Lava.ResourceType, Lava.MemoryAccess, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag, Int64, Nothing})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Lava.MemoryAccess})
precompile(Tuple{typeof(Base.something), Nothing, NTuple{4, Float32}})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.ResolveModeFlag}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.ImageLayout}, Vulkan.ImageLayout})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", NTuple{9, Symbol}})
precompile(Tuple{typeof(Base.:(==)), Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{typeof(Lava.rendering_info), Lava.BakedRenderGraph, Lava.RenderNode})
precompile(Tuple{typeof(Base.push!), Array{Vulkan.RenderingAttachmentInfo, 1}, Vulkan.RenderingAttachmentInfo})
precompile(Tuple{Type{NamedTuple{(:depth_attachment, :stencil_attachment), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Ptr{Nothing}}})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.RenderingFlag}, Int64})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:depth_attachment, :stencil_attachment), Tuple{Ptr{Nothing}, Ptr{Nothing}}}, Type{Vulkan.RenderingInfo}, Vulkan.Rect2D, Int64, Int64, Array{Vulkan.RenderingAttachmentInfo, 1}})
precompile(Tuple{typeof(Base.getproperty), Vulkan.RenderingInfo, Symbol})
precompile(Tuple{Type{Vulkan.Extent2D}, Int64, Int64})
precompile(Tuple{Type{Vulkan.Rect2D}, Vulkan.Offset2D, Vulkan.Extent2D})
precompile(Tuple{typeof(Base.:(==)), Vulkan.Rect2D, Vulkan.Rect2D})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Vulkan.RenderingAttachmentInfo, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Vulkan.RenderingAttachmentInfo, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Vulkan.RenderingAttachmentInfo, Symbol})
precompile(Tuple{typeof(Base.:(==)), Vulkan.ImageLayout, Vulkan.ImageLayout})
precompile(Tuple{typeof(Base.:(==)), Vulkan.AttachmentLoadOp, Vulkan.AttachmentLoadOp})
precompile(Tuple{typeof(Base.:(==)), Vulkan.AttachmentStoreOp, Vulkan.AttachmentStoreOp})
precompile(Tuple{Type{Lava.SynchronizationState}})
precompile(Tuple{Type{Lava.SyncRequirements}, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Lava.SyncRequirements}, Lava.SyncRequirements})
precompile(Tuple{Type{Vulkan.AccessFlag2}, Int64})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:stages,), Tuple{Vulkan.PipelineStageFlag2}}}})
precompile(Tuple{typeof(Lava.dependency_info!), Lava.SynchronizationState, Lava.BakedRenderGraph, Lava.RenderNode})
precompile(Tuple{typeof(Base.getproperty), Vulkan.DependencyInfo, Symbol})
precompile(Tuple{typeof(Base.length), Array{Vulkan.BufferMemoryBarrier2, 1}})
precompile(Tuple{typeof(Base.length), Array{Vulkan.ImageMemoryBarrier2, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.var"#104#105"}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Symbol, Expr}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.esc), Tuple{Tuple{Symbol, Expr}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.esc), Tuple{Tuple{Symbol, Expr}}}})
precompile(Tuple{typeof(Base.convert), Type{SPIRV.ExecutionModel}, SPIRV.ExecutionModel})
precompile(Tuple{typeof(Base.:(*)), Int64, Type{SPIRV.LiteralType{UInt32}}})
precompile(Tuple{typeof(Lava.shader_stage), SPIRV.ExecutionModel})
precompile(Tuple{typeof(Core.convert), Type{Vulkan.ShaderStageFlag}, Vulkan.ShaderStageFlag})
precompile(Tuple{typeof(SPIRV.UConvert), Type{UInt32}, Int64})
precompile(Tuple{typeof(Base.eltype), Type{Array{StaticArrays.SArray{Tuple{2}, Float32, 1, 2}, 1}}})
precompile(Tuple{typeof(SPIRV.ConvertSToF), Type{Float32}, Int64})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.DescriptorSet}, Vulkan.DescriptorSet})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.DescriptorSet, typeof(Base.identity), Vulkan.DescriptorPool}})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.DescriptorPool, Vulkan.var"#1182#1183"{Ptr{Nothing}, Lava.Device}, Vulkan.Device}})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.DescriptorSetLayout}, Vulkan.DescriptorSetLayout})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.DescriptorSetLayout, Vulkan.var"#1178#1179"{Ptr{Nothing}, Lava.Device}, Vulkan.Device}})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.DescriptorPool}, Vulkan.DescriptorPool})
precompile(Tuple{typeof(SPIRV.promote_to_interface_block), SPIRV.IntegerType, SPIRV.StorageClass})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.IntegerType, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.:(==)), SPIRV.IntegerType, SPIRV.IntegerType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{UInt32}, SPIRV.IntegerType})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.StorageClass, SPIRV.IntegerType})
precompile(Tuple{Base.Broadcast.var"##broadcasted_kwsyntax#42", Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(Base.Broadcast.broadcasted_kwsyntax), typeof(SPIRV.spir_type!), SPIRV.IR, Vararg{Any}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(SPIRV.spir_type!)}, Tuple{Base.RefValue{SPIRV.IR}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(SPIRV.spir_type!)}, Tuple{Base.RefValue{SPIRV.IR}, Array{Any, 1}}}})
precompile(Tuple{Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(SPIRV.spir_type!)}, SPIRV.IR, Vararg{Any}})
precompile(Tuple{SPIRV.var"#spir_type!##kw", NamedTuple{(:record_jtype,), Tuple{Bool}}, typeof(SPIRV.spir_type!), SPIRV.IR, Type})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{UInt64}, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(SPIRV.spir_type!)}, Tuple{Base.RefValue{SPIRV.IR}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{SPIRV.IntegerType}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.IntegerType, 1}, SPIRV.IntegerType, Int64})
precompile(Tuple{typeof(Base.ndims), Array{SPIRV.IntegerType, 1}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.IntegerType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(SPIRV.spir_type!)}, Tuple{Base.RefValue{SPIRV.IR}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Core.SimpleVector})
precompile(Tuple{Type{Dictionaries.Dictionary{I, T} where T where I}, Base.UnitRange{Int64}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{SPIRV.StructType}, Array{SPIRV.IntegerType, 1}, Dictionaries.Dictionary{Any, Any}, Dictionaries.Dictionary{Int64, Symbol}})
precompile(Tuple{typeof(SPIRV.promote_to_interface_block), SPIRV.StructType, SPIRV.StorageClass})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.StructType, SPIRV.StructType})
precompile(Tuple{typeof(Base.:(==)), SPIRV.StructType, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Lava.PushConstantData}, SPIRV.StructType})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.StructType})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.SSAValue, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.iterate), Array{SPIRV.SPIRType, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.SSAValue, SPIRV.StructType})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.StorageClass, SPIRV.StructType})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.StructType})
precompile(Tuple{typeof(Base.argtail), Type, Type, Vararg{Type}})
precompile(Tuple{typeof(Base.getproperty), GlobalRef, Symbol})
precompile(Tuple{typeof(SPIRV.get_type), Core.Argument, SPIRV.CFG})
precompile(Tuple{typeof(Base.findfirst), Function, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._findfirst_rec), Base.Fix2{typeof(Base.:(==)), Symbol}, Int64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.collect), Tuple{Core.Argument, UInt32}})
precompile(Tuple{typeof(SPIRV.load_if_variable!), SPIRV.Block, SPIRV.IR, SPIRV.IRMapping, SPIRV.FunctionDefinition, Core.Argument})
precompile(Tuple{typeof(SPIRV.load_if_variable!), SPIRV.Block, SPIRV.IR, SPIRV.IRMapping, SPIRV.FunctionDefinition, UInt32})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, SPIRV.SSAValue, SPIRV.SSAValue, SPIRV.SSAValue, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.SSAValue, UInt32}})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{Tuple{Array{StaticArrays.SArray{Tuple{2}, Float32, 1, 2}, 1}}}}})
precompile(Tuple{Type{NamedTuple{(:n, :t), T} where T<:Tuple}, Tuple{Int64, DataType}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(SPIRV.spir_type!)}, Tuple{Base.RefValue{SPIRV.IR}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{SPIRV.FloatType}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.FloatType, 1}, SPIRV.FloatType, Int64})
precompile(Tuple{typeof(Base.ndims), Array{SPIRV.FloatType, 1}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.FloatType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(SPIRV.spir_type!)}, Tuple{Base.RefValue{SPIRV.IR}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{SPIRV.StructType}, Array{SPIRV.FloatType, 1}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Tuple{Float32, Float32}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(SPIRV.spir_type!)}, Tuple{Base.RefValue{SPIRV.IR}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{SPIRV.StructType}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.StructType, 1}, SPIRV.StructType, Int64})
precompile(Tuple{typeof(Base.ndims), Array{SPIRV.StructType, 1}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.StructType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(SPIRV.spir_type!)}, Tuple{Base.RefValue{SPIRV.IR}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Dictionaries.Dictionary{I, T} where T where I}, Base.UnitRange{Int64}, Tuple{Symbol}})
precompile(Tuple{Type{SPIRV.StructType}, Array{SPIRV.StructType, 1}, Dictionaries.Dictionary{Any, Any}, Dictionaries.Dictionary{Int64, Symbol}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{StaticArrays.SArray{Tuple{2}, Float32, 1, 2}}, SPIRV.StructType})
precompile(Tuple{Type{SPIRV.ArrayType}, SPIRV.StructType, Nothing})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.ArrayType, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.:(==)), SPIRV.ArrayType, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Array{StaticArrays.SArray{Tuple{2}, Float32, 1, 2}, 1}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(SPIRV.spir_type!)}, Tuple{Base.RefValue{SPIRV.IR}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{SPIRV.ArrayType}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.ArrayType, 1}, SPIRV.ArrayType, Int64})
precompile(Tuple{typeof(Base.ndims), Array{SPIRV.ArrayType, 1}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.ArrayType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(SPIRV.spir_type!)}, Tuple{Base.RefValue{SPIRV.IR}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{SPIRV.StructType}, Array{SPIRV.ArrayType, 1}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Tuple{Array{StaticArrays.SArray{Tuple{2}, Float32, 1, 2}, 1}}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.PointerType, SPIRV.PointerType})
precompile(Tuple{typeof(Base.:(==)), SPIRV.PointerType, SPIRV.PointerType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Pointer{Tuple{Array{StaticArrays.SArray{Tuple{2}, Float32, 1, 2}, 1}}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.SSAValue, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.SSAValue}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, SPIRV.SSAValue, SPIRV.SSAValue, Array{SPIRV.SSAValue, 1}})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{StaticArrays.SArray{Tuple{2}, Float32, 1, 2}}}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Pointer{StaticArrays.SArray{Tuple{2}, Float32, 1, 2}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(SPIRV.storage_class), Core.SSAValue, SPIRV.IR, SPIRV.IRMapping, SPIRV.FunctionDefinition})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.SSAValue, SPIRV.SSAValue, SPIRV.SSAValue}})
precompile(Tuple{typeof(SPIRV.get_type), Core.SSAValue, SPIRV.CFG})
precompile(Tuple{typeof(Base.findfirst), Function, Tuple{Symbol}})
precompile(Tuple{Base.Fix2{typeof(Base.:(==)), Symbol}, Symbol})
precompile(Tuple{typeof(Base.collect), Tuple{Core.SSAValue, UInt32}})
precompile(Tuple{typeof(Base.collect), NTuple{4, SPIRV.SSAValue}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.IntegerType})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.StructType})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Lava.PushConstantData}})
precompile(Tuple{typeof(SPIRV.add_offsets!), SPIRV.IR, Type, SPIRV.StructType, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Base.empty), Base.Set{Any}, Type{SPIRV.StorageClass}})
precompile(Tuple{typeof(Base.push!), Base.Set{SPIRV.StorageClass}, SPIRV.StorageClass})
precompile(Tuple{typeof(Base.grow_to!), Base.Set{SPIRV.StorageClass}, Base.Generator{Base.Iterators.Filter{SPIRV.var"#72#74"{SPIRV.StructType}, SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}}, SPIRV.var"#71#73"}, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Base.UnitRange{Int64}, Tuple{Symbol, Symbol, Symbol}, Tuple{DataType, DataType, DataType}}})
precompile(Tuple{typeof(Base.map), Base.Iterators.var"#5#6", Tuple{Base.UnitRange{Int64}, Tuple{Symbol, Symbol, Symbol}, Tuple{DataType, DataType, DataType}}})
precompile(Tuple{typeof(Base.argtail), Tuple{}, Tuple{}, Vararg{Tuple{}}})
precompile(Tuple{typeof(Base.argtail), Base.Missing, Base.Missing, Vararg{Base.Missing}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Base.UnitRange{Int64}, Tuple{Symbol, Symbol, Symbol}, Tuple{DataType, DataType, DataType}}, Tuple{Tuple{}, Tuple{}, Tuple{}}})
precompile(Tuple{typeof(SPIRV.alignment), SPIRV.VulkanLayout, SPIRV.IntegerType, Base.Set{SPIRV.StorageClass}, Bool})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{SPIRV.Decoration, Array{Any, 1}}, SPIRV.Decoration, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.get), Type{Dictionaries.Dictionary{SPIRV.Decoration, Array{Any, 1}}}, Dictionaries.Dictionary{SPIRV.SSAValue, Dictionaries.Dictionary{SPIRV.Decoration, Array{Any, 1}}}, SPIRV.SSAValue})
precompile(Tuple{typeof(SPIRV.storage_classes), SPIRV.IR, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.size), SPIRV.IntegerType})
precompile(Tuple{typeof(Base.map), typeof(tuple), Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Base.UnitRange{Int64}, Tuple{Symbol, Symbol, Symbol}, Tuple{DataType, DataType, DataType}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Tuple{Float32, Float32}}})
precompile(Tuple{typeof(Base.fieldnames), Type{Tuple{Float32, Float32}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Base.UnitRange{Int64}, Tuple{Int64, Int64}, Tuple{DataType, DataType}}})
precompile(Tuple{typeof(Base.map), Base.Iterators.var"#5#6", Tuple{Base.UnitRange{Int64}, Tuple{Int64, Int64}, Tuple{DataType, DataType}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Base.UnitRange{Int64}, Tuple{Int64, Int64}, Tuple{DataType, DataType}}, Tuple{Tuple{}, Tuple{}, Tuple{}}})
precompile(Tuple{typeof(SPIRV.alignment), SPIRV.VulkanLayout, SPIRV.FloatType, Base.Set{Any}, Bool})
precompile(Tuple{typeof(SPIRV.storage_classes), SPIRV.IR, SPIRV.FloatType})
precompile(Tuple{typeof(Base.size), SPIRV.FloatType})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Base.UnitRange{Int64}, Tuple{Int64, Int64}, Tuple{DataType, DataType}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{StaticArrays.SArray{Tuple{2}, Float32, 1, 2}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Base.UnitRange{Int64}, Tuple{Symbol}, Tuple{DataType}}})
precompile(Tuple{typeof(Base.map), Base.Iterators.var"#5#6", Tuple{Base.UnitRange{Int64}, Tuple{Symbol}, Tuple{DataType}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Base.UnitRange{Int64}, Tuple{Symbol}, Tuple{DataType}}, Tuple{Tuple{}, Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(SPIRV.scalar_alignment), typeof(Base.max)}, Type{SPIRV.SPIRType}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(SPIRV.base_alignment), typeof(Base.max)}, Type{SPIRV.SPIRType}})
precompile(Tuple{typeof(SPIRV.alignment), SPIRV.VulkanLayout, SPIRV.StructType, Base.Set{SPIRV.StorageClass}, Bool})
precompile(Tuple{typeof(SPIRV.base_alignment), SPIRV.FloatType})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Base.UnitRange{Int64}, Tuple{Symbol}, Tuple{DataType}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.ArrayType})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Array{StaticArrays.SArray{Tuple{2}, Float32, 1, 2}, 1}}})
precompile(Tuple{typeof(Base.getproperty), SPIRV.ArrayType, Symbol})
precompile(Tuple{typeof(SPIRV.add_stride!), SPIRV.IR, SPIRV.ArrayType, Type, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Base.haskey), Dictionaries.Dictionary{SPIRV.Decoration, Array{Any, 1}}, SPIRV.Decoration})
precompile(Tuple{typeof(SPIRV.storage_classes), SPIRV.IR, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{SPIRV.Decoration, Array{Any, 1}}, SPIRV.Decoration, Array{UInt32, 1}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Tuple{Array{StaticArrays.SArray{Tuple{2}, Float32, 1, 2}, 1}}}})
precompile(Tuple{typeof(Base.fieldnames), Type{Tuple{Array{StaticArrays.SArray{Tuple{2}, Float32, 1, 2}, 1}}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Base.UnitRange{Int64}, Tuple{Int64}, Tuple{DataType}}})
precompile(Tuple{typeof(Base.map), Base.Iterators.var"#5#6", Tuple{Base.UnitRange{Int64}, Tuple{Int64}, Tuple{DataType}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Base.UnitRange{Int64}, Tuple{Int64}, Tuple{DataType}}, Tuple{Tuple{}, Tuple{}, Tuple{}}})
precompile(Tuple{typeof(SPIRV.alignment), SPIRV.VulkanLayout, SPIRV.ArrayType, Base.Set{SPIRV.StorageClass}, Bool})
precompile(Tuple{typeof(SPIRV.scalar_alignment), SPIRV.StructType})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(SPIRV.scalar_alignment), Function, SPIRV.StructType})
precompile(Tuple{typeof(SPIRV.scalar_alignment), SPIRV.FloatType})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Base.UnitRange{Int64}, Tuple{Int64}, Tuple{DataType}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.PointerType})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Pointer{Tuple{Array{StaticArrays.SArray{Tuple{2}, Float32, 1, 2}, 1}}}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Pointer{StaticArrays.SArray{Tuple{2}, Float32, 1, 2}}}})
precompile(Tuple{typeof(Base.push!), Array{Any, 1}, SPIRV.MemoryAccess, UInt32})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ExecutionModel, SPIRV.SSAValue, String, SPIRV.SSAValue, SPIRV.SSAValue, SPIRV.SSAValue}})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.SSAValue, SPIRV.IntegerType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.SSAValue, SPIRV.StructType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.SSAValue, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.SSAValue, SPIRV.Decoration}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.SSAValue, UInt32, SPIRV.Decoration, UInt32}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.IntegerType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.IntegerType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, Any}, SPIRV.SSAValue, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.StructType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.StructType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, Any}, SPIRV.SSAValue, SPIRV.StructType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.ArrayType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.ArrayType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, Any}, SPIRV.SSAValue, SPIRV.ArrayType})
precompile(Tuple{SPIRV.var"#58#59"{SPIRV.IR}, Pair{SPIRV.SSAValue, SPIRV.IntegerType}})
precompile(Tuple{SPIRV.var"#58#59"{SPIRV.IR}, Pair{SPIRV.SSAValue, SPIRV.StructType}})
precompile(Tuple{SPIRV.var"#37#38"{SPIRV.IR}, SPIRV.IntegerType})
precompile(Tuple{SPIRV.var"#37#38"{SPIRV.IR}, SPIRV.FloatType})
precompile(Tuple{SPIRV.var"#37#38"{SPIRV.IR}, SPIRV.StructType})
precompile(Tuple{SPIRV.var"#58#59"{SPIRV.IR}, Pair{SPIRV.SSAValue, SPIRV.ArrayType}})
precompile(Tuple{SPIRV.var"#37#38"{SPIRV.IR}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.reinterpret), Type{UInt32}, UInt32})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.MemoryAccess, String})
precompile(Tuple{Type{UInt32}, SPIRV.MemoryAccess})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.MemoryAccess})
precompile(Tuple{typeof(Base.merge), Lava.ResourceUses})
precompile(Tuple{typeof(Base.deepcopy), Lava.BakedRenderGraph})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Vulkan.Device})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Vulkan.PhysicalDevice})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Vulkan.Instance})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Base.Threads.Atomic{UInt64}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Lava.QueueDispatch})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Dictionaries.Indices{Int64}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Array{Lava.Queue, 1}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Array{Lava.Queue, 1}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Lava.Queue, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Lava.Queue, 1}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Vulkan.Queue})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, LRUCache.LRU{UInt64, Lava.Pipeline}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{UInt64, Tuple{Lava.Pipeline, LRUCache.LinkedNode{UInt64}, Int64}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Vulkan.Pipeline})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, LRUCache.LRU{UInt64, Lava.PipelineLayout}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{UInt64, Tuple{Lava.PipelineLayout, LRUCache.LinkedNode{UInt64}, Int64}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Vulkan.PipelineLayout})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Dictionaries.Indices{Vulkan.PipelineLayout}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Vulkan.PipelineLayout, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Vulkan.PipelineLayout, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Lava.PipelineLayout, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Lava.PipelineLayout, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Vulkan.DescriptorSetLayout, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Vulkan.DescriptorSetLayout, 1}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Vulkan.DescriptorSetLayout})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Vulkan.GraphicsPipelineCreateInfo, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Vulkan.GraphicsPipelineCreateInfo, 1}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Dictionaries.Indices{Lava.ShaderSource}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Lava.ShaderSource, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Lava.ShaderSource, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Symbol, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Lava.Shader, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Lava.Shader, 1}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Vulkan.ShaderModule})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Vulkan.PushConstantRange, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Vulkan.SpecializationInfo, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Vulkan.SpecializationInfo, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Vulkan.SemaphoreSubmitInfo, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Vulkan.SemaphoreSubmitInfo, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Vulkan.CommandPool, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Vulkan.CommandPool, 1}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Vulkan.CommandPool})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Lava.PhysicalBuffer, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Lava.PhysicalBuffer, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Lava.PhysicalImage, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Lava.PhysicalImage, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Lava.PhysicalAttachment, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Lava.PhysicalAttachment, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Vulkan.Fence, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Vulkan.Fence, 1}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Vulkan.Fence})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, LRUCache.LinkedNode{UInt64}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, LRUCache.CyclicOrderedSet{UInt64}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Threads.SpinLock, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Lava.LinearAllocator})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Vulkan.Buffer})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Int8, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Base.RefValue{Lava.MemoryBlock}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Vulkan.DeviceMemory})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Base.RefValue{Bool}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Base.RefValue{Ptr{Nothing}}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Vulkan.DescriptorPool})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Vulkan.DescriptorSet})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Dictionaries.Indices{Vulkan.DescriptorType}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Vulkan.DescriptorType, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Array{Vulkan.DescriptorImageInfo, 1}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Array{Vulkan.DescriptorImageInfo, 1}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Vulkan.DescriptorImageInfo, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Vulkan.DescriptorImageInfo, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt32, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Base.RefValue{Lava.BufferBlock{Lava.MemoryBlock}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Lava.RenderNode, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Lava.RenderNode, 1}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Vulkan.Image})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Base.RefValue{Vulkan.ImageLayout}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Vulkan.ImageView})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Lava.ResourceUses, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Lava.ResourceUses, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), NTuple{4, Float32}, Base.IdDict{Any, Any}})
precompile(Tuple{Type{NamedTuple{(:depth_attachment, :stencil_attachment), T} where T<:Tuple}, Tuple{Vulkan.RenderingAttachmentInfo, Ptr{Nothing}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:depth_attachment, :stencil_attachment), Tuple{Vulkan.RenderingAttachmentInfo, Ptr{Nothing}}}, Type{Vulkan.RenderingInfo}, Vulkan.Rect2D, Int64, Int64, Array{Vulkan.RenderingAttachmentInfo, 1}})
precompile(Tuple{typeof(Base.getproperty), Lava.BakedRenderGraph, Symbol})
precompile(Tuple{Type{Vulkan.ClearColorValue}, NTuple{4, Float32}})
precompile(Tuple{Type{Vulkan.ClearValue}, Vulkan.ClearColorValue})
precompile(Tuple{Type{Vulkan.RenderingAttachmentInfo}, Ptr{Nothing}, Vulkan.ImageView, Vulkan.ImageLayout, Vulkan.ResolveModeFlag, Ptr{Nothing}, Vulkan.ImageLayout, Vulkan.AttachmentLoadOp, Vulkan.AttachmentStoreOp, Vulkan.ClearValue})
precompile(Tuple{typeof(Base.vect), Vulkan.RenderingAttachmentInfo})
precompile(Tuple{Type{Vulkan.RenderingInfo}, Ptr{Nothing}, Int64, Vulkan.Rect2D, Int64, Int64, Array{Vulkan.RenderingAttachmentInfo, 1}, Vulkan.RenderingAttachmentInfo, Ptr{Nothing}})
precompile(Tuple{typeof(Base.:(==)), Vulkan.RenderingInfo, Vulkan.RenderingInfo})
precompile(Tuple{typeof(Base.isequal), Vulkan.RenderingAttachmentInfo, Vulkan.RenderingAttachmentInfo})
precompile(Tuple{typeof(Base.:(==)), Vulkan.RenderingAttachmentInfo, Vulkan.RenderingAttachmentInfo})
precompile(Tuple{typeof(Base.isequal), Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.getindex), Lava.PhysicalResources, Lava.LogicalImage})
precompile(Tuple{Type{Vulkan.ImageSubresourceRange}, Vulkan.ImageAspectFlag, Vararg{Int64, 4}})
precompile(Tuple{Type{Vulkan.ImageMemoryBarrier2}, Ptr{Nothing}, Int64, Int64, Int64, Int64, Vulkan.ImageLayout, Vulkan.ImageLayout, Int64, Int64, Vulkan.Image, Vulkan.ImageSubresourceRange})
precompile(Tuple{typeof(Base.getindex), Array{Vulkan.ImageMemoryBarrier2, 1}, Int64})
precompile(Tuple{typeof(Base.:(==)), Vulkan.ImageMemoryBarrier2, Vulkan.ImageMemoryBarrier2})
precompile(Tuple{Type{Vulkan.DependencyFlag}, Int64})
precompile(Tuple{typeof(Base.vect), Vulkan.ImageMemoryBarrier2, Vararg{Vulkan.ImageMemoryBarrier2}})
precompile(Tuple{Type{Vulkan.DependencyInfo}, Ptr{Nothing}, Vulkan.DependencyFlag, Array{Any, 1}, Array{Any, 1}, Array{Vulkan.ImageMemoryBarrier2, 1}})
precompile(Tuple{typeof(Base.:(==)), Vulkan.DependencyInfo, Vulkan.DependencyInfo})
precompile(Tuple{typeof(Base.isempty), Lava.HashTable{Lava.Pipeline}})
precompile(Tuple{Type{Lava.PushConstantData}, Int64, Int64, Int64})
precompile(Tuple{Type{Lava.DrawState}, Lava.RenderState, Lava.ProgramInvocationState, Lava.PushConstantData})
precompile(Tuple{typeof(Base.convert), Type{Lava.DrawState}, Lava.DrawState})
precompile(Tuple{typeof(Lava.record_commands!), Lava.BakedRenderGraph})
precompile(Tuple{typeof(Base.convert), Type{Vulkan.SamplerCreateFlag}, Int64})
precompile(Tuple{Type{NamedTuple{(:next, :flags), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.SamplerCreateFlag}})
precompile(Tuple{typeof(Base.convert), Type{UInt32}, Vulkan.SamplerCreateFlag})
precompile(Tuple{Lava.var"##s13#22", Any, Any, Any})
precompile(Tuple{typeof(Lava.has_parent), Type{Vulkan.Sampler}})
precompile(Tuple{typeof(Lava.parent_handle_type), Type{Vulkan.Sampler}})
precompile(Tuple{typeof(Lava.has_parent), Type{Vulkan.Device}})
precompile(Tuple{typeof(Lava.parent_handle_type), Type{Vulkan.Device}})
precompile(Tuple{typeof(Lava.has_parent), Type{Vulkan.PhysicalDevice}})
precompile(Tuple{typeof(Lava.parent_handle_type), Type{Vulkan.PhysicalDevice}})
precompile(Tuple{typeof(Lava.has_parent), Type{Vulkan.Instance}})
precompile(Tuple{typeof(Lava.empty_handle), Type{Vulkan.Instance}})
precompile(Tuple{typeof(Lava.empty_handle), Type{Vulkan.PhysicalDevice}})
precompile(Tuple{typeof(Lava.empty_handle), Type{Vulkan.Device}})
precompile(Tuple{typeof(Lava.has_parent), Type{Vulkan.ImageView}})
precompile(Tuple{typeof(Lava.parent_handle_type), Type{Vulkan.ImageView}})
precompile(Tuple{typeof(CompositionsBase.opcompose), Accessors.PropertyLens{:push_data}, Vararg{Any}})
precompile(Tuple{typeof(Accessors.opticcompose), Accessors.PropertyLens{:push_data}, Vararg{Any}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:material_data,), Tuple{UInt64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:push_data,), Tuple{Lava.PushConstantData}}}})
precompile(Tuple{GeometryExperiments.var"##s29#7", Vararg{Any, 5}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.StepRange{Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.ntuple), GeometryExperiments.var"#8#9", Int64})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.OrdinalRange{Int64, Int64}, N}} where N}, Tuple{Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getproperty), Tuple{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}}}, Base.RefValue{Symbol}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.getproperty), Tuple{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}}}, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.:(^)), Int64, Int64})
precompile(Tuple{StaticArrays.var"##s27#6", Any, Any, Any, Any, Any, Type, Type, Type, Any})
precompile(Tuple{typeof(Base._all), StaticArrays.var"#7#8", Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{4}}})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{4}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{4}}})
precompile(Tuple{StaticArrays.var"##s27#2", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.ntuple), StaticArrays.var"#3#4", Base.Val{4}})
precompile(Tuple{typeof(Base.ntuple), StaticArrays.var"#3#4", Base.Val{2}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Float32, Float32}}, Tuple{Float32, Float32}})
precompile(Tuple{typeof(Base.convert), Type{NTuple{4, StaticArrays.SArray{Tuple{2}, Float32, 1, 2}}}, NTuple{4, StaticArrays.SArray{Tuple{2}, Float32, 1, 2}}})
precompile(Tuple{Type{GeometryExperiments.PointSet{Dim, T, V} where V<:AbstractArray{StaticArrays.SArray{Tuple{Dim}, T, 1, Dim}, 1} where T where Dim}, StaticArrays.SArray{Tuple{4}, StaticArrays.SArray{Tuple{2}, Float32, 1, 2}, 1, 4}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{4}}})
precompile(Tuple{typeof(Base.map), Type{StaticArrays.SOneTo{n} where n}, Tuple{Int64}})
precompile(Tuple{typeof(StaticArrays._axes), StaticArrays.Size{(4,)}})
precompile(Tuple{typeof(Base.iterate), StaticArrays.SOneTo{4}})
precompile(Tuple{typeof(StaticArrays._axes), StaticArrays.Size{(2,)}})
precompile(Tuple{typeof(Base.argtail), StaticArrays.SOneTo{2}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}})
precompile(Tuple{Type{StaticArrays.Size{()}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Tuple{Int64}})
precompile(Tuple{StaticArrays.var"##s27#163", Vararg{Any, 6}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#164#166", Core.SimpleVector})
precompile(Tuple{typeof(Base.collect), Base.Generator{Core.SimpleVector, StaticArrays.var"#164#166"}})
precompile(Tuple{StaticArrays.var"#164#166", Type})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{}}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.ndims), Array{Tuple{}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{}, 1}, Tuple{}, Base.Generator{Core.SimpleVector, StaticArrays.var"#164#166"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{}, 1}, Tuple{Int64}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Vararg{Int64}}, 1}, Base.Generator{Core.SimpleVector, StaticArrays.var"#164#166"}, Int64, Int64})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.OrdinalRange{Int64, Int64}, N}} where N}, Tuple{Int64}})
precompile(Tuple{typeof(Base.similar), Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, Type{Expr}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Tuple{Vararg{Int64}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#165#167"{Base.IteratorsMD.CartesianIndex{1}}, Base.Iterators.Enumerate{Array{Tuple{Vararg{Int64}}, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Tuple{Vararg{Int64}}, 1}}, StaticArrays.var"#165#167"{Base.IteratorsMD.CartesianIndex{1}}}})
precompile(Tuple{StaticArrays.var"#165#167"{Base.IteratorsMD.CartesianIndex{1}}, Tuple{Int64, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Tuple{Vararg{Int64}}, 1}}, StaticArrays.var"#165#167"{Base.IteratorsMD.CartesianIndex{1}}}, Tuple{Int64, Int64}})
precompile(Tuple{StaticArrays.var"#165#167"{Base.IteratorsMD.CartesianIndex{1}}, Tuple{Int64, Tuple{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{Int64, Base.IteratorsMD.CartesianIndex{1}}})
precompile(Tuple{typeof(Base.iterate), StaticArrays.SOneTo{4}, Int64})
precompile(Tuple{typeof(Base.convert), Type{GeometryExperiments.PointSet{2, Float32, StaticArrays.SArray{Tuple{4}, StaticArrays.SArray{Tuple{2}, Float32, 1, 2}, 1, 4}}}, GeometryExperiments.PointSet{2, Float32, StaticArrays.SArray{Tuple{4}, StaticArrays.SArray{Tuple{2}, Float32, 1, 2}, 1, 4}}})
precompile(Tuple{typeof(Base.iterate), GeometryExperiments.PointSet{2, Float32, StaticArrays.SArray{Tuple{4}, StaticArrays.SArray{Tuple{2}, Float32, 1, 2}, 1, 4}}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), StaticArrays.SArray{Tuple{2}, Float32, 1, 2}})
precompile(Tuple{Type{GeometryExperiments.UniformScaling{T} where T}, Float32})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, GeometryExperiments.UniformScaling{Float32}, GeometryExperiments.PointSet{2, Float32, StaticArrays.SArray{Tuple{4}, StaticArrays.SArray{Tuple{2}, Float32, 1, 2}, 1, 4}}})
precompile(Tuple{typeof(Base.similar), Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, Type{Expr}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{GeometryExperiments.PointSet{2, Float32, StaticArrays.SArray{Tuple{4}, StaticArrays.SArray{Tuple{2}, Float32, 1, 2}, 1, 4}}, GeometryExperiments.UniformScaling{Float32}}})
precompile(Tuple{GeometryExperiments.UniformScaling{Float32}, StaticArrays.SArray{Tuple{2}, Float32, 1, 2}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Float32})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Float32, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:vertex_data,), Tuple{UInt64}}}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.Sampler, Vulkan.VulkanError}})
precompile(Tuple{Type{NamedTuple{(:next, :input_assembly_state, :vertex_input_state, :viewport_state, :multisample_state, :color_blend_state, :depth_stencil_state), T} where T<:Tuple}, Tuple{Vulkan.PipelineRenderingCreateInfo, Vulkan.PipelineInputAssemblyStateCreateInfo, Vulkan.PipelineVertexInputStateCreateInfo, Vulkan.PipelineViewportStateCreateInfo, Vulkan.PipelineMultisampleStateCreateInfo, Vulkan.PipelineColorBlendStateCreateInfo, Vulkan.PipelineDepthStencilStateCreateInfo}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :input_assembly_state, :vertex_input_state, :viewport_state, :multisample_state, :color_blend_state, :depth_stencil_state), Tuple{Vulkan.PipelineRenderingCreateInfo, Vulkan.PipelineInputAssemblyStateCreateInfo, Vulkan.PipelineVertexInputStateCreateInfo, Vulkan.PipelineViewportStateCreateInfo, Vulkan.PipelineMultisampleStateCreateInfo, Vulkan.PipelineColorBlendStateCreateInfo, Vulkan.PipelineDepthStencilStateCreateInfo}}, Type{Vulkan.GraphicsPipelineCreateInfo}, Array{Vulkan.PipelineShaderStageCreateInfo, 1}, Vulkan.PipelineRasterizationStateCreateInfo, Vulkan.PipelineLayout, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Lava.CompactRecord, 1}, Dictionaries.Dictionary{Lava.ProgramInstance, UInt64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Lava.CompactRecord, 1}, Dictionaries.Dictionary{Lava.ProgramInstance, UInt64}}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:next, :flags), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.PipelineDepthStencilStateCreateFlag}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, Vulkan.PipelineDepthStencilStateCreateFlag}}, Type{Vulkan._PipelineDepthStencilStateCreateInfo}, Bool, Bool, Vulkan.CompareOp, Bool, Bool, Vulkan._StencilOpState, Vulkan._StencilOpState, Float32, Float32})
precompile(Tuple{Type{NamedTuple{(:next, :flags, :vertex_input_state, :input_assembly_state, :tessellation_state, :viewport_state, :multisample_state, :depth_stencil_state, :color_blend_state, :dynamic_state, :render_pass, :base_pipeline_handle), T} where T<:Tuple}, Tuple{Vulkan.PipelineRenderingCreateInfo, Vulkan.PipelineCreateFlag, Vulkan._PipelineVertexInputStateCreateInfo, Vulkan._PipelineInputAssemblyStateCreateInfo, Ptr{Nothing}, Vulkan._PipelineViewportStateCreateInfo, Vulkan._PipelineMultisampleStateCreateInfo, Vulkan._PipelineDepthStencilStateCreateInfo, Vulkan._PipelineColorBlendStateCreateInfo, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags, :vertex_input_state, :input_assembly_state, :tessellation_state, :viewport_state, :multisample_state, :depth_stencil_state, :color_blend_state, :dynamic_state, :render_pass, :base_pipeline_handle), Tuple{Vulkan.PipelineRenderingCreateInfo, Vulkan.PipelineCreateFlag, Vulkan._PipelineVertexInputStateCreateInfo, Vulkan._PipelineInputAssemblyStateCreateInfo, Ptr{Nothing}, Vulkan._PipelineViewportStateCreateInfo, Vulkan._PipelineMultisampleStateCreateInfo, Vulkan._PipelineDepthStencilStateCreateInfo, Vulkan._PipelineColorBlendStateCreateInfo, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}}, Type{Vulkan._GraphicsPipelineCreateInfo}, Array{Vulkan._PipelineShaderStageCreateInfo, 1}, Vulkan._PipelineRasterizationStateCreateInfo, Vulkan.PipelineLayout, UInt32, Int32})
precompile(Tuple{typeof(Base.Iterators.only), Dictionaries.Dictionary{Lava.ProgramInstance, UInt64}})
precompile(Tuple{Type{Lava.SnoopCommandBuffer}})
precompile(Tuple{typeof(Lava.initialize), Lava.SnoopCommandBuffer, Lava.Device, Lava.GlobalData})
precompile(Tuple{Type{NamedTuple{(:next, :descriptor_count), T} where T<:Tuple}, Tuple{Ptr{Nothing}, UInt32}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :descriptor_count), Tuple{Ptr{Nothing}, UInt32}}, Type{Vulkan._WriteDescriptorSet}, Vulkan.DescriptorSet, UInt32, UInt32, Vulkan.DescriptorType, Array{Vulkan._DescriptorImageInfo, 1}, Array{Vulkan._DescriptorBufferInfo, 1}, Array{Vulkan.BufferView, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{VulkanCore.LibVulkan.VkDescriptorImageInfo, 1}, VulkanCore.LibVulkan.VkDescriptorImageInfo, Int64})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkDescriptorImageInfo}}, Array{VulkanCore.LibVulkan.VkDescriptorImageInfo, 1}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkDescriptorBufferInfo}}, Array{Any, 1}})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkWriteDescriptorSet}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, Vulkan.DescriptorSet, UInt32, UInt32, UInt32, Vulkan.DescriptorType, Ptr{VulkanCore.LibVulkan.VkDescriptorImageInfo}, Ptr{VulkanCore.LibVulkan.VkDescriptorBufferInfo}, Ptr{Ptr{Nothing}}})
precompile(Tuple{typeof(Base.setindex!), Array{VulkanCore.LibVulkan.VkWriteDescriptorSet, 1}, VulkanCore.LibVulkan.VkWriteDescriptorSet, Int64})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkWriteDescriptorSet}}, Array{VulkanCore.LibVulkan.VkWriteDescriptorSet, 1}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkCopyDescriptorSet}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.flush), Lava.SnoopCommandBuffer, Lava.BakedRenderGraph, Array{Lava.CompactRecord, 1}, Dictionaries.Dictionary{Lava.ProgramInstance, UInt64}})
precompile(Tuple{typeof(Base.:(!=)), Lava.PushConstantData, Nothing})
precompile(Tuple{Type{Ref{T} where T}, Lava.PushConstantData})
precompile(Tuple{typeof(Base.sizeof), Lava.PushConstantData})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Base.RefValue{Lava.PushConstantData}})
precompile(Tuple{typeof(Vulkan.cmd_push_constants), Lava.SnoopCommandBuffer, Lava.PipelineLayout, Vulkan.ShaderStageFlag, Int64, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Lava.apply), Lava.SnoopCommandBuffer, Lava.DrawIndexed})
precompile(Tuple{typeof(Base.isempty), Lava.SnoopCommandBuffer})
precompile(Tuple{typeof(Base.getproperty), Lava.SnoopCommandBuffer, Symbol})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getproperty), Tuple{Array{Lava.Instruction, 1}, Base.RefValue{Symbol}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.getproperty), Tuple{Array{Lava.Instruction, 1}, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Symbol, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{Lava.Instruction, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Lava.SnoopCommandBuffer, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Lava.SnoopCommandBuffer, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Lava.Instruction, Symbol})
precompile(Tuple{typeof(Base.getproperty), Lava.GlobalData, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Lava.BufferBlock{Lava.MemoryBlock}}})
precompile(Tuple{typeof(Base.promote_typeof), Lava.BufferBlock{Lava.MemoryBlock}, Int64, Vararg{Any}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Lava.BufferBlock{Lava.MemoryBlock}, Lava.BufferBlock{Lava.MemoryBlock}})
precompile(Tuple{typeof(Base.:(==)), Vulkan.IndexType, Vulkan.IndexType})
precompile(Tuple{typeof(Base.vect), Vulkan.DependencyInfo})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Array{Vulkan.DependencyInfo, 1}})
precompile(Tuple{typeof(Base.vect), Vulkan.RenderingInfo})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Array{Vulkan.RenderingInfo, 1}})
precompile(Tuple{typeof(Base.:(==)), Vulkan.PipelineBindPoint, Vulkan.PipelineBindPoint})
precompile(Tuple{typeof(Base.:(==)), Lava.Pipeline, Lava.Pipeline})
precompile(Tuple{typeof(Base.getproperty), Lava.Pipeline, Symbol})
precompile(Tuple{typeof(Base.getproperty), Lava.ResourceDescriptors, Symbol})
precompile(Tuple{typeof(Base.getproperty), Lava.GlobalDescriptorSet, Symbol})
precompile(Tuple{typeof(Base.vect), Lava.DescriptorSet})
precompile(Tuple{typeof(Base.promote_typeof), Vulkan.PipelineBindPoint, Lava.PipelineLayout, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), Lava.PipelineLayout, Int64, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Array{Lava.DescriptorSet, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.:(==)), Lava.PipelineLayout, Lava.PipelineLayout})
precompile(Tuple{typeof(Base.:(==)), Array{Lava.DescriptorSet, 1}, Array{Lava.DescriptorSet, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.promote_typeof), Lava.PipelineLayout, Vulkan.ShaderStageFlag, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_type), Type{Lava.PipelineLayout}, Type{Vulkan.ShaderStageFlag}})
precompile(Tuple{typeof(Base.:(==)), Vulkan.ShaderStageFlag, Vulkan.ShaderStageFlag})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{VulkanCore.LibVulkan.VkIndexType}, Vulkan.IndexType})
precompile(Tuple{typeof(Base.unsafe_convert), Type{VulkanCore.LibVulkan.VkIndexType}, VulkanCore.LibVulkan.VkIndexType})
precompile(Tuple{typeof(Base.cconvert), Type, Vulkan.IndexType})
precompile(Tuple{typeof(Lava.initialize), Lava.SimpleCommandBuffer, Lava.Device, Lava.GlobalData})
precompile(Tuple{typeof(Base.convert), Type{VulkanCore.LibVulkan.VkPipelineBindPoint}, Vulkan.PipelineBindPoint})
precompile(Tuple{typeof(Base.unsafe_convert), Type{VulkanCore.LibVulkan.VkPipelineBindPoint}, VulkanCore.LibVulkan.VkPipelineBindPoint})
precompile(Tuple{typeof(Base.cconvert), Type, Vulkan.PipelineBindPoint})
precompile(Tuple{typeof(Base.flush), Lava.SimpleCommandBuffer, Lava.BakedRenderGraph, Array{Lava.CompactRecord, 1}, Dictionaries.Dictionary{Lava.ProgramInstance, UInt64}})
precompile(Tuple{Type{NamedTuple{(:next, :image_view, :resolve_mode, :resolve_image_view), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.ImageView, Vulkan.ResolveModeFlag, Ptr{Nothing}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :image_view, :resolve_mode, :resolve_image_view), Tuple{Ptr{Nothing}, Vulkan.ImageView, Vulkan.ResolveModeFlag, Ptr{Nothing}}}, Type{Vulkan._RenderingAttachmentInfo}, Vulkan.ImageLayout, Vulkan.ImageLayout, Vulkan.AttachmentLoadOp, Vulkan.AttachmentStoreOp, Vulkan._ClearValue})
precompile(Tuple{Type{NamedTuple{(:next, :flags, :depth_attachment, :stencil_attachment), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.RenderingFlag, Vulkan._RenderingAttachmentInfo, Ptr{Nothing}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags, :depth_attachment, :stencil_attachment), Tuple{Ptr{Nothing}, Vulkan.RenderingFlag, Vulkan._RenderingAttachmentInfo, Ptr{Nothing}}}, Type{Vulkan._RenderingInfo}, Vulkan._Rect2D, UInt32, UInt32, Array{Vulkan._RenderingAttachmentInfo, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{Vulkan._RenderingAttachmentInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{VulkanCore.LibVulkan.VkRenderingAttachmentInfo}})
precompile(Tuple{typeof(Base.setindex!), Array{VulkanCore.LibVulkan.VkRenderingAttachmentInfo, 1}, VulkanCore.LibVulkan.VkRenderingAttachmentInfo, Int64})
precompile(Tuple{typeof(Base.ndims), Array{VulkanCore.LibVulkan.VkRenderingAttachmentInfo, 1}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{VulkanCore.LibVulkan.VkRenderingAttachmentInfo, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{Vulkan._RenderingAttachmentInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkRenderingAttachmentInfo}}, Array{VulkanCore.LibVulkan.VkRenderingAttachmentInfo, 1}})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkRenderingInfo}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, Vulkan.RenderingFlag, VulkanCore.LibVulkan.VkRect2D, UInt32, UInt32, Int64, Ptr{VulkanCore.LibVulkan.VkRenderingAttachmentInfo}, Ptr{VulkanCore.LibVulkan.VkRenderingAttachmentInfo}, Ptr{VulkanCore.LibVulkan.VkRenderingAttachmentInfo}})
precompile(Tuple{typeof(Vulkan.cmd_push_constants), Lava.SimpleCommandBuffer, Lava.PipelineLayout, Vulkan.ShaderStageFlag, Int64, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Lava.apply), Lava.SimpleCommandBuffer, Lava.DrawIndexed})
precompile(Tuple{Type{NamedTuple{(:format, :usage, :dims), T} where T<:Tuple}, Tuple{Vulkan.Format, Vulkan.ImageUsageFlag, Tuple{Int64, Int64}}})
precompile(Tuple{Lava.var"#attachment##kw", NamedTuple{(:format, :usage, :dims), Tuple{Vulkan.Format, Vulkan.ImageUsageFlag, Tuple{Int64, Int64}}}, typeof(Lava.attachment), Lava.Device})
precompile(Tuple{Lava.var"#113#115", Symbol})
precompile(Tuple{typeof(MacroTools.match), Symbol, Expr, Base.Dict{Any, Any}})
precompile(Tuple{Type{ColorTypes.RGB{Float32}}, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.vect), Tuple{Float32, Float32, ColorTypes.RGB{Float32}}, Vararg{Tuple{Float32, Float32, ColorTypes.RGB{Float32}}}})
precompile(Tuple{typeof(Lava.render), Lava.RenderGraph})
precompile(Tuple{typeof(CompositionsBase.opcompose), Accessors.PropertyLens{:program_state}, Vararg{Any}})
precompile(Tuple{typeof(Accessors.opticcompose), Accessors.PropertyLens{:program_state}, Vararg{Any}})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", NTuple{6, Symbol}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:primitive_topology,), Tuple{Vulkan.PrimitiveTopology}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:program_state,), Tuple{Lava.ProgramInvocationState}}}})
precompile(Tuple{Type{NamedTuple{(:primitive_topology,), T} where T<:Tuple}, Tuple{Vulkan.PrimitiveTopology}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:triangle_orientation,), Tuple{Vulkan.FrontFace}}}})
precompile(Tuple{Type{NamedTuple{(:triangle_orientation,), T} where T<:Tuple}, Tuple{Vulkan.FrontFace}})
precompile(Tuple{Type{NamedTuple{(:alignment,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Type{Dictionaries.Dictionary{Int64, Dictionaries.Dictionary{SPIRV.Decoration, Array{UInt32, 1}}}}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Int64, Dictionaries.Dictionary{SPIRV.Decoration, Array{UInt32, 1}}}, Int64, Dictionaries.Dictionary{SPIRV.Decoration, Array{UInt32, 1}}})
precompile(Tuple{typeof(Dictionaries.__dictionary), typeof(Base.first), typeof(Base.last), Dictionaries.Dictionary{Int64, Dictionaries.Dictionary{SPIRV.Decoration, Array{UInt32, 1}}}, Array{Pair{Int64, Dictionaries.Dictionary{SPIRV.Decoration, T} where T}, 1}, Int64})
precompile(Tuple{typeof(Base.copy), Dictionaries.Dictionary{Int64, Dictionaries.Dictionary{SPIRV.Decoration, Array{UInt32, 1}}}, Type{Dictionaries.Dictionary{SPIRV.Decoration, T} where T}})
precompile(Tuple{typeof(Dictionaries.gettoken!), Dictionaries.Dictionary{Int64, Dictionaries.Dictionary{SPIRV.Decoration, T} where T}, Int64})
precompile(Tuple{typeof(Dictionaries.settokenvalue!), Dictionaries.Dictionary{Int64, Dictionaries.Dictionary{SPIRV.Decoration, T} where T}, Tuple{Int64, Int64}, Dictionaries.Dictionary{SPIRV.Decoration, Array{SPIRV.BuiltIn, 1}}})
precompile(Tuple{typeof(Dictionaries.__dictionary), typeof(Base.first), typeof(Base.last), Dictionaries.Dictionary{Int64, Dictionaries.Dictionary{SPIRV.Decoration, T} where T}, Array{Pair{Int64, Dictionaries.Dictionary{SPIRV.Decoration, T} where T}, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:execution_model, :storage_classes, :variable_decorations, :features), T} where T<:Tuple}, Tuple{SPIRV.ExecutionModel, Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, Dictionaries.Dictionary{SPIRV.Decoration, T} where T}, SPIRV.SupportedFeatures}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:execution_model, :storage_classes, :variable_decorations, :features), Tuple{SPIRV.ExecutionModel, Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, Dictionaries.Dictionary{SPIRV.Decoration, T} where T}, SPIRV.SupportedFeatures}}, Type{SPIRV.ShaderInterface}})
precompile(Tuple{typeof(Base._unsafe_copyto!), Array{Dictionaries.Dictionary{SPIRV.Decoration, Array{Any, 1}}, 1}, Int64, Array{Dictionaries.Dictionary{SPIRV.Decoration, T} where T, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Dictionaries.Dictionary{SPIRV.Decoration, Array{Any, 1}}, 1}, Dictionaries.Dictionary{SPIRV.Decoration, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Dictionaries.Dictionary{SPIRV.Decoration, Array{Any, 1}}, 1}, Dictionaries.Dictionary{SPIRV.Decoration, Array{SPIRV.BuiltIn, 1}}, Int64})
precompile(Tuple{typeof(Base.isnothing), UInt32})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Arr{3, Float32}}})
precompile(Tuple{typeof(SPIRV.IAdd), Int64, Int64})
precompile(Tuple{typeof(SPIRV.SLessThan), Int64, Int64})
precompile(Tuple{typeof(SPIRV.Bitcast), Type, Int64})
precompile(Tuple{typeof(Base.length), Type{SPIRV.Arr{3, Float32}}})
precompile(Tuple{typeof(SPIRV.ISub), Int64, Int64})
precompile(Tuple{typeof(SPIRV.SLessThanEqual), Int64, Int64})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.length), Type{SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Vec{2, Float32}}, SPIRV.VectorType})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(SPIRV.spir_type!)}, Tuple{Base.RefValue{SPIRV.IR}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{SPIRV.VectorType}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.VectorType, 1}, SPIRV.VectorType, Int64})
precompile(Tuple{typeof(Base.ndims), Array{SPIRV.VectorType, 1}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.VectorType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(SPIRV.spir_type!)}, Tuple{Base.RefValue{SPIRV.IR}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{SPIRV.ArrayType}, SPIRV.FloatType, SPIRV.Constant})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Arr{3, Float32}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(SPIRV.spir_type!)}, Tuple{Base.RefValue{SPIRV.IR}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{SPIRV.SPIRType}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Array{SPIRV.VectorType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(SPIRV.spir_type!)}, Tuple{Base.RefValue{SPIRV.IR}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, SPIRV.ArrayType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(SPIRV.spir_type!)}, Tuple{Base.RefValue{SPIRV.IR}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Dictionaries.Dictionary{I, T} where T where I}, Base.UnitRange{Int64}, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{SPIRV.StructType}, Array{SPIRV.SPIRType, 1}, Dictionaries.Dictionary{Any, Any}, Dictionaries.Dictionary{Int64, Symbol}})
precompile(Tuple{typeof(Base.findfirst), Function, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.StorageClass, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{Float32}}})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.StorageClass, SPIRV.FloatType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Pointer{Float32}}, SPIRV.PointerType})
precompile(Tuple{Type{NamedTuple{(:storage_class,), T} where T<:Tuple}, Tuple{SPIRV.StorageClass}})
precompile(Tuple{typeof(ConstructionBase.setproperties), SPIRV.PointerType, NamedTuple{(:storage_class,), Tuple{SPIRV.StorageClass}}})
precompile(Tuple{Type{NamedTuple{(:storage_class, :type), T} where T<:Tuple}, Tuple{SPIRV.StorageClass, SPIRV.FloatType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:storage_class, :type), Tuple{SPIRV.StorageClass, SPIRV.FloatType}}, NamedTuple{(:storage_class,), Tuple{SPIRV.StorageClass}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:storage_class, :type), Tuple{SPIRV.StorageClass, SPIRV.FloatType}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Arr{3, Float32}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Set{SPIRV.StorageClass}, Base.Generator{Base.Iterators.Filter{SPIRV.var"#72#74"{SPIRV.FloatType}, SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}}, SPIRV.var"#71#73"}, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Base.UnitRange{Int64}, Tuple{Symbol, Symbol}, Tuple{DataType, DataType}}})
precompile(Tuple{typeof(Base.map), Base.Iterators.var"#5#6", Tuple{Base.UnitRange{Int64}, Tuple{Symbol, Symbol}, Tuple{DataType, DataType}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Base.UnitRange{Int64}, Tuple{Symbol, Symbol}, Tuple{DataType, DataType}}, Tuple{Tuple{}, Tuple{}, Tuple{}}})
precompile(Tuple{typeof(SPIRV.alignment), SPIRV.VulkanLayout, SPIRV.VectorType, Base.Set{SPIRV.StorageClass}, Bool})
precompile(Tuple{typeof(SPIRV.storage_classes), SPIRV.IR, SPIRV.VectorType})
precompile(Tuple{typeof(Base.grow_to!), Base.Set{SPIRV.StorageClass}, Base.Generator{Base.Iterators.Filter{SPIRV.var"#72#74"{SPIRV.VectorType}, SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}}, SPIRV.var"#71#73"}, Int64})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Base.UnitRange{Int64}, Tuple{Symbol, Symbol}, Tuple{DataType, DataType}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(SPIRV.storage_classes), SPIRV.IR, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.grow_to!), Base.Set{SPIRV.StorageClass}, Base.Generator{Base.Iterators.Filter{SPIRV.var"#72#74"{SPIRV.ArrayType}, SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}}, SPIRV.var"#71#73"}, Int64})
precompile(Tuple{typeof(Base.iterate), UInt32})
precompile(Tuple{typeof(Base.iterate), UInt32, Nothing})
precompile(Tuple{typeof(Base.prod), UInt32})
precompile(Tuple{typeof(Base.:(+)), Int64, UInt64})
precompile(Tuple{Type{UInt32}, UInt64})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Pointer{Float32}}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ExecutionModel, SPIRV.SSAValue, String, Vararg{SPIRV.SSAValue, 4}}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, SPIRV.SSAValue, SPIRV.SSAValue, Vararg{SPIRV.SSAValue}})
precompile(Tuple{SPIRV.var"#37#38"{SPIRV.IR}, SPIRV.VectorType})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ExecutionModel, SPIRV.SSAValue, String, SPIRV.SSAValue, SPIRV.SSAValue}})
precompile(Tuple{Type{NamedTuple{(:next, :flags, :depth_attachment, :stencil_attachment), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.RenderingFlag, Ptr{Nothing}, Ptr{Nothing}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags, :depth_attachment, :stencil_attachment), Tuple{Ptr{Nothing}, Vulkan.RenderingFlag, Ptr{Nothing}, Ptr{Nothing}}}, Type{Vulkan._RenderingInfo}, Vulkan._Rect2D, UInt32, UInt32, Array{Vulkan._RenderingAttachmentInfo, 1}})
precompile(Tuple{typeof(Base.getproperty), Lava.Attachment{Lava.ImageView{Lava.ImageBlock{2, Lava.MemoryBlock}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Lava.ImageView{Lava.ImageBlock{2, Lava.MemoryBlock}}, Symbol})
precompile(Tuple{Type{Float16}, Float16})
precompile(Tuple{typeof(Base.promote_type), Type, Type, Type})
precompile(Tuple{typeof(Base.convert), Type{Float16}, Float16})
precompile(Tuple{Type{NamedTuple{(:checkfile,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{FileIO.File{FileIO.DataFormat{:PNG}, Name} where Name}, String})
precompile(Tuple{typeof(ImageIO.save), FileIO.File{FileIO.DataFormat{:PNG}, String}, LinearAlgebra.Adjoint{ColorTypes.RGBA{Float16}, Base.ReshapedArray{ColorTypes.RGBA{Float16}, 2, Base.ReinterpretArray{ColorTypes.RGBA{Float16}, 1, UInt8, Array{UInt8, 1}, false}, Tuple{}}}})
precompile(Tuple{ImageIO.var"##save#5", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ImageIO.save), FileIO.File{FileIO.DataFormat{:PNG}, String}, LinearAlgebra.Adjoint{ColorTypes.RGBA{Float16}, Base.ReshapedArray{ColorTypes.RGBA{Float16}, 2, Base.ReinterpretArray{ColorTypes.RGBA{Float16}, 1, UInt8, Array{UInt8, 1}, false}, Tuple{}}}})
precompile(Tuple{typeof(ColorTypes.ccolor), Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}, Type{ColorTypes.RGBA{Float16}}})
precompile(Tuple{typeof(Base.isperm), Tuple{Int64, Int64}})
precompile(Tuple{typeof(PNGFiles.save), String, LinearAlgebra.Adjoint{ColorTypes.RGBA{Float16}, Base.ReshapedArray{ColorTypes.RGBA{Float16}, 2, Base.ReinterpretArray{ColorTypes.RGBA{Float16}, 1, UInt8, Array{UInt8, 1}, false}, Tuple{}}}})
precompile(Tuple{typeof(Base.vect), NTuple{4, Float32}, Vararg{NTuple{4, Float32}}})
precompile(Tuple{typeof(FileIO.match), Base.IOStream, Array{UInt8, 1}})
precompile(Tuple{typeof(ImageIO.load), FileIO.File{FileIO.DataFormat{:PNG}, String}})
precompile(Tuple{typeof(PNGFiles.load), String})
precompile(Tuple{Type{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt16, 16}}, N} where N}, UndefInitializer, UInt32, UInt32})
precompile(Tuple{typeof(PNGFiles._load!), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt16, 16}}, 2}, Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{typeof(ImageIO.enforece_canonical_type), FileIO.File{FileIO.DataFormat{:PNG}, String}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt16, 16}}, 2}})
precompile(Tuple{typeof(ColorTypes.ccolor), Type{ColorTypes.RGBA{Float16}}, Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt16, 16}}}})
precompile(Tuple{typeof(ColorTypes._rem), FixedPointNumbers.Normed{UInt16, 16}, Type{Float16}})
precompile(Tuple{typeof(Base.convert), Type{Float16}, FixedPointNumbers.Normed{UInt16, 16}})
precompile(Tuple{typeof(Base.convert), Type{Array{ColorTypes.RGBA{Float16}, 2}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt16, 16}}, 2}})
precompile(Tuple{Type{Lava.PhysicalImage}, Lava.ImageBlock{2, Lava.MemoryBlock}})
precompile(Tuple{typeof(Lava.add_resource_dependency), Lava.RenderGraph, Lava.RenderNode, Lava.PhysicalImage, Lava.ResourceDependency})
precompile(Tuple{Type{NamedTuple{(:magnification, :minification), T} where T<:Tuple}, Tuple{Vulkan.Filter, Vulkan.Filter}})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", NTuple{12, Symbol}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:magnification, :minification), Tuple{Vulkan.Filter, Vulkan.Filter}}}})
precompile(Tuple{typeof(ConstructionBase.setproperties), Lava.Sampling, NamedTuple{(:magnification, :minification), Tuple{Vulkan.Filter, Vulkan.Filter}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Float32, Float32}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Lava.Texture, 1}}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Vec{2, Float32}}, SPIRV.VectorType})
precompile(Tuple{Type{SPIRV.StructType}, Array{SPIRV.VectorType, 1}, Dictionaries.Dictionary{Any, Any}, Dictionaries.Dictionary{Int64, Symbol}})
precompile(Tuple{Type{SPIRV.Dim}, UInt32})
precompile(Tuple{Type{SPIRV.ImageFormat}, UInt32})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Arr{2048, SPIRV.SampledImage{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}}}})
precompile(Tuple{typeof(Base.length), Type{SPIRV.Arr{2048, SPIRV.SampledImage{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}}}})
precompile(Tuple{typeof(SPIRV.Select), Bool, Int64, Int64})
precompile(Tuple{typeof(SPIRV.INotEqual), Int64, Int64})
precompile(Tuple{typeof(SPIRV.LogicalNot), Bool})
precompile(Tuple{typeof(SPIRV.UConvert), Type{UInt8}, Int64})
precompile(Tuple{typeof(SPIRV.SConvert), Type{Int32}, UInt8})
precompile(Tuple{Base.var"##open_flags#381", Bool, Bool, Nothing, Bool, Nothing, typeof(Base.open_flags)})
precompile(Tuple{Base.var"##open_flags#381", Bool, Bool, Nothing, Bool, Bool, typeof(Base.open_flags)})
precompile(Tuple{typeof(SPIRV.SConvert), Type{Int32}, Int64})
precompile(Tuple{typeof(SPIRV.IEqual), Int64, Int64})
precompile(Tuple{typeof(SPIRV.SNegate), Int64})
precompile(Tuple{typeof(SPIRV.IMul), Int64, Int64})
precompile(Tuple{typeof(SPIRV.ISub), UInt32, UInt32})
precompile(Tuple{typeof(SPIRV.ShiftLeftLogical), Int64, UInt64})
precompile(Tuple{typeof(SPIRV.ShiftRightArithmetic), Int64, UInt64})
precompile(Tuple{typeof(SPIRV.UConvert), Type{UInt64}, UInt8})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.SampledImage{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}}})
precompile(Tuple{typeof(SPIRV.sampled_type), Type{SPIRV.SampledImage{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}}})
precompile(Tuple{typeof(Base.eltype), Type{Array{Float32, 1}}})
precompile(Tuple{typeof(SPIRV.image_type), Type{SPIRV.SampledImage{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}}})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}})
precompile(Tuple{typeof(SPIRV.dim), Type{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}})
precompile(Tuple{Type{Bool}, Int64})
precompile(Tuple{typeof(SPIRV.is_depth), Type{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}})
precompile(Tuple{typeof(SPIRV.is_arrayed), Type{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}})
precompile(Tuple{typeof(SPIRV.is_multisampled), Type{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}})
precompile(Tuple{typeof(SPIRV.is_sampled), Type{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}})
precompile(Tuple{typeof(SPIRV.format), Type{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}})
precompile(Tuple{Type{SPIRV.ImageType}, SPIRV.FloatType, SPIRV.Dim, Bool, Bool, Bool, Bool, SPIRV.ImageFormat, Nothing})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.ImageType, SPIRV.ImageType})
precompile(Tuple{typeof(Base.isequal), SPIRV.FloatType, SPIRV.FloatType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}, SPIRV.ImageType})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.SampledImageType, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.:(==)), SPIRV.SampledImageType, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.SampledImage{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}}, SPIRV.SampledImageType})
precompile(Tuple{Type{SPIRV.ArrayType}, SPIRV.SampledImageType, SPIRV.Constant})
precompile(Tuple{typeof(SPIRV.promote_to_interface_block), SPIRV.ArrayType, SPIRV.StorageClass})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Arr{2048, SPIRV.SampledImage{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.ImageType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.SSAValue, SPIRV.ImageType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.SSAValue, SPIRV.SampledImageType})
precompile(Tuple{typeof(CEnum.namemap), Type{SPIRV.Dim}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, SPIRV.Dim})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(CEnum.namemap), Type{SPIRV.ImageFormat}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, SPIRV.ImageFormat})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{UInt32}, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Array{SPIRV.VectorType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:record_jtype,), Tuple{Bool}}}, typeof(SPIRV.spir_type!)}, Tuple{Base.RefValue{SPIRV.IR}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, SPIRV.IntegerType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{SPIRV.SampledImage{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}}}})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.StorageClass, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Pointer{SPIRV.SampledImage{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}}}, SPIRV.PointerType})
precompile(Tuple{typeof(SPIRV.storage_class), Core.Argument, SPIRV.IR, SPIRV.IRMapping, SPIRV.FunctionDefinition})
precompile(Tuple{Type{NamedTuple{(:storage_class, :type), T} where T<:Tuple}, Tuple{SPIRV.StorageClass, SPIRV.SampledImageType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:storage_class, :type), Tuple{SPIRV.StorageClass, SPIRV.SampledImageType}}, NamedTuple{(:storage_class,), Tuple{SPIRV.StorageClass}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:storage_class, :type), Tuple{SPIRV.StorageClass, SPIRV.SampledImageType}}})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.SSAValue, SPIRV.SPIRType}, SPIRV.SampledImageType})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.ImageType})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.SampledImageType})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.SampledImage{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Arr{2048, SPIRV.SampledImage{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Pointer{SPIRV.SampledImage{SPIRV.Image{Float32, SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.ImageFormat(0x00000002)}}}}})
precompile(Tuple{typeof(SPIRV.scalar_alignment), SPIRV.IntegerType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.SSAValue, SPIRV.ImageType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.SSAValue, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.ImageType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.ImageType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, Any}, SPIRV.SSAValue, SPIRV.ImageType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.SampledImageType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.SSAValue, SPIRV.SampledImageType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.SSAValue, Any}, SPIRV.SSAValue, SPIRV.SampledImageType})
precompile(Tuple{SPIRV.var"#58#59"{SPIRV.IR}, Pair{SPIRV.SSAValue, SPIRV.ImageType}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, SPIRV.SSAValue, SPIRV.SSAValue, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.SSAValue, SPIRV.Dim, UInt32, UInt32, UInt32, UInt32, SPIRV.ImageFormat}})
precompile(Tuple{SPIRV.var"#58#59"{SPIRV.IR}, Pair{SPIRV.SSAValue, SPIRV.SampledImageType}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, SPIRV.SSAValue, Array{SPIRV.SSAValue, 1}})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.Dim, String})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.ImageFormat, String})
precompile(Tuple{Type{UInt32}, SPIRV.Dim})
precompile(Tuple{Type{UInt32}, SPIRV.ImageFormat})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.Dim})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.ImageFormat})
precompile(Tuple{Type{Lava.Texture}, Lava.CompactRecord, Lava.PhysicalImage, Lava.Sampling})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Tuple{Float32, Float32}, Lava.Texture}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Tuple{Float32, Float32}, Lava.Texture}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Tuple{Float32, Float32}, Lava.Texture}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._setindex), UInt32, Int64, Tuple{Float32, Float32}, Vararg{Any}})
precompile(Tuple{typeof(Base.ntuple), Base.var"#45#46"{UInt32, Int64, Tuple{Tuple{Float32, Float32}, Lava.Texture}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Lava.LinearAllocator, Tuple{Tuple{Float32, Float32}, UInt32}, Int64})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.Sampler}, Vulkan.Sampler})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.Sampler, Vulkan.var"#1174#1175"{Ptr{Nothing}, Vulkan.Device}, Vulkan.Device}})
precompile(Tuple{Type{NamedTuple{(:format, :samples, :usage, :dims), T} where T<:Tuple}, Tuple{Vulkan.Format, Int64, Vulkan.ImageUsageFlag, Tuple{Int64, Int64}}})
precompile(Tuple{Lava.var"#attachment##kw", NamedTuple{(:format, :samples, :usage, :dims), Tuple{Vulkan.Format, Int64, Vulkan.ImageUsageFlag, Tuple{Int64, Int64}}}, typeof(Lava.attachment), Lava.Device})
precompile(Tuple{Type{NamedTuple{(:type, :access, :stages, :usage, :aspect, :samples, :clear_value), T} where T<:Tuple}, Tuple{Lava.ResourceType, Lava.MemoryAccess, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag, Int64, NTuple{4, Float32}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:type, :access, :stages, :usage, :aspect, :samples, :clear_value), Tuple{Lava.ResourceType, Lava.MemoryAccess, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag, Int64, NTuple{4, Float32}}}, NamedTuple{(:samples,), Tuple{Int64}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:type, :access, :stages, :usage, :aspect, :samples, :clear_value), Tuple{Lava.ResourceType, Lava.MemoryAccess, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag, Int64, NTuple{4, Float32}}}})
precompile(Tuple{Type{Lava.AttachmentUsage}, Lava.ResourceType, Lava.MemoryAccess, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag, Int64, NTuple{4, Float32}})
precompile(Tuple{Type{NamedTuple{(:format, :dims, :samples, :aspect, :access, :usage), T} where T<:Tuple}, Tuple{Vulkan.Format, Tuple{Int64, Int64}, Int64, Vulkan.ImageAspectFlag, Lava.MemoryAccess, Vulkan.ImageUsageFlag}})
precompile(Tuple{Lava.var"#attachment##kw", NamedTuple{(:format, :dims, :samples, :aspect, :access, :usage), Tuple{Vulkan.Format, Tuple{Int64, Int64}, Int64, Vulkan.ImageAspectFlag, Lava.MemoryAccess, Vulkan.ImageUsageFlag}}, typeof(Lava.attachment), Lava.Device})
precompile(Tuple{Type{NamedTuple{(:next, :image_view, :image_layout, :resolve_mode, :resolve_image_view, :resolve_image_layout, :load_op, :store_op, :clear_value), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.ImageView, Vulkan.ImageLayout, Vulkan.ResolveModeFlag, Ptr{Nothing}, Vulkan.ImageLayout, Vulkan.AttachmentLoadOp, Vulkan.AttachmentStoreOp, Vulkan.ClearValue}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:next, :image_view, :image_layout, :resolve_mode, :resolve_image_view, :resolve_image_layout, :load_op, :store_op, :clear_value), Tuple{Ptr{Nothing}, Vulkan.ImageView, Vulkan.ImageLayout, Vulkan.ResolveModeFlag, Ptr{Nothing}, Vulkan.ImageLayout, Vulkan.AttachmentLoadOp, Vulkan.AttachmentStoreOp, Vulkan.ClearValue}}, NamedTuple{(:resolve_image_layout, :resolve_mode, :resolve_image_view), Tuple{Vulkan.ImageLayout, Vulkan.ResolveModeFlag, Vulkan.ImageView}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :image_view, :image_layout, :resolve_mode, :resolve_image_view, :resolve_image_layout, :load_op, :store_op, :clear_value), Tuple{Ptr{Nothing}, Vulkan.ImageView, Vulkan.ImageLayout, Vulkan.ResolveModeFlag, Vulkan.ImageView, Vulkan.ImageLayout, Vulkan.AttachmentLoadOp, Vulkan.AttachmentStoreOp, Vulkan.ClearValue}}})
precompile(Tuple{Type{Vulkan.RenderingAttachmentInfo}, Ptr{Nothing}, Vulkan.ImageView, Vulkan.ImageLayout, Vulkan.ResolveModeFlag, Vulkan.ImageView, Vulkan.ImageLayout, Vulkan.AttachmentLoadOp, Vulkan.AttachmentStoreOp, Vulkan.ClearValue})
precompile(Tuple{Type{NamedTuple{(:next, :image_view, :resolve_mode, :resolve_image_view), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.ImageView, Vulkan.ResolveModeFlag, Vulkan.ImageView}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :image_view, :resolve_mode, :resolve_image_view), Tuple{Ptr{Nothing}, Vulkan.ImageView, Vulkan.ResolveModeFlag, Vulkan.ImageView}}, Type{Vulkan._RenderingAttachmentInfo}, Vulkan.ImageLayout, Vulkan.ImageLayout, Vulkan.AttachmentLoadOp, Vulkan.AttachmentStoreOp, Vulkan._ClearValue})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next,), Tuple{Ptr{Nothing}}}, Type{Vulkan._ImageResolve2}, Vulkan._ImageSubresourceLayers, Vulkan._Offset3D, Vulkan._ImageSubresourceLayers, Vulkan._Offset3D, Vulkan._Extent3D})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next,), Tuple{Ptr{Nothing}}}, Type{Vulkan._ResolveImageInfo2}, Vulkan.Image, Vulkan.ImageLayout, Vulkan.Image, Vulkan.ImageLayout, Array{Vulkan._ImageResolve2, 1}})
precompile(Tuple{typeof(Base.finalize), Lava.ImageBlock{2, Lava.MemoryBlock}})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.Image, Vulkan.var"#1147#1148"{Ptr{Nothing}, Vulkan.Device}, Vulkan.Device}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Int32}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Int32}}, Ptr{Nothing}})
precompile(Tuple{Type{XCB.Connection}})
precompile(Tuple{typeof(XCB.current_screen), XCB.Connection})
precompile(Tuple{typeof(Base.vect), XCB.Libxcb.xcb_cw_t})
precompile(Tuple{typeof(Base.getproperty), XCB.Libxcb.xcb_screen_t, Symbol})
precompile(Tuple{Type{NamedTuple{(:x, :y, :border_width, :window_title, :icon_title, :attributes, :values), T} where T<:Tuple}, Tuple{Int64, Int64, Int64, String, String, Array{XCB.Libxcb.xcb_cw_t, 1}, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.convert), Type{NTuple{7, Symbol}}, NTuple{7, Symbol}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Ptr{XCB.Libxcb.xcb_generic_error_t}}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Ptr{XCB.Libxcb.xcb_generic_error_t}}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.cconvert), Type{UInt8}, XCB.Libxcb.xcb_prop_mode_t})
precompile(Tuple{Type{NamedTuple{(:level,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{UInt32}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:init,), Tuple{UInt32}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, UInt32, Tuple{Symbol}, NamedTuple{(:init,), Tuple{UInt32}}}})
precompile(Tuple{typeof(Base.cconvert), Type{UInt32}, XCB.Libxcb.xcb_atom_enum_t})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:x, :y, :border_width, :window_title, :icon_title, :attributes, :values), Tuple{Int64, Int64, Int64, String, String, Array{XCB.Libxcb.xcb_cw_t, 1}, Array{UInt32, 1}}}, Type{XCB.XCBWindow}, XCB.Connection, XCB.Libxcb.xcb_screen_t})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{XCB.Libxcb.xcb_cw_t, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.AdaptiveSort{Base.Sort.QuickSortAlg}, Base.Order.Perm{Base.Order.ForwardOrdering, Array{XCB.Libxcb.xcb_cw_t, 1}}})
precompile(Tuple{Type{Vulkan.CompositeAlphaFlagKHR}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Vulkan.CompositeAlphaFlagKHR})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkSurfaceFormatKHR}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkSurfaceFormatKHR}}, Ptr{Nothing}})
precompile(Tuple{Type{Base.Generator{typeof(Base.values), Lava.var"#176#178"}}, Function, Function})
precompile(Tuple{typeof(Base.iterate), Base.Generator{typeof(Base.values), Lava.var"#176#178"}})
precompile(Tuple{typeof(Base._iterator_upper_bound), Base.Generator{typeof(Base.values), Lava.var"#176#178"}})
precompile(Tuple{typeof(Base.length), Base.Generator{typeof(Base.values), Lava.var"#176#178"}})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{typeof(Base.values), Lava.var"#176#178"}, Base.HasLength})
precompile(Tuple{typeof(Base.collect), Base.Generator{typeof(Base.values), Lava.var"#176#178"}})
precompile(Tuple{typeof(Base.map), Function, Function})
precompile(Tuple{typeof(Lava.list_print), Function, Function})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkPresentModeKHR}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkPresentModeKHR}}, Ptr{Nothing}})
precompile(Tuple{typeof(Vulkan.CEnum.namemap), Type{Vulkan.PresentModeKHR}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, UInt32}}, Type{Vulkan._XcbSurfaceCreateInfoKHR}, Ptr{Nothing}, UInt32})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.SurfaceKHR, Vulkan.VulkanError}})
precompile(Tuple{Type{NamedTuple{(:next, :surface), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.SurfaceKHR}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :surface), Tuple{Ptr{Nothing}, Vulkan.SurfaceKHR}}, Type{Vulkan._PhysicalDeviceSurfaceInfo2KHR}})
precompile(Tuple{typeof(Vulkan.core_type), Type{Vulkan._SurfaceCapabilities2KHR}})
precompile(Tuple{Type{Ptr{VulkanCore.LibVulkan.VkSurfaceCapabilities2KHR}}, Ptr{Nothing}})
precompile(Tuple{typeof(Vulkan.structure_type), Type{VulkanCore.LibVulkan.VkSurfaceCapabilities2KHR}})
precompile(Tuple{typeof(ConstructionBase.setproperties), VulkanCore.LibVulkan.VkSurfaceCapabilities2KHR, NamedTuple{(:sType, :pNext), Tuple{VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}}}})
precompile(Tuple{Type{Vulkan._SurfaceCapabilities2KHR}, VulkanCore.LibVulkan.VkSurfaceCapabilities2KHR, Array{Any, 1}})
precompile(Tuple{Type{Ref{T} where T}, VulkanCore.LibVulkan.VkSurfaceCapabilities2KHR})
precompile(Tuple{typeof(VulkanCore.LibVulkan.vkGetPhysicalDeviceSurfaceCapabilities2KHR), Vulkan.PhysicalDevice, Vulkan._PhysicalDeviceSurfaceInfo2KHR, Base.RefValue{VulkanCore.LibVulkan.VkSurfaceCapabilities2KHR}, Ptr{Nothing}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan._SurfaceCapabilities2KHR, Vulkan.VulkanError}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Array{Vulkan._SurfaceFormatKHR, 1}, Vulkan.VulkanError}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Array{Vulkan.PresentModeKHR, 1}, Vulkan.VulkanError}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.SwapchainKHR, Vulkan.VulkanError}})
precompile(Tuple{Type{Vulkan.SemaphoreTypeCreateInfo}, Vulkan.SemaphoreType, Int64})
precompile(Tuple{Type{NamedTuple{(:next,), T} where T<:Tuple}, Tuple{Vulkan.SemaphoreTypeCreateInfo}})
precompile(Tuple{Type{Lava.FrameCycle{T} where T}, Lava.Device, Lava.Swapchain{XCB.XCBWindow}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Array{Vulkan.Image, 1}, Vulkan.VulkanError}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.Semaphore, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.convert), Type{Vulkan._SemaphoreTypeCreateInfo}, Vulkan.SemaphoreTypeCreateInfo})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next,), Tuple{Ptr{Nothing}}}, Type{Vulkan._SemaphoreTypeCreateInfo}, Vulkan.SemaphoreType, UInt64})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Vulkan._SemaphoreTypeCreateInfo})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Base.RefValue{VulkanCore.LibVulkan.VkSemaphoreTypeCreateInfo}})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkSemaphoreCreateInfo}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, Int64})
precompile(Tuple{typeof(Base.getproperty), Lava.Swapchain{XCB.XCBWindow}, Symbol})
precompile(Tuple{typeof(Base.vect), Lava.Surface{XCB.XCBWindow}})
precompile(Tuple{typeof(Lava.set_presentation_queue), Lava.Device, Array{Lava.Surface{XCB.XCBWindow}, 1}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Bool, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Lava.MemoryAccess}, Lava.MemoryAccess})
precompile(Tuple{Type{NamedTuple{(:stage_mask,), T} where T<:Tuple}, Tuple{Vulkan.PipelineStageFlag2}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Tuple{UInt32, Vulkan.Result}, Vulkan.VulkanError}})
precompile(Tuple{Type{NamedTuple{(:fence,), T} where T<:Tuple}, Tuple{Ptr{Nothing}}})
precompile(Tuple{Vulkan.var"#queue_submit_2##kw", NamedTuple{(:fence,), Tuple{Ptr{Nothing}}}, typeof(Vulkan.queue_submit_2), Lava.Queue, Array{Vulkan.SubmitInfo2, 1}})
precompile(Tuple{Type{NamedTuple{(:next, :stage_mask), T} where T<:Tuple}, Tuple{Ptr{Nothing}, UInt64}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :stage_mask), Tuple{Ptr{Nothing}, UInt64}}, Type{Vulkan._SemaphoreSubmitInfo}, Vulkan.Semaphore, UInt64, UInt32})
precompile(Tuple{typeof(Base.setindex!), Array{VulkanCore.LibVulkan.VkSemaphoreSubmitInfo, 1}, VulkanCore.LibVulkan.VkSemaphoreSubmitInfo, Int64})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkSemaphoreSubmitInfo}}, Array{VulkanCore.LibVulkan.VkSemaphoreSubmitInfo, 1}})
precompile(Tuple{typeof(Base.:(<)), Float64, Int64})
precompile(Tuple{typeof(Base.getproperty), Lava.OpaqueMemory, Symbol})
precompile(Tuple{typeof(Base.collect), Type{ColorTypes.BGRA{FixedPointNumbers.Normed{UInt8, 8}}}, Lava.FrameCycle{XCB.XCBWindow}})
precompile(Tuple{typeof(Base.reinterpret), Type{ColorTypes.BGRA{FixedPointNumbers.Normed{UInt8, 8}}}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.reshape), Base.ReinterpretArray{ColorTypes.BGRA{FixedPointNumbers.Normed{UInt8, 8}}, 1, UInt8, Array{UInt8, 1}, false}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.all), Function, Base.ReshapedArray{ColorTypes.BGRA{FixedPointNumbers.Normed{UInt8, 8}}, 2, Base.ReinterpretArray{ColorTypes.BGRA{FixedPointNumbers.Normed{UInt8, 8}}, 1, UInt8, Array{UInt8, 1}, false}, Tuple{}}})
precompile(Tuple{typeof(Base.:(/)), FixedPointNumbers.Normed{UInt8, 8}, Int64})
precompile(Tuple{Type{FixedPointNumbers.Normed{UInt8, 8}}, UInt8, Int64})
precompile(Tuple{typeof(Base.:(+)), FixedPointNumbers.Normed{UInt8, 8}, Float32})
precompile(Tuple{typeof(Base.FastMath.minmax_fast), Int64, Int64})
precompile(Tuple{typeof(Base.FastMath.min_fast), Int64, Int64})
precompile(Tuple{typeof(Base.FastMath.max_fast), Int64, Int64})
precompile(Tuple{typeof(Base.:(<=)), Float32, Int64})
precompile(Tuple{typeof(Base.:(<)), Int64, Float32})
precompile(Tuple{typeof(ColorTypes._rem), Int64, Type{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.convert), Type{FixedPointNumbers.Normed{UInt8, 8}}, FixedPointNumbers.Normed{UInt8, 8}})
precompile(Tuple{typeof(Base._all), typeof(Base.iszero), Base.ReshapedArray{ColorTypes.BGRA{FixedPointNumbers.Normed{UInt8, 8}}, 2, Base.ReinterpretArray{ColorTypes.BGRA{FixedPointNumbers.Normed{UInt8, 8}}, 1, UInt8, Array{UInt8, 1}, false}, Tuple{}}, Base.Colon})
precompile(Tuple{typeof(Base.any), Function, Base.ReshapedArray{ColorTypes.BGRA{FixedPointNumbers.Normed{UInt8, 8}}, 2, Base.ReinterpretArray{ColorTypes.BGRA{FixedPointNumbers.Normed{UInt8, 8}}, 1, UInt8, Array{UInt8, 1}, false}, Tuple{}}})
precompile(Tuple{typeof(Base._any), Base.ComposedFunction{typeof(Base.:(!)), typeof(Base.iszero)}, Base.ReshapedArray{ColorTypes.BGRA{FixedPointNumbers.Normed{UInt8, 8}}, 2, Base.ReinterpretArray{ColorTypes.BGRA{FixedPointNumbers.Normed{UInt8, 8}}, 1, UInt8, Array{UInt8, 1}, false}, Tuple{}}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_shape), Tuple{}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(WindowAbstractions.extent), XCB.XCBWindow})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Tuple{UInt16, UInt16}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{UInt16, UInt16}, Int64}}})
precompile(Tuple{typeof(Base.:(|)), XCB.Libxcb.xcb_config_window_t, XCB.Libxcb.xcb_config_window_t})
precompile(Tuple{typeof(Base.convert), Type{UInt16}, UInt32})
precompile(Tuple{typeof(Base.unsafe_convert), Type{UInt16}, UInt16})
precompile(Tuple{typeof(WindowAbstractions.set_extent), XCB.XCBWindow, Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:next, :flags, :surface, :min_image_count, :image_format, :image_color_space, :image_extent, :image_array_layers, :image_usage, :image_sharing_mode, :queue_family_indices, :pre_transform, :composite_alpha, :present_mode, :clipped, :old_swapchain), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.SwapchainCreateFlagKHR, Vulkan.SurfaceKHR, UInt32, Vulkan.Format, Vulkan.ColorSpaceKHR, Vulkan.Extent2D, UInt32, Vulkan.ImageUsageFlag, Vulkan.SharingMode, Array{UInt32, 1}, Vulkan.SurfaceTransformFlagKHR, Vulkan.CompositeAlphaFlagKHR, Vulkan.PresentModeKHR, Bool, Ptr{Nothing}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:old_swapchain, :image_extent), Tuple{Vulkan.SwapchainKHR, Vulkan.Extent2D}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:next, :flags, :surface, :min_image_count, :image_format, :image_color_space, :image_extent, :image_array_layers, :image_usage, :image_sharing_mode, :queue_family_indices, :pre_transform, :composite_alpha, :present_mode, :clipped, :old_swapchain), Tuple{Ptr{Nothing}, Vulkan.SwapchainCreateFlagKHR, Vulkan.SurfaceKHR, UInt32, Vulkan.Format, Vulkan.ColorSpaceKHR, Vulkan.Extent2D, UInt32, Vulkan.ImageUsageFlag, Vulkan.SharingMode, Array{UInt32, 1}, Vulkan.SurfaceTransformFlagKHR, Vulkan.CompositeAlphaFlagKHR, Vulkan.PresentModeKHR, Bool, Ptr{Nothing}}}, NamedTuple{(:old_swapchain, :image_extent), Tuple{Vulkan.SwapchainKHR, Vulkan.Extent2D}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :flags, :surface, :min_image_count, :image_format, :image_color_space, :image_extent, :image_array_layers, :image_usage, :image_sharing_mode, :queue_family_indices, :pre_transform, :composite_alpha, :present_mode, :clipped, :old_swapchain), Tuple{Ptr{Nothing}, Vulkan.SwapchainCreateFlagKHR, Vulkan.SurfaceKHR, UInt32, Vulkan.Format, Vulkan.ColorSpaceKHR, Vulkan.Extent2D, UInt32, Vulkan.ImageUsageFlag, Vulkan.SharingMode, Array{UInt32, 1}, Vulkan.SurfaceTransformFlagKHR, Vulkan.CompositeAlphaFlagKHR, Vulkan.PresentModeKHR, Bool, Vulkan.SwapchainKHR}}})
precompile(Tuple{Type{Vulkan.SwapchainCreateInfoKHR}, Ptr{Nothing}, Vulkan.SwapchainCreateFlagKHR, Vulkan.SurfaceKHR, UInt32, Vulkan.Format, Vulkan.ColorSpaceKHR, Vulkan.Extent2D, UInt32, Vulkan.ImageUsageFlag, Vulkan.SharingMode, Array{UInt32, 1}, Vulkan.SurfaceTransformFlagKHR, Vulkan.CompositeAlphaFlagKHR, Vulkan.PresentModeKHR, Bool, Vulkan.SwapchainKHR})
precompile(Tuple{Type{NamedTuple{(:next, :flags, :old_swapchain), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.SwapchainCreateFlagKHR, Vulkan.SwapchainKHR}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags, :old_swapchain), Tuple{Ptr{Nothing}, Vulkan.SwapchainCreateFlagKHR, Vulkan.SwapchainKHR}}, Type{Vulkan._SwapchainCreateInfoKHR}, Vulkan.SurfaceKHR, UInt32, Vulkan.Format, Vulkan.ColorSpaceKHR, Vulkan._Extent2D, UInt32, Vulkan.ImageUsageFlag, Vulkan.SharingMode, Array{UInt32, 1}, Vulkan.SurfaceTransformFlagKHR, Vulkan.CompositeAlphaFlagKHR, Vulkan.PresentModeKHR, Bool})
precompile(Tuple{Type{NamedTuple{(:info, :handle), T} where T<:Tuple}, Tuple{Vulkan.SwapchainCreateInfoKHR, Vulkan.SwapchainKHR}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:info, :handle), Tuple{Vulkan.SwapchainCreateInfoKHR, Vulkan.SwapchainKHR}}}})
precompile(Tuple{typeof(ConstructionBase.setproperties), Lava.Swapchain{XCB.XCBWindow}, NamedTuple{(:info, :handle), Tuple{Vulkan.SwapchainCreateInfoKHR, Vulkan.SwapchainKHR}}})
precompile(Tuple{typeof(Base.setproperty!), Lava.FrameCycle{XCB.XCBWindow}, Symbol, Lava.Swapchain{XCB.XCBWindow}})
precompile(Tuple{typeof(Base.convert), Type{Lava.Swapchain{XCB.XCBWindow}}, Lava.Swapchain{XCB.XCBWindow}})
precompile(Tuple{XCB.var"#9#10", XCB.XCBWindow})
precompile(Tuple{typeof(Test.get_alignment), Test.DefaultTestSet, Int64})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:bold, :underline, :blink, :reverse, :hidden, :color), Tuple{Bool, Bool, Bool, Bool, Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String, Vararg{String}})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.Semaphore}, Vulkan.Semaphore})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.Semaphore, Vulkan.var"#1126#1127"{Ptr{Nothing}, Vulkan.Device}, Vulkan.Device}})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.Image, typeof(Base.identity), Vulkan.Device}})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.SwapchainKHR}, Vulkan.SwapchainKHR})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.SwapchainKHR, Vulkan.var"#1218#1219"{Ptr{Nothing}, Lava.Device}, Vulkan.SurfaceKHR}})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.SurfaceKHR, Vulkan.var"#1229#1230"{Ptr{Nothing}, Lava.Instance}, Vulkan.Instance}})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.SurfaceKHR}, Vulkan.SurfaceKHR})
precompile(Tuple{Base.var"##printstyled#919", Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.TTY, String, Vararg{Any}})
precompile(Tuple{Base.var"#with_output_color##kw", NamedTuple{(:bold, :underline, :blink, :reverse, :hidden), NTuple{5, Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.TTY, String, Vararg{Any}})
precompile(Tuple{Base.var"##with_output_color#918", Bool, Bool, Bool, Bool, Bool, typeof(Base.with_output_color), Function, Symbol, Base.TTY, String, Vararg{Any}})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{typeof(Base.GC.gc)})
precompile(Tuple{typeof(XCB.Libxcb.xcb_disconnect), XCB.Connection})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.Pipeline}, Vulkan.Pipeline})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.Pipeline, Vulkan.var"#1163#1164"{Ptr{Nothing}, Lava.Device}, Vulkan.Device}})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.DeviceMemory, Vulkan.var"#1116#1117"{Ptr{Nothing}, Lava.Device}, Vulkan.Device}})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.Fence}, Vulkan.Fence})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.Fence, Vulkan.var"#1122#1123"{Ptr{Nothing}, Vulkan.Device}, Vulkan.Device}})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.PipelineLayout}, Vulkan.PipelineLayout})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.PipelineLayout, Vulkan.var"#1170#1171"{Ptr{Nothing}, Lava.Device}, Vulkan.Device}})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.FileMonitor})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.CommandPool}, Vulkan.CommandPool})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.Queue}, Vulkan.Queue})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.Queue, typeof(Base.identity), Vulkan.Device}})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.Device}, Vulkan.Device})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.DebugUtilsMessengerEXT}, Vulkan.DebugUtilsMessengerEXT})
precompile(Tuple{Vulkan.var"#6#8"{Vulkan.DebugUtilsMessengerEXT, Vulkan.var"#1260#1261"{Ptr{Nothing}, Vulkan.Instance}, Vulkan.Instance}})
precompile(Tuple{Vulkan.var"#7#9"{Vulkan.Instance}, Vulkan.Instance})
precompile(Tuple{typeof(Base.prettyprint_getunits), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.Ryu.writefixed), Float64, Int64})
precompile(Tuple{typeof(VSCodeServer.safe_render), Nothing})
precompile(Tuple{typeof(Base.flush), Base.TTY})
precompile(Tuple{typeof(VSCodeServer.getvariables)})
precompile(Tuple{typeof(Base.isequal), Type})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.var"#11#12"}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.consume_precompile)}})
precompile(Tuple{typeof(VSCodeServer.can_display), Module})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Nothing}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Nothing}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Nothing}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Nothing}, Bool, Function, Function})
precompile(Tuple{typeof(VSCodeServer.wsicon), Nothing})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Nothing})
precompile(Tuple{typeof(VSCodeServer.treerender), Nothing})
precompile(Tuple{typeof(VSCodeServer.can_display), Nothing})
precompile(Tuple{VSCodeServer.var"#117#118", Nothing})
precompile(Tuple{typeof(Base.isequal), Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.consume_precompile)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.consume_precompile)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.consume_precompile)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.consume_precompile)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.consume_precompile)}, Bool, Function, Function})
precompile(Tuple{typeof(VSCodeServer.can_display), Function})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:color, :bold), Tuple{Symbol, Bool}}, typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{typeof(VSCodeServer.unwrap), VSCodeServer.Wrapper})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.get_return_type), VSCodeServer.JSONRPC.RequestType{VSCodeServer.ReplRunCodeRequestParams, VSCodeServer.ReplRunCodeRequestReturn}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_success_response), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, VSCodeServer.ReplRunCodeRequestReturn})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, VSCodeServer.ReplRunCodeRequestReturn}}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, VSCodeServer.ReplRunCodeRequestReturn})
precompile(Tuple{Type{VSCodeServer.JSON.Writer.CompositeTypeWrapper{T} where T}, VSCodeServer.ReplRunCodeRequestReturn, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.get), Base.TTY, Symbol, Bool})
precompile(Tuple{Core.Compiler.var"#285#286", Any})
precompile(Tuple{typeof(Core.Compiler.fieldtype_tfunc), Any, Any, Any})
precompile(Tuple{typeof(Core.Compiler.isdefined_tfunc), Any, Any, Any})
precompile(Tuple{typeof(Core.Compiler.replacefield!_tfunc), Vararg{Any, 5}})
precompile(Tuple{typeof(Core.Compiler.swapfield!_tfunc), Any, Any, Any})
precompile(Tuple{typeof(Revise.revise)})
precompile(Tuple{typeof(Base.Multimedia.display), Any})
precompile(Tuple{Type{Ptr{UInt8}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, Function})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.julia-vscode.diagnostics")}, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base.write), Base.TTY, String, String})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Pair{Symbol, Bool}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.var"#13#15"{f, test, val} where val where test where f}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.var"#14#16"{f, val} where val where f}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.test_validation_msg)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.test_validation_msg)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.test_validation_msg)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.test_validation_msg)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.test_validation_msg)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.test_validation_msg)}, Bool, Function, Function})
precompile(Tuple{typeof(VSCodeServer.safe_render), Function})
precompile(Tuple{typeof(Base.show), Base.IOContext{VSCodeServer.LimitIO{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base.print), Base.IOContext{VSCodeServer.LimitIO{Base.GenericIOBuffer{Array{UInt8, 1}}}}, String, String, Vararg{String}})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:color, :bold), Tuple{Symbol, Bool}}, typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.var"##render_file#17"}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.font_file)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.render_file)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.var"#render_file##kw"}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Main.var"##render_file#17"})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Main.var"##render_file#17"}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Main.var"##render_file#17"}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Main.var"##render_file#17"}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Main.var"##render_file#17"}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.shader_file)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.texture_file)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.render_file)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.render_file)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.render_file)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.render_file)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.render_file)}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.font_file)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.font_file)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.font_file)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.font_file)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.font_file)}, Bool, Function, Function})
precompile(Tuple{typeof(Base.isequal), Bool})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Bool}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Bool}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Bool}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Bool}, Bool, Function, Function})
precompile(Tuple{typeof(VSCodeServer.wsicon), Bool})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Bool})
precompile(Tuple{typeof(VSCodeServer.treerender), Bool})
precompile(Tuple{typeof(VSCodeServer.can_display), Bool})
precompile(Tuple{VSCodeServer.var"#117#118", Bool})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.shader_file)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.shader_file)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.shader_file)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.shader_file)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.shader_file)}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.texture_file)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.texture_file)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.texture_file)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.texture_file)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.texture_file)}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.test_shader)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.test_shader)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.test_shader)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.test_shader)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.test_shader)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.test_shader)}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.simple_program)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.test_program_frag)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.test_program_vert)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.simple_program)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.simple_program)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.simple_program)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.simple_program)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.simple_program)}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.test_program_frag)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.test_program_frag)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.test_program_frag)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.test_program_frag)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.test_program_frag)}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.test_program_vert)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.test_program_vert)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.test_program_vert)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.test_program_vert)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.test_program_vert)}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.var"##save_test_render#18"}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.save_test_render)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.var"#save_test_render##kw"}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Main.var"##save_test_render#18"})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Main.var"##save_test_render#18"}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Main.var"##save_test_render#18"}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Main.var"##save_test_render#18"}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Main.var"##save_test_render#18"}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.save_test_render)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.save_test_render)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.save_test_render)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.save_test_render)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.save_test_render)}, Bool, Function, Function})
precompile(Tuple{Type{LineNumberNode}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{LineNumberNode, 1}}})
precompile(Tuple{DocStringExtensions.var"#32#33"{typeof(DocStringExtensions.template_hook)}, LineNumberNode, Vararg{Any}})
precompile(Tuple{typeof(DocStringExtensions.template_hook), LineNumberNode, Module, String, Expr})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.Docs.doc!), Module, Base.Docs.Binding, Base.Docs.DocStr, Any})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.var"##remap#19"}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.var"#20#21"{low1, high1, low2, high2} where high2 where low2 where high1 where low1}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.remap)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.var"#remap##kw"}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Main.var"##remap#19"})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Main.var"##remap#19"}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Main.var"##remap#19"}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Main.var"##remap#19"}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), Main.var"##remap#19"}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.remap)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.remap)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.remap)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.remap)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.remap)}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.var"#22#23"{device, vdata, color} where color where vdata where device}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.program_3)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.program_3)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.program_3)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.program_3)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.program_3)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.program_3)}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.rectangle_frag)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.rectangle_vert)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.VertexDataRectangle}})
precompile(Tuple{typeof(VSCodeServer.wsicon), Type})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Type})
precompile(Tuple{typeof(VSCodeServer.treerender), Type})
precompile(Tuple{typeof(VSCodeServer.can_display), Type})
precompile(Tuple{VSCodeServer.var"#117#118", Type})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.rectangle_frag)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.rectangle_frag)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.rectangle_frag)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.rectangle_frag)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.rectangle_frag)}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.rectangle_vert)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.rectangle_vert)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.rectangle_vert)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.rectangle_vert)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.rectangle_vert)}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.texture_frag)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.texture_vert)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.MaterialDataTexture}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{Main.VertexDataTexture}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.texture_frag)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.texture_frag)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.texture_frag)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.texture_frag)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.texture_frag)}, Bool, Function, Function})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.texture_vert)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.texture_vert)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.texture_vert)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.texture_vert)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.texture_vert)}, Bool, Function, Function})
precompile(Tuple{typeof(Main.simple_program), Lava.Device})
precompile(Tuple{typeof(Base.eltype), Type{Array{Main.VertexDataRectangle, 1}}})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{Tuple{Array{Main.VertexDataRectangle, 1}}}}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Main.VertexDataRectangle}, SPIRV.StructType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Array{Main.VertexDataRectangle, 1}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Tuple{Array{Main.VertexDataRectangle, 1}}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Pointer{Tuple{Array{Main.VertexDataRectangle, 1}}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{Main.VertexDataRectangle}}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Pointer{Main.VertexDataRectangle}}, SPIRV.PointerType})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Main.VertexDataRectangle}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Array{Main.VertexDataRectangle, 1}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Tuple{Array{Main.VertexDataRectangle, 1}}}})
precompile(Tuple{typeof(Base.fieldnames), Type{Tuple{Array{Main.VertexDataRectangle, 1}}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Pointer{Tuple{Array{Main.VertexDataRectangle, 1}}}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Pointer{Main.VertexDataRectangle}}})
precompile(Tuple{typeof(Main.save_test_render), String, Base.ReshapedArray{ColorTypes.RGBA{Float16}, 2, Base.ReinterpretArray{ColorTypes.RGBA{Float16}, 1, UInt8, Array{UInt8, 1}, false}, Tuple{}}, UInt64})
precompile(Tuple{typeof(Base.eltype), Type{Array{Main.VertexDataTexture, 1}}})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{Tuple{Array{Main.VertexDataTexture, 1}}}}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Main.VertexDataTexture}, SPIRV.StructType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Array{Main.VertexDataTexture, 1}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Tuple{Array{Main.VertexDataTexture, 1}}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Pointer{Tuple{Array{Main.VertexDataTexture, 1}}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{Main.VertexDataTexture}}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Pointer{Main.VertexDataTexture}}, SPIRV.PointerType})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Main.VertexDataTexture}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Array{Main.VertexDataTexture, 1}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Tuple{Array{Main.VertexDataTexture, 1}}}})
precompile(Tuple{typeof(Base.fieldnames), Type{Tuple{Array{Main.VertexDataTexture, 1}}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Pointer{Tuple{Array{Main.VertexDataTexture, 1}}}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Pointer{Main.VertexDataTexture}}})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{Main.MaterialDataTexture}}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Main.MaterialDataTexture}, SPIRV.StructType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Pointer{Main.MaterialDataTexture}}, SPIRV.PointerType})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Main.MaterialDataTexture}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Pointer{Main.MaterialDataTexture}}})
precompile(Tuple{typeof(Main.program_3), Lava.Device, Array{Tuple{Float32, Float32, ColorTypes.RGB{Float32}}, 1}, Lava.PhysicalAttachment})
precompile(Tuple{typeof(VSCodeServer.safe_render), Nothing})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.render_rectangle)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.render_rectangle)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.render_rectangle)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.render_rectangle)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.render_rectangle)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.render_rectangle)}, Bool, Function, Function})
precompile(Tuple{REPL.LineEdit.var"#27#28"{OhMyREPL.var"#2#5"{REPL.LineEdit.PrefixHistoryPrompt}, String}, Any, Any})
precompile(Tuple{Type{Crayons.Crayon}, Crayons.ANSIColor, Crayons.ANSIColor, Vararg{Crayons.ANSIStyle, 9}})
precompile(Tuple{typeof(Base.convert), Type{Crayons.Crayon}, Crayons.Crayon})
precompile(Tuple{OhMyREPL.var"#2#5"{REPL.LineEdit.PrefixHistoryPrompt}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.Unicode.textwidth), String})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{Type{Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Tokens.exactkind), Tokenize.Tokens.Token})
precompile(Tuple{typeof(Base.:(==)), Tokenize.Tokens.Kind, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Tokens.kind), Tokenize.Tokens.Token})
precompile(Tuple{OhMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.untokenize_with_ANSI), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, OhMyREPL.PassHandler, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UInt8})
precompile(Tuple{typeof(Base.position), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.seek), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{Base.var"#readline##kw", NamedTuple{(:keep,), Tuple{Bool}}, typeof(Base.readline), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.divrem), Int64, Int64})
precompile(Tuple{typeof(Base.flush), REPL.Terminals.TTYTerminal})
precompile(Tuple{REPL.LineEdit.var"#27#28"{REPL.LineEdit.var"#246#254", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#246#254", REPL.LineEdit.MIState, REPL.LineEdit.ModeState, Any})
precompile(Tuple{REPL.LineEdit.var"#27#28"{OhMyREPL.Prompt.var"#22#49", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#22#49", Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.mode), REPL.LineEdit.MIState})
precompile(Tuple{REPL.var"#do_respond#66"{Bool, Bool, REPL.var"#77#87"{REPL.LineEditREPL, REPL.REPLHistoryProvider}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Any, Bool})
precompile(Tuple{Infiltrator.var"#41#42"{Symbol}, Expr})
precompile(Tuple{typeof(Revise.revise_first), Expr})
precompile(Tuple{VSCodeServer.var"#73#75"{REPL.LineEditREPL, REPL.LineEdit.Prompt}, Expr})
precompile(Tuple{typeof(VSCodeServer.evalrepl), Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{VSCodeServer.var"#77#79"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Tuple{}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{VSCodeServer.var"#77#79"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{VSCodeServer.var"#77#79"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Tuple{}}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:is_repl,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{VSCodeServer.var"#77#79"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt}})
precompile(Tuple{VSCodeServer.var"#78#80"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt}})
precompile(Tuple{typeof(Base.isempty), Base.Set{Tuple{Revise.PkgData, String}}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Any}, Task})
precompile(Tuple{typeof(Main.render_rectangle), Lava.Device, Lava.ImageWSI, Tuple{Float32, Float32}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Any}, Nothing})
precompile(Tuple{typeof(Infiltrator.end_session!)})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Pair{Symbol, Array{Tuple{String, Int64}, 1}}})
precompile(Tuple{REPL.var"#45#46"{REPL.LineEditREPL, Pair{Any, Bool}, Bool, Bool}, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.TTY}, Pair{Symbol, Module}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), Type{typeof(Main.xcb_surface)}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.isequal), typeof(Main.xcb_surface)})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.xcb_surface)}, Bool, Function, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.xcb_surface)}, Bool, Module, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.xcb_surface)}, Bool, Module, Function, Vararg{Function}})
precompile(Tuple{typeof(Base._any_tuple), Base.Fix2{typeof(Base.isequal), typeof(Main.xcb_surface)}, Bool, Function, Function})
