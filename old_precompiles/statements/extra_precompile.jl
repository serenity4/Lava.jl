precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Vulkan._DebugUtilsMessengerCreateInfoEXT, Base.RefValue{VulkanCore.LibVulkan.VkDebugUtilsMessengerCreateInfoEXT}}})
precompile(Tuple{typeof(Vulkan._initialize), Type{var"#s11"} where var"#s11"<:(Vulkan.VulkanStruct{D} where D), Any})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Vulkan._PhysicalDeviceFeatures2})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Vulkan._PhysicalDeviceProperties2})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Vulkan._PhysicalDeviceVulkan11Features, Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Features}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Vulkan._PhysicalDeviceVulkan12Features, Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Features}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Vulkan._PhysicalDeviceVulkan13Features, Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan13Features}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Vulkan._PhysicalDeviceFeatures2, Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceFeatures2}}})
precompile(Tuple{typeof(Vulkan.initialize), Type{var"#s11"} where var"#s11"<:Vulkan.HighLevelStruct})
precompile(Tuple{typeof(Vulkan._initialize), Type{var"#s11"} where var"#s11"<:Vulkan.HighLevelStruct, Any})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Vulkan._MemoryAllocateFlagsInfo, Base.RefValue{VulkanCore.LibVulkan.VkMemoryAllocateFlagsInfo}}})
precompile(Tuple{typeof(Main.test_validation_msg), Main.var"#20#22", Main.var"#21#23"})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._SemaphoreSubmitInfo, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._CommandBufferSubmitInfo, 1}, Array{VulkanCore.LibVulkan.VkCommandBufferSubmitInfo, 1}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._BufferMemoryBarrier2, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._ImageMemoryBarrier2, 1}, Array{VulkanCore.LibVulkan.VkImageMemoryBarrier2, 1}}})
precompile(Tuple{typeof(SPIRV.infer), SPIRV.CFG})
precompile(Tuple{typeof(Base.string), Symbol, Char, Vararg{Any}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Vulkan._DescriptorSetLayoutBindingFlagsCreateInfo, Base.RefValue{VulkanCore.LibVulkan.VkDescriptorSetLayoutBindingFlagsCreateInfo}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Vulkan._PipelineRenderingCreateInfo, Base.RefValue{VulkanCore.LibVulkan.VkPipelineRenderingCreateInfo}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._PipelineShaderStageCreateInfo, 1}, Array{VulkanCore.LibVulkan.VkPipelineShaderStageCreateInfo, 1}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._GraphicsPipelineCreateInfo, 1}, Array{VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo, 1}}})
precompile(Tuple{typeof(Base.findfirst), Main.var"#24#25", Dictionaries.Dictionary{Base.UUID, Lava.PhysicalBuffer}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#26#27", Array{Vulkan.ImageMemoryBarrier2, 1}})
precompile(Tuple{typeof(Base.all), Base.Generator{Array{Vulkan.ImageMemoryBarrier2, 1}, Main.var"#26#27"}})
precompile(Tuple{typeof(Main.simple_program), Lava.Device})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SPIRV.IR, Core.SimpleVector})
precompile(Tuple{typeof(Base.reduce_first), Function, Int64})
precompile(Tuple{Type{GeometryExperiments.NormedPrimitive{inf, T} where T}, Float32})
precompile(Tuple{typeof(Base.ntuple), GeometryExperiments.var"#8#9", Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}}}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.getproperty), Tuple{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}}}, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(GeometryExperiments.radius), GeometryExperiments.NormedPrimitive{inf, Float32}})
precompile(Tuple{Main.var"#28#31"{Lava.LogicalAttachment, Lava.LogicalImage, Lava.LogicalAttachment}, Lava.CompactRecord})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, Vulkan.SamplerCreateFlag}}, Type{Vulkan._SamplerCreateInfo}, Vulkan.Filter, Vulkan.Filter, Vulkan.SamplerMipmapMode, Vulkan.SamplerAddressMode, Vulkan.SamplerAddressMode, Vulkan.SamplerAddressMode, Float32, Bool, Float32, Bool, Vulkan.CompareOp, Float32, Float32, Vulkan.BorderColor, Bool})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._WriteDescriptorSet, 1}, Array{VulkanCore.LibVulkan.VkWriteDescriptorSet, 1}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._CopyDescriptorSet, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Lava.Instruction, 1}, Symbol})
precompile(Tuple{typeof(Base.vect), Lava.BufferBlock{Lava.MemoryBlock}, Vararg{Any}})
precompile(Tuple{typeof(Base.vect), Vulkan.PipelineBindPoint, Vararg{Any}})
precompile(Tuple{typeof(Base.vect), Lava.PipelineLayout, Vararg{Any}})
precompile(Tuple{typeof(Main.test_validation_msg), Main.var"#29#32"{Lava.BakedRenderGraph, Dictionaries.Dictionary{Lava.ProgramInstance, UInt64}, Array{Lava.CompactRecord, 1}}, Main.var"#30#33"})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._RenderingAttachmentInfo, 1}, Array{VulkanCore.LibVulkan.VkRenderingAttachmentInfo, 1}}})
precompile(Tuple{typeof(Main.program_1), Lava.Device, Array{Tuple{Float32, Float32, ColorTypes.RGB{Float32}}, 1}, Lava.PhysicalAttachment})
precompile(Tuple{Main.var"#35#36"{Lava.Device, Array{Tuple{Float32, Float32, ColorTypes.RGB{Float32}}, 1}, Lava.PhysicalAttachment}, Lava.CompactRecord})
precompile(Tuple{typeof(Base.eltype), Type{Array{Main.VertexDataRectangle, 1}}})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{Tuple{Array{Main.VertexDataRectangle, 1}}}}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Main.VertexDataRectangle}, SPIRV.StructType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Array{Main.VertexDataRectangle, 1}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Tuple{Array{Main.VertexDataRectangle, 1}}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Pointer{Tuple{Array{Main.VertexDataRectangle, 1}}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{Main.VertexDataRectangle}}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Pointer{Main.VertexDataRectangle}}, SPIRV.PointerType})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Main.VertexDataRectangle}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Array{Main.VertexDataRectangle, 1}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Tuple{Array{Main.VertexDataRectangle, 1}}}})
precompile(Tuple{typeof(Base.fieldnames), Type{Tuple{Array{Main.VertexDataRectangle, 1}}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Pointer{Tuple{Array{Main.VertexDataRectangle, 1}}}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Pointer{Main.VertexDataRectangle}}})
precompile(Tuple{typeof(Main.save_test_render), String, Base.ReshapedArray{ColorTypes.RGBA{Float16}, 2, Base.ReinterpretArray{ColorTypes.RGBA{Float16}, 1, UInt8, Array{UInt8, 1}, false}, Tuple{}}, UInt64})
precompile(Tuple{typeof(ImageIO.save), FileIO.File{FileIO.DataFormat{:PNG}, String}, LinearAlgebra.Adjoint{ColorTypes.RGBA{Float16}, Base.ReshapedArray{ColorTypes.RGBA{Float16}, 2, Base.ReinterpretArray{ColorTypes.RGBA{Float16}, 1, UInt8, Array{UInt8, 1}, false}, Tuple{}}}})
precompile(Tuple{ImageIO.var"##save#5", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ImageIO.save), FileIO.File{FileIO.DataFormat{:PNG}, String}, LinearAlgebra.Adjoint{ColorTypes.RGBA{Float16}, Base.ReshapedArray{ColorTypes.RGBA{Float16}, 2, Base.ReinterpretArray{ColorTypes.RGBA{Float16}, 1, UInt8, Array{UInt8, 1}, false}, Tuple{}}}})
precompile(Tuple{typeof(PNGFiles._readcallback), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(PNGFiles._readcallback_iobuffer), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(PNGFiles._writecallback), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(PNGFiles.png_error_handler), Ptr{Nothing}, Base.Cstring})
precompile(Tuple{typeof(PNGFiles.png_warn_handler), Ptr{Nothing}, Base.Cstring})
precompile(Tuple{typeof(PNGFiles.__init__)})
precompile(Tuple{typeof(PNGFiles.save), String, LinearAlgebra.Adjoint{ColorTypes.RGBA{Float16}, Base.ReshapedArray{ColorTypes.RGBA{Float16}, 2, Base.ReinterpretArray{ColorTypes.RGBA{Float16}, 1, UInt8, Array{UInt8, 1}, false}, Tuple{}}}})
precompile(Tuple{typeof(Main.program_2), Lava.Device, Array{NTuple{4, Float32}, 1}, Lava.PhysicalAttachment})
precompile(Tuple{typeof(ImageIO.load), FileIO.File{FileIO.DataFormat{:PNG}, String}})
precompile(Tuple{typeof(PNGFiles.load), String})
precompile(Tuple{typeof(PNGFiles._load!), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt16, 16}}, 2}, Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{typeof(ImageIO.enforece_canonical_type), FileIO.File{FileIO.DataFormat{:PNG}, String}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt16, 16}}, 2}})
precompile(Tuple{Main.var"#37#38"{Lava.Device, Array{NTuple{4, Float32}, 1}, Lava.PhysicalAttachment, Tuple{Float32, Float32}}, Lava.CompactRecord})
precompile(Tuple{typeof(Base.eltype), Type{Array{Main.VertexDataTexture, 1}}})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{Tuple{Array{Main.VertexDataTexture, 1}}}}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Main.VertexDataTexture}, SPIRV.StructType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Array{Main.VertexDataTexture, 1}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Tuple{Array{Main.VertexDataTexture, 1}}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Pointer{Tuple{Array{Main.VertexDataTexture, 1}}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{Main.VertexDataTexture}}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Pointer{Main.VertexDataTexture}}, SPIRV.PointerType})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Main.VertexDataTexture}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Array{Main.VertexDataTexture, 1}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Tuple{Array{Main.VertexDataTexture, 1}}}})
precompile(Tuple{typeof(Base.fieldnames), Type{Tuple{Array{Main.VertexDataTexture, 1}}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Pointer{Tuple{Array{Main.VertexDataTexture, 1}}}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Pointer{Main.VertexDataTexture}}})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{Main.MaterialDataTexture}}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{Main.MaterialDataTexture}, SPIRV.StructType})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Any, SPIRV.SPIRType}, Type{SPIRV.Pointer{Main.MaterialDataTexture}}, SPIRV.PointerType})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Main.MaterialDataTexture}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{SPIRV.Pointer{Main.MaterialDataTexture}}})
precompile(Tuple{typeof(Main.program_3), Lava.Device, Array{Tuple{Float32, Float32, ColorTypes.RGB{Float32}}, 1}, Lava.PhysicalAttachment})
precompile(Tuple{Main.var"#39#40"{Lava.Device, Array{Tuple{Float32, Float32, ColorTypes.RGB{Float32}}, 1}, Lava.PhysicalAttachment}, Lava.CompactRecord})
precompile(Tuple{typeof(Main.test_validation_msg), Main.var"#41#45"{XCB.XCBWindow}, Main.var"#42#46"})
precompile(Tuple{typeof(Main.xcb_surface), Lava.Instance, XCB.XCBWindow})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Vulkan._SurfaceCapabilities2KHR})
precompile(Tuple{Type{NamedTuple{(:next, :flags, :old_swapchain), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.SwapchainCreateFlagKHR, Ptr{Nothing}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :flags, :old_swapchain), Tuple{Ptr{Nothing}, Vulkan.SwapchainCreateFlagKHR, Ptr{Nothing}}}, Type{Vulkan._SwapchainCreateInfoKHR}, Vulkan.SurfaceKHR, UInt32, Vulkan.Format, Vulkan.ColorSpaceKHR, Vulkan._Extent2D, UInt32, Vulkan.ImageUsageFlag, Vulkan.SharingMode, Array{UInt32, 1}, Vulkan.SurfaceTransformFlagKHR, Vulkan.CompositeAlphaFlagKHR, Vulkan.PresentModeKHR, Bool})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Vulkan._SemaphoreTypeCreateInfo, Base.RefValue{VulkanCore.LibVulkan.VkSemaphoreTypeCreateInfo}}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, Main.var"#cycle_f#47", Float64})
precompile(Tuple{typeof(Main.test_validation_msg), Main.var"#43#49"{Main.var"#cycle_render#48"{Main.var"#cycle_f#47"}, Lava.FrameCycle{XCB.XCBWindow}}, Main.var"#44#50"})
precompile(Tuple{typeof(Main.render_rectangle), Lava.Device, Lava.ImageWSI, Tuple{Float32, Float32}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._SemaphoreSubmitInfo, 1}, Array{VulkanCore.LibVulkan.VkSemaphoreSubmitInfo, 1}}})
precompile(Tuple{Main.var"#cycle_render#48"{Main.var"#cycle_f#47"}, Lava.FrameCycle{XCB.XCBWindow}, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{UInt16, UInt16}, Int64})
precompile(Tuple{typeof(Base.finalize), Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Pair{Symbol, Array{Tuple{String, Int64}, 1}}})
precompile(Tuple{REPL.var"#45#46"{REPL.LineEditREPL, Pair{Any, Bool}, Bool, Bool}, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.TTY}, Pair{Symbol, Module}})
